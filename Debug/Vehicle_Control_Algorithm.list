
Vehicle_Control_Algorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800cf80  0800cf80  0001cf80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d550  0800d550  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d550  0800d550  0001d550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d558  0800d558  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d558  0800d558  0001d558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d55c  0800d55c  0001d55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00007750  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007928  20007928  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e0ac  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d11  00000000  00000000  0003e2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b60  00000000  00000000  00043008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001530  00000000  00000000  00044b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006449  00000000  00000000  00046098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022c3c  00000000  00000000  0004c4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9c24  00000000  00000000  0006f11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000088a8  00000000  00000000  00158d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001615ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf68 	.word	0x0800cf68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800cf68 	.word	0x0800cf68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <R_initCircularBuffer>:
 *      Author: erenegdemir
 */

#include "RANGE.h"

void R_initCircularBuffer(CircularBuffer *cb) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    cb->head = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
    cb->count = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <R_addCurrentReading>:

void R_addCurrentReading(CircularBuffer *cb, float currentValue) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	ed87 0a00 	vstr	s0, [r7]
    cb->buffer[cb->head] = currentValue;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	601a      	str	r2, [r3, #0]
    cb->head = (cb->head + 1) % BUFFER_SIZE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <R_addCurrentReading+0x64>)
 800103a:	fb83 1302 	smull	r1, r3, r3, r2
 800103e:	1119      	asrs	r1, r3, #4
 8001040:	17d3      	asrs	r3, r2, #31
 8001042:	1acb      	subs	r3, r1, r3
 8001044:	21fa      	movs	r1, #250	; 0xfa
 8001046:	fb01 f303 	mul.w	r3, r1, r3
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	f8c2 33e8 	str.w	r3, [r2, #1000]	; 0x3e8

    if (cb->count < BUFFER_SIZE) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8001058:	2bf9      	cmp	r3, #249	; 0xf9
 800105a:	dc06      	bgt.n	800106a <R_addCurrentReading+0x56>
        cb->count++;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    }

}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	10624dd3 	.word	0x10624dd3

0800107c <R_calculateAverage>:

float R_calculateAverage(CircularBuffer *cb) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    float sum = 0.0;
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
    int i;
    for (i = 0; i < cb->count; i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	e00e      	b.n	80010ae <R_calculateAverage+0x32>
        sum += cb->buffer[i];
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ed97 7a03 	vldr	s14, [r7, #12]
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	edc7 7a03 	vstr	s15, [r7, #12]
    for (i = 0; i < cb->count; i++) {
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	3301      	adds	r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbea      	blt.n	8001090 <R_calculateAverage+0x14>
    }
    return sum / cb->count;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <THR_pt1Filter_2>:
 * Input          : raw duty cycle, Kp (integral phactor), Ti (time integral constant), Ts (timing period).
 * Output         : None
 * Return         : Filtered duty cycle
 * Attention	  : None
 **********************************************************************************************/
uint32_t THR_pt1Filter_2(float INPUT, float Kp, float Ti, float Ts){
 80010e4:	b480      	push	{r7}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80010ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80010f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80010f6:	edc7 1a00 	vstr	s3, [r7]
	float T_ERROR = 0;
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
	static float prevOutput2;
//	float Kp = 20;
//	float Ti = 1.0;  // Integral time constant
//	float Ts = 0.001; // Sampling time

	T_ERROR = INPUT - prevOutput2;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <THR_pt1Filter_2+0x8c>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ed97 7a03 	vldr	s14, [r7, #12]
 800110a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110e:	edc7 7a05 	vstr	s15, [r7, #20]
	Output2 = Output2 + (Kp * T_ERROR * Ts) / (1 + Ti * Ts);
 8001112:	ed97 7a02 	vldr	s14, [r7, #8]
 8001116:	edd7 7a05 	vldr	s15, [r7, #20]
 800111a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111e:	edd7 7a00 	vldr	s15, [r7]
 8001122:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001126:	ed97 7a01 	vldr	s14, [r7, #4]
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800113a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <THR_pt1Filter_2+0x90>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <THR_pt1Filter_2+0x90>)
 800114a:	edc3 7a00 	vstr	s15, [r3]

	prevOutput2 = Output2;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <THR_pt1Filter_2+0x90>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <THR_pt1Filter_2+0x8c>)
 8001154:	6013      	str	r3, [r2, #0]

	return (uint32_t)Output2;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <THR_pt1Filter_2+0x90>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001160:	ee17 3a90 	vmov	r3, s15

}
 8001164:	4618      	mov	r0, r3
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	200001f4 	.word	0x200001f4
 8001174:	200001f8 	.word	0x200001f8

08001178 <THR_map>:
 * Input          : None
 * Output         : Pot variables
 * Return         : None
 * Attention	  : None
 **********************************************************************************************/
uint32_t THR_map(uint32_t VARIABLE, uint32_t VAR_LOW_VAL, uint32_t VAR_HIGH_VAL, uint32_t MAP_LOW_VAL, uint32_t MAP_HIGH_VAL) {
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]

	uint32_t MAPPED_VALUE = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]

	MAPPED_VALUE = ((VARIABLE - VAR_LOW_VAL) * (MAP_HIGH_VAL - MAP_LOW_VAL) / VAR_HIGH_VAL) + MAP_LOW_VAL;
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	6a39      	ldr	r1, [r7, #32]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	1a8a      	subs	r2, r1, r2
 8001196:	fb03 f202 	mul.w	r2, r3, r2
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]

	return MAPPED_VALUE;
 80011a6:	697b      	ldr	r3, [r7, #20]


}
 80011a8:	4618      	mov	r0, r3
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011c6:	4b8a      	ldr	r3, [pc, #552]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80011c8:	4a8a      	ldr	r2, [pc, #552]	; (80013f4 <MX_ADC1_Init+0x240>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011cc:	4b88      	ldr	r3, [pc, #544]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80011ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d4:	4b86      	ldr	r3, [pc, #536]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011da:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80011dc:	2201      	movs	r2, #1
 80011de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e0:	4b83      	ldr	r3, [pc, #524]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e6:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ee:	4b80      	ldr	r3, [pc, #512]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4b7e      	ldr	r3, [pc, #504]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80011f6:	4a80      	ldr	r2, [pc, #512]	; (80013f8 <MX_ADC1_Init+0x244>)
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fa:	4b7d      	ldr	r3, [pc, #500]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8001200:	4b7b      	ldr	r3, [pc, #492]	; (80013f0 <MX_ADC1_Init+0x23c>)
 8001202:	2210      	movs	r2, #16
 8001204:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001206:	4b7a      	ldr	r3, [pc, #488]	; (80013f0 <MX_ADC1_Init+0x23c>)
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120e:	4b78      	ldr	r3, [pc, #480]	; (80013f0 <MX_ADC1_Init+0x23c>)
 8001210:	2201      	movs	r2, #1
 8001212:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001214:	4876      	ldr	r0, [pc, #472]	; (80013f0 <MX_ADC1_Init+0x23c>)
 8001216:	f001 fe7b 	bl	8002f10 <HAL_ADC_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001220:	f001 f8dc 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800122c:	2301      	movs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	486e      	ldr	r0, [pc, #440]	; (80013f0 <MX_ADC1_Init+0x23c>)
 8001236:	f001 ffd3 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001240:	f001 f8cc 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001244:	2301      	movs	r3, #1
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001248:	2302      	movs	r3, #2
 800124a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124c:	463b      	mov	r3, r7
 800124e:	4619      	mov	r1, r3
 8001250:	4867      	ldr	r0, [pc, #412]	; (80013f0 <MX_ADC1_Init+0x23c>)
 8001252:	f001 ffc5 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800125c:	f001 f8be 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001260:	2302      	movs	r3, #2
 8001262:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001264:	2303      	movs	r3, #3
 8001266:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4860      	ldr	r0, [pc, #384]	; (80013f0 <MX_ADC1_Init+0x23c>)
 800126e:	f001 ffb7 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001278:	f001 f8b0 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800127c:	2303      	movs	r3, #3
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001280:	2304      	movs	r3, #4
 8001282:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4859      	ldr	r0, [pc, #356]	; (80013f0 <MX_ADC1_Init+0x23c>)
 800128a:	f001 ffa9 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001294:	f001 f8a2 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001298:	2304      	movs	r3, #4
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800129c:	2305      	movs	r3, #5
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4852      	ldr	r0, [pc, #328]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80012a6:	f001 ff9b 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80012b0:	f001 f894 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012b4:	2305      	movs	r3, #5
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80012b8:	2306      	movs	r3, #6
 80012ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	484b      	ldr	r0, [pc, #300]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80012c2:	f001 ff8d 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80012cc:	f001 f886 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012d0:	2306      	movs	r3, #6
 80012d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80012d4:	2307      	movs	r3, #7
 80012d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4844      	ldr	r0, [pc, #272]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80012de:	f001 ff7f 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80012e8:	f001 f878 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012ec:	2307      	movs	r3, #7
 80012ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80012f0:	2308      	movs	r3, #8
 80012f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	483d      	ldr	r0, [pc, #244]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80012fa:	f001 ff71 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001304:	f001 f86a 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001308:	2308      	movs	r3, #8
 800130a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800130c:	2309      	movs	r3, #9
 800130e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4619      	mov	r1, r3
 8001314:	4836      	ldr	r0, [pc, #216]	; (80013f0 <MX_ADC1_Init+0x23c>)
 8001316:	f001 ff63 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001320:	f001 f85c 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001324:	2309      	movs	r3, #9
 8001326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001328:	230a      	movs	r3, #10
 800132a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	482f      	ldr	r0, [pc, #188]	; (80013f0 <MX_ADC1_Init+0x23c>)
 8001332:	f001 ff55 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 800133c:	f001 f84e 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001340:	230a      	movs	r3, #10
 8001342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001344:	230b      	movs	r3, #11
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4828      	ldr	r0, [pc, #160]	; (80013f0 <MX_ADC1_Init+0x23c>)
 800134e:	f001 ff47 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001358:	f001 f840 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800135c:	230b      	movs	r3, #11
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001360:	230c      	movs	r3, #12
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4821      	ldr	r0, [pc, #132]	; (80013f0 <MX_ADC1_Init+0x23c>)
 800136a:	f001 ff39 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001374:	f001 f832 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001378:	230c      	movs	r3, #12
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800137c:	230d      	movs	r3, #13
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MX_ADC1_Init+0x23c>)
 8001386:	f001 ff2b 	bl	80031e0 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8001390:	f001 f824 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001394:	230d      	movs	r3, #13
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001398:	230e      	movs	r3, #14
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80013a2:	f001 ff1d 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80013ac:	f001 f816 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013b0:	230e      	movs	r3, #14
 80013b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80013b4:	230f      	movs	r3, #15
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80013be:	f001 ff0f 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 80013c8:	f001 f808 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80013cc:	230f      	movs	r3, #15
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 80013d0:	2310      	movs	r3, #16
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_ADC1_Init+0x23c>)
 80013da:	f001 ff01 	bl	80031e0 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 80013e4:	f000 fffa 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200001fc 	.word	0x200001fc
 80013f4:	40012000 	.word	0x40012000
 80013f8:	0f000001 	.word	0x0f000001

080013fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a49      	ldr	r2, [pc, #292]	; (8001540 <HAL_ADC_MspInit+0x144>)
 800141a:	4293      	cmp	r3, r2
 800141c:	f040 808c 	bne.w	8001538 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_ADC_MspInit+0x148>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	4a46      	ldr	r2, [pc, #280]	; (8001544 <HAL_ADC_MspInit+0x148>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	6453      	str	r3, [r2, #68]	; 0x44
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_ADC_MspInit+0x148>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	4b40      	ldr	r3, [pc, #256]	; (8001544 <HAL_ADC_MspInit+0x148>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4a3f      	ldr	r2, [pc, #252]	; (8001544 <HAL_ADC_MspInit+0x148>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6313      	str	r3, [r2, #48]	; 0x30
 800144c:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_ADC_MspInit+0x148>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_ADC_MspInit+0x148>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4a38      	ldr	r2, [pc, #224]	; (8001544 <HAL_ADC_MspInit+0x148>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6313      	str	r3, [r2, #48]	; 0x30
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_ADC_MspInit+0x148>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_ADC_MspInit+0x148>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a31      	ldr	r2, [pc, #196]	; (8001544 <HAL_ADC_MspInit+0x148>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <HAL_ADC_MspInit+0x148>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = C_MPPT_1_Pin|C_MPPT_2_Pin|C_MPPT_3_Pin|C_MPPT_4_Pin
 8001490:	233f      	movs	r3, #63	; 0x3f
 8001492:	61fb      	str	r3, [r7, #28]
                          |T_MOTOR_Pin|T_ESC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4829      	ldr	r0, [pc, #164]	; (8001548 <HAL_ADC_MspInit+0x14c>)
 80014a4:	f002 fe8a 	bl	80041bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = C_MPPT_5_Pin|C_MPPT_6_Pin|HYDROFOIL_Pin|T_MPPT_2_Pin
 80014a8:	23ff      	movs	r3, #255	; 0xff
 80014aa:	61fb      	str	r3, [r7, #28]
                          |T_MPPT_3_Pin|T_MPPT_4_Pin|T_MPPT_5_Pin|T_MPPT_6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ac:	2303      	movs	r3, #3
 80014ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	4824      	ldr	r0, [pc, #144]	; (800154c <HAL_ADC_MspInit+0x150>)
 80014bc:	f002 fe7e 	bl	80041bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MULTIPLEXER_Pin|THROTTLE_Pin;
 80014c0:	2303      	movs	r3, #3
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	481f      	ldr	r0, [pc, #124]	; (8001550 <HAL_ADC_MspInit+0x154>)
 80014d4:	f002 fe72 	bl	80041bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_ADC_MspInit+0x158>)
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_ADC_MspInit+0x15c>)
 80014dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_ADC_MspInit+0x158>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_ADC_MspInit+0x158>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_ADC_MspInit+0x158>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_ADC_MspInit+0x158>)
 80014f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_ADC_MspInit+0x158>)
 80014fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_ADC_MspInit+0x158>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_ADC_MspInit+0x158>)
 800150a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800150e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_ADC_MspInit+0x158>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_ADC_MspInit+0x158>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <HAL_ADC_MspInit+0x158>)
 800151e:	f002 fadd 	bl	8003adc <HAL_DMA_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001528:	f000 ff58 	bl	80023dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_ADC_MspInit+0x158>)
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_ADC_MspInit+0x158>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001538:	bf00      	nop
 800153a:	3730      	adds	r7, #48	; 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40012000 	.word	0x40012000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020800 	.word	0x40020800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	20000244 	.word	0x20000244
 8001558:	40026410 	.word	0x40026410

0800155c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <MX_CAN1_Init+0x60>)
 8001562:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <MX_CAN1_Init+0x64>)
 8001564:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_CAN1_Init+0x60>)
 8001568:	2210      	movs	r2, #16
 800156a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <MX_CAN1_Init+0x60>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_CAN1_Init+0x60>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_CAN1_Init+0x60>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_CAN1_Init+0x60>)
 8001580:	2200      	movs	r2, #0
 8001582:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <MX_CAN1_Init+0x60>)
 8001586:	2200      	movs	r2, #0
 8001588:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_CAN1_Init+0x60>)
 800158c:	2200      	movs	r2, #0
 800158e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_CAN1_Init+0x60>)
 8001592:	2200      	movs	r2, #0
 8001594:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_CAN1_Init+0x60>)
 8001598:	2200      	movs	r2, #0
 800159a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_CAN1_Init+0x60>)
 800159e:	2200      	movs	r2, #0
 80015a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_CAN1_Init+0x60>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_CAN1_Init+0x60>)
 80015aa:	f002 f8b9 	bl	8003720 <HAL_CAN_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80015b4:	f000 ff12 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002a4 	.word	0x200002a4
 80015c0:	40006400 	.word	0x40006400

080015c4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_CAN_MspInit+0x84>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d12c      	bne.n	8001640 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_CAN_MspInit+0x88>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_CAN_MspInit+0x88>)
 80015f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_CAN_MspInit+0x88>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_CAN_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_CAN_MspInit+0x88>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_CAN_MspInit+0x88>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800161e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001630:	2309      	movs	r3, #9
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_CAN_MspInit+0x8c>)
 800163c:	f002 fdbe 	bl	80041bc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40006400 	.word	0x40006400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020400 	.word	0x40020400

08001654 <delay>:
	count = 0;

}

void delay(uint16_t delay)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <delay+0x30>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8001666:	bf00      	nop
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <delay+0x30>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3f9      	bcc.n	8001668 <delay+0x14>
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000ffc 	.word	0x20000ffc

08001688 <_verify>:
                   n
* Output         : None
* Return         :
*******************************************************************************/
static unsigned char _verify(const void * ptr, int n)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
	uint32_t i;
	unsigned char * p = (uint8_t *)ptr;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]
	unsigned char result;

	for(i = 0, result = 0; i < n; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	2300      	movs	r3, #0
 800169c:	74fb      	strb	r3, [r7, #19]
 800169e:	e009      	b.n	80016b4 <_verify+0x2c>
	{
		result ^= p[i];
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4413      	add	r3, r2
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	7cfb      	ldrb	r3, [r7, #19]
 80016aa:	4053      	eors	r3, r2
 80016ac:	74fb      	strb	r3, [r7, #19]
	for(i = 0, result = 0; i < n; i++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d3f1      	bcc.n	80016a0 <_verify+0x18>
	}

	return result;
 80016bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <display_wakeup>:
* Output         : None
* Return         :
* Attention		   : None
*******************************************************************************/
void display_wakeup(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, DIS_WAKEUP_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2108      	movs	r1, #8
 80016d4:	480e      	ldr	r0, [pc, #56]	; (8001710 <display_wakeup+0x44>)
 80016d6:	f002 ff0d 	bl	80044f4 <HAL_GPIO_WritePin>
	delay(10);
 80016da:	200a      	movs	r0, #10
 80016dc:	f7ff ffba 	bl	8001654 <delay>
	HAL_GPIO_WritePin(GPIOE, DIS_WAKEUP_Pin, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2108      	movs	r1, #8
 80016e4:	480a      	ldr	r0, [pc, #40]	; (8001710 <display_wakeup+0x44>)
 80016e6:	f002 ff05 	bl	80044f4 <HAL_GPIO_WritePin>
	delay(400);
 80016ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80016ee:	f7ff ffb1 	bl	8001654 <delay>
	HAL_GPIO_WritePin(GPIOE, DIS_WAKEUP_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2108      	movs	r1, #8
 80016f6:	4806      	ldr	r0, [pc, #24]	; (8001710 <display_wakeup+0x44>)
 80016f8:	f002 fefc 	bl	80044f4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f001 fbe3 	bl	8002ec8 <HAL_Delay>
//	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);

	HAL_Delay(500);
 8001702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001706:	f001 fbdf 	bl	8002ec8 <HAL_Delay>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <display_update>:
* Output         : None
* Return         :
* Attention		   : None
*******************************************************************************/
void display_update(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	memcpy(_cmd_buff, _cmd_update, 8);
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <display_update+0x34>)
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <display_update+0x38>)
 800171c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001720:	e883 0003 	stmia.w	r3, {r0, r1}
	_cmd_buff[8] = _verify(_cmd_buff, 8);
 8001724:	2108      	movs	r1, #8
 8001726:	4808      	ldr	r0, [pc, #32]	; (8001748 <display_update+0x34>)
 8001728:	f7ff ffae 	bl	8001688 <_verify>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <display_update+0x34>)
 8001732:	721a      	strb	r2, [r3, #8]
//			isSend = 0;
//			while (!isSend){
//
//			}
//		}
	HAL_UART_Transmit(&huart1, (uint8_t *)_cmd_buff, 9, 1000);
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	2209      	movs	r2, #9
 800173a:	4903      	ldr	r1, [pc, #12]	; (8001748 <display_update+0x34>)
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <display_update+0x3c>)
 800173e:	f004 fd82 	bl	8006246 <HAL_UART_Transmit>



//	_putchars(_cmd_buff, 9);
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200002cc 	.word	0x200002cc
 800174c:	0800d0e4 	.word	0x0800d0e4
 8001750:	200010d4 	.word	0x200010d4

08001754 <display_fill_circle>:
* Output         : None
* Return         :
* Attention		   : None
*******************************************************************************/
void display_fill_circle(int x0, int y0, int r)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
	_cmd_buff[0] = FRAME_BEGINE;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <display_fill_circle+0x98>)
 8001762:	22a5      	movs	r2, #165	; 0xa5
 8001764:	701a      	strb	r2, [r3, #0]

	_cmd_buff[1] = 0x00;
 8001766:	4b21      	ldr	r3, [pc, #132]	; (80017ec <display_fill_circle+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	705a      	strb	r2, [r3, #1]
	_cmd_buff[2] = 0x0F;
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <display_fill_circle+0x98>)
 800176e:	220f      	movs	r2, #15
 8001770:	709a      	strb	r2, [r3, #2]

	_cmd_buff[3] = CMD_FILL_CIRCLE;
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <display_fill_circle+0x98>)
 8001774:	2227      	movs	r2, #39	; 0x27
 8001776:	70da      	strb	r2, [r3, #3]

	_cmd_buff[4] = (x0 >> 8) & 0xFF;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	121b      	asrs	r3, r3, #8
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <display_fill_circle+0x98>)
 8001780:	711a      	strb	r2, [r3, #4]
	_cmd_buff[5] = x0 & 0xFF;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <display_fill_circle+0x98>)
 8001788:	715a      	strb	r2, [r3, #5]
	_cmd_buff[6] = (y0 >> 8) & 0xFF;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	121b      	asrs	r3, r3, #8
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <display_fill_circle+0x98>)
 8001792:	719a      	strb	r2, [r3, #6]
	_cmd_buff[7] = y0 & 0xFF;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <display_fill_circle+0x98>)
 800179a:	71da      	strb	r2, [r3, #7]
	_cmd_buff[8] = (r >> 8) & 0xFF;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	121b      	asrs	r3, r3, #8
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <display_fill_circle+0x98>)
 80017a4:	721a      	strb	r2, [r3, #8]
	_cmd_buff[9] = r & 0xFF;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <display_fill_circle+0x98>)
 80017ac:	725a      	strb	r2, [r3, #9]


	_cmd_buff[10] = FRAME_END0;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <display_fill_circle+0x98>)
 80017b0:	22cc      	movs	r2, #204	; 0xcc
 80017b2:	729a      	strb	r2, [r3, #10]
	_cmd_buff[11] = FRAME_END1;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <display_fill_circle+0x98>)
 80017b6:	2233      	movs	r2, #51	; 0x33
 80017b8:	72da      	strb	r2, [r3, #11]
	_cmd_buff[12] = FRAME_END2;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <display_fill_circle+0x98>)
 80017bc:	22c3      	movs	r2, #195	; 0xc3
 80017be:	731a      	strb	r2, [r3, #12]
	_cmd_buff[13] = FRAME_END3;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <display_fill_circle+0x98>)
 80017c2:	223c      	movs	r2, #60	; 0x3c
 80017c4:	735a      	strb	r2, [r3, #13]
	_cmd_buff[14] = _verify(_cmd_buff, 14);
 80017c6:	210e      	movs	r1, #14
 80017c8:	4808      	ldr	r0, [pc, #32]	; (80017ec <display_fill_circle+0x98>)
 80017ca:	f7ff ff5d 	bl	8001688 <_verify>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <display_fill_circle+0x98>)
 80017d4:	739a      	strb	r2, [r3, #14]
//			while (!isSend){
//
//			}
//		}

	HAL_UART_Transmit(&huart1, (uint8_t *)_cmd_buff, 15, 1000);
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	220f      	movs	r2, #15
 80017dc:	4903      	ldr	r1, [pc, #12]	; (80017ec <display_fill_circle+0x98>)
 80017de:	4804      	ldr	r0, [pc, #16]	; (80017f0 <display_fill_circle+0x9c>)
 80017e0:	f004 fd31 	bl	8006246 <HAL_UART_Transmit>



//	_putchars(_cmd_buff, 15);
}
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200002cc 	.word	0x200002cc
 80017f0:	200010d4 	.word	0x200010d4

080017f4 <display_clear>:
* Output         : None
* Return         :
* Attention		   : None
*******************************************************************************/
void display_clear(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	_cmd_buff[0] = FRAME_BEGINE;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <display_clear+0x58>)
 80017fa:	22a5      	movs	r2, #165	; 0xa5
 80017fc:	701a      	strb	r2, [r3, #0]

	_cmd_buff[1] = 0x00;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <display_clear+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	705a      	strb	r2, [r3, #1]
	_cmd_buff[2] = 0x09;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <display_clear+0x58>)
 8001806:	2209      	movs	r2, #9
 8001808:	709a      	strb	r2, [r3, #2]

	_cmd_buff[3] = CMD_CLEAR;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <display_clear+0x58>)
 800180c:	222e      	movs	r2, #46	; 0x2e
 800180e:	70da      	strb	r2, [r3, #3]

	_cmd_buff[4] = FRAME_END0;
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <display_clear+0x58>)
 8001812:	22cc      	movs	r2, #204	; 0xcc
 8001814:	711a      	strb	r2, [r3, #4]
	_cmd_buff[5] = FRAME_END1;
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <display_clear+0x58>)
 8001818:	2233      	movs	r2, #51	; 0x33
 800181a:	715a      	strb	r2, [r3, #5]
	_cmd_buff[6] = FRAME_END2;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <display_clear+0x58>)
 800181e:	22c3      	movs	r2, #195	; 0xc3
 8001820:	719a      	strb	r2, [r3, #6]
	_cmd_buff[7] = FRAME_END3;
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <display_clear+0x58>)
 8001824:	223c      	movs	r2, #60	; 0x3c
 8001826:	71da      	strb	r2, [r3, #7]
	_cmd_buff[8] = _verify(_cmd_buff, 8);
 8001828:	2108      	movs	r1, #8
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <display_clear+0x58>)
 800182c:	f7ff ff2c 	bl	8001688 <_verify>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <display_clear+0x58>)
 8001836:	721a      	strb	r2, [r3, #8]
//			while (!isSend){
//
//			}
//		}

	HAL_UART_Transmit(&huart1, (uint8_t *)_cmd_buff, 9, 1000);
 8001838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183c:	2209      	movs	r2, #9
 800183e:	4903      	ldr	r1, [pc, #12]	; (800184c <display_clear+0x58>)
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <display_clear+0x5c>)
 8001842:	f004 fd00 	bl	8006246 <HAL_UART_Transmit>



//	_putchars(_cmd_buff, 9);
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200002cc 	.word	0x200002cc
 8001850:	200010d4 	.word	0x200010d4

08001854 <display_string>:
* Output         : None
* Return         :
* Attention		   : None
*******************************************************************************/
void display_string(const void * p, int x0, int y0)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	uint32_t string_size;
	unsigned char * ptr = (unsigned char *)p;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	617b      	str	r3, [r7, #20]


	string_size = strlen((const char *)ptr);
 8001864:	6978      	ldr	r0, [r7, #20]
 8001866:	f7fe fd03 	bl	8000270 <strlen>
 800186a:	6138      	str	r0, [r7, #16]
	string_size += 14;
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	330e      	adds	r3, #14
 8001870:	613b      	str	r3, [r7, #16]

	_cmd_buff[0] = FRAME_BEGINE;
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <display_string+0xcc>)
 8001874:	22a5      	movs	r2, #165	; 0xa5
 8001876:	701a      	strb	r2, [r3, #0]

	_cmd_buff[1] = (string_size >> 8) & 0xFF;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <display_string+0xcc>)
 8001880:	705a      	strb	r2, [r3, #1]
	_cmd_buff[2] = string_size & 0xFF;
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <display_string+0xcc>)
 8001888:	709a      	strb	r2, [r3, #2]

	_cmd_buff[3] = CMD_DRAW_STRING;
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <display_string+0xcc>)
 800188c:	2230      	movs	r2, #48	; 0x30
 800188e:	70da      	strb	r2, [r3, #3]

	_cmd_buff[4] = (x0 >> 8) & 0xFF;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	121b      	asrs	r3, r3, #8
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <display_string+0xcc>)
 8001898:	711a      	strb	r2, [r3, #4]
	_cmd_buff[5] = x0 & 0xFF;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <display_string+0xcc>)
 80018a0:	715a      	strb	r2, [r3, #5]
	_cmd_buff[6] = (y0 >> 8) & 0xFF;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <display_string+0xcc>)
 80018aa:	719a      	strb	r2, [r3, #6]
	_cmd_buff[7] = y0 & 0xFF;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <display_string+0xcc>)
 80018b2:	71da      	strb	r2, [r3, #7]

	strcpy((char *)(&_cmd_buff[8]), (const char *)ptr);
 80018b4:	6979      	ldr	r1, [r7, #20]
 80018b6:	481b      	ldr	r0, [pc, #108]	; (8001924 <display_string+0xd0>)
 80018b8:	f008 fa3f 	bl	8009d3a <strcpy>

	string_size -= 5;
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	3b05      	subs	r3, #5
 80018c0:	613b      	str	r3, [r7, #16]

	_cmd_buff[string_size] = FRAME_END0;
 80018c2:	4a17      	ldr	r2, [pc, #92]	; (8001920 <display_string+0xcc>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4413      	add	r3, r2
 80018c8:	22cc      	movs	r2, #204	; 0xcc
 80018ca:	701a      	strb	r2, [r3, #0]
	_cmd_buff[string_size + 1] = FRAME_END1;
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a13      	ldr	r2, [pc, #76]	; (8001920 <display_string+0xcc>)
 80018d2:	2133      	movs	r1, #51	; 0x33
 80018d4:	54d1      	strb	r1, [r2, r3]
	_cmd_buff[string_size + 2] = FRAME_END2;
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	3302      	adds	r3, #2
 80018da:	4a11      	ldr	r2, [pc, #68]	; (8001920 <display_string+0xcc>)
 80018dc:	21c3      	movs	r1, #195	; 0xc3
 80018de:	54d1      	strb	r1, [r2, r3]
	_cmd_buff[string_size + 3] = FRAME_END3;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	3303      	adds	r3, #3
 80018e4:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <display_string+0xcc>)
 80018e6:	213c      	movs	r1, #60	; 0x3c
 80018e8:	54d1      	strb	r1, [r2, r3]
	_cmd_buff[string_size + 4] = _verify(_cmd_buff, string_size + 4);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	3304      	adds	r3, #4
 80018ee:	461a      	mov	r2, r3
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1d1c      	adds	r4, r3, #4
 80018f4:	4611      	mov	r1, r2
 80018f6:	480a      	ldr	r0, [pc, #40]	; (8001920 <display_string+0xcc>)
 80018f8:	f7ff fec6 	bl	8001688 <_verify>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <display_string+0xcc>)
 8001902:	551a      	strb	r2, [r3, r4]
//			while (!isSend){
//
//			}
//		}

	HAL_UART_Transmit(&huart1, (uint8_t *)_cmd_buff, string_size + 5, 1000);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3305      	adds	r3, #5
 800190a:	b29a      	uxth	r2, r3
 800190c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001910:	4903      	ldr	r1, [pc, #12]	; (8001920 <display_string+0xcc>)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <display_string+0xd4>)
 8001914:	f004 fc97 	bl	8006246 <HAL_UART_Transmit>



//	_putchars(_cmd_buff, string_size + 5);
}
 8001918:	bf00      	nop
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	200002cc 	.word	0x200002cc
 8001924:	200002d4 	.word	0x200002d4
 8001928:	200010d4 	.word	0x200010d4

0800192c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <MX_DMA_Init+0x68>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a16      	ldr	r2, [pc, #88]	; (8001994 <MX_DMA_Init+0x68>)
 800193c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <MX_DMA_Init+0x68>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_DMA_Init+0x68>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <MX_DMA_Init+0x68>)
 8001958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <MX_DMA_Init+0x68>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2105      	movs	r1, #5
 800196e:	2010      	movs	r0, #16
 8001970:	f002 f88a 	bl	8003a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001974:	2010      	movs	r0, #16
 8001976:	f002 f8a3 	bl	8003ac0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2105      	movs	r1, #5
 800197e:	2038      	movs	r0, #56	; 0x38
 8001980:	f002 f882 	bl	8003a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001984:	2038      	movs	r0, #56	; 0x38
 8001986:	f002 f89b 	bl	8003ac0 <HAL_NVIC_EnableIRQ>

}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <HAL_ADC_ConvCpltCallback>:
 * Output         : Pot variables
 * Return         : None
 * Attention	  : None
 **********************************************************************************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1){
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <HAL_ADC_ConvCpltCallback+0xa0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d13f      	bne.n	8001a2a <HAL_ADC_ConvCpltCallback+0x92>
	  POWER.ADC_C_MPPT_5 = ADC_BUFFER[0];
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <HAL_ADC_ConvCpltCallback+0xa8>)
 80019b0:	61d3      	str	r3, [r2, #28]
	  POWER.ADC_C_MPPT_6 = ADC_BUFFER[1];
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <HAL_ADC_ConvCpltCallback+0xa8>)
 80019b8:	6213      	str	r3, [r2, #32]
	  HYDROFOIL.ADC_HYD = ADC_BUFFER[2];
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <HAL_ADC_ConvCpltCallback+0xac>)
 80019c0:	6013      	str	r3, [r2, #0]
	  TEMP.ADC_MPPT_2 = ADC_BUFFER[3];
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <HAL_ADC_ConvCpltCallback+0xb0>)
 80019c8:	6053      	str	r3, [r2, #4]
	  TEMP.ADC_MPPT_3 = ADC_BUFFER[4];
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_ADC_ConvCpltCallback+0xb0>)
 80019d0:	6093      	str	r3, [r2, #8]
	  TEMP.ADC_MPPT_4 = ADC_BUFFER[5];
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_ADC_ConvCpltCallback+0xb0>)
 80019d8:	60d3      	str	r3, [r2, #12]
	  TEMP.ADC_MPPT_5 = ADC_BUFFER[6];
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <HAL_ADC_ConvCpltCallback+0xb0>)
 80019e0:	6113      	str	r3, [r2, #16]
	  TEMP.ADC_MPPT_6 = ADC_BUFFER[7];
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_ADC_ConvCpltCallback+0xb0>)
 80019e8:	6153      	str	r3, [r2, #20]
	  TEMP.ADC_CONV_1 = ADC_BUFFER[8];
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_ADC_ConvCpltCallback+0xb0>)
 80019f0:	6253      	str	r3, [r2, #36]	; 0x24
	  THROTTLE.ADC_THR = ADC_BUFFER[9];
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <HAL_ADC_ConvCpltCallback+0xb4>)
 80019f8:	6013      	str	r3, [r2, #0]
	  POWER.ADC_C_MPPT_1 = ADC_BUFFER[10];
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001a00:	60d3      	str	r3, [r2, #12]
	  POWER.ADC_C_MPPT_2 = ADC_BUFFER[11];
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001a08:	6113      	str	r3, [r2, #16]
	  POWER.ADC_C_MPPT_3 = ADC_BUFFER[12];
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001a10:	6153      	str	r3, [r2, #20]
	  POWER.ADC_C_MPPT_4 = ADC_BUFFER[13];
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001a18:	6193      	str	r3, [r2, #24]
	  TEMP.ADC_MOTOR = ADC_BUFFER[14];
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001a20:	61d3      	str	r3, [r2, #28]
	  TEMP.ADC_ESC = ADC_BUFFER[15];
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001a28:	6213      	str	r3, [r2, #32]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40012000 	.word	0x40012000
 8001a3c:	200005d8 	.word	0x200005d8
 8001a40:	20000558 	.word	0x20000558
 8001a44:	200005c8 	.word	0x200005c8
 8001a48:	200004dc 	.word	0x200004dc
 8001a4c:	200004cc 	.word	0x200004cc

08001a50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <vApplicationGetIdleTaskMemory+0x30>)
 8001a66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000664 	.word	0x20000664
 8001a80:	200006b8 	.word	0x200006b8

08001a84 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b0aa      	sub	sp, #168	; 0xa8
 8001a88:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Data_Manage_ */
  osThreadDef(Data_Manage_, Data_Management_Algorithm, osPriorityHigh, 0, 1024);
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <MX_FREERTOS_Init+0xf0>)
 8001a8c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001a90:	461d      	mov	r5, r3
 8001a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Data_Manage_Handle = osThreadCreate(osThread(Data_Manage_), NULL);
 8001a9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 ff62 	bl	800696e <osThreadCreate>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <MX_FREERTOS_Init+0xf4>)
 8001aae:	6013      	str	r3, [r2, #0]

  /* definition and creation of Throttle_ */
  osThreadDef(Throttle_, Throttle_Algorithm, osPriorityHigh, 0, 256);
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <MX_FREERTOS_Init+0xf8>)
 8001ab2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001abc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ac0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Throttle_Handle = osThreadCreate(osThread(Throttle_), NULL);
 8001ac4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 ff4f 	bl	800696e <osThreadCreate>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <MX_FREERTOS_Init+0xfc>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Temp_Man_ */
  osThreadDef(Temp_Man_, Temperature_Manegement_Algorithm, osPriorityBelowNormal, 0, 2048);
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <MX_FREERTOS_Init+0x100>)
 8001ad8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001adc:	461d      	mov	r5, r3
 8001ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Temp_Man_Handle = osThreadCreate(osThread(Temp_Man_), NULL);
 8001aea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f004 ff3c 	bl	800696e <osThreadCreate>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <MX_FREERTOS_Init+0x104>)
 8001afa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Range_ */
  osThreadDef(Range_, Range_Algorithm, osPriorityAboveNormal, 0, 1024);
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <MX_FREERTOS_Init+0x108>)
 8001afe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001b02:	461d      	mov	r5, r3
 8001b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Range_Handle = osThreadCreate(osThread(Range_), NULL);
 8001b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 ff29 	bl	800696e <osThreadCreate>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <MX_FREERTOS_Init+0x10c>)
 8001b20:	6013      	str	r3, [r2, #0]

  /* definition and creation of Display_ */
  osThreadDef(Display_, Display_Algorithm, osPriorityBelowNormal, 0, 1024);
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <MX_FREERTOS_Init+0x110>)
 8001b24:	f107 041c 	add.w	r4, r7, #28
 8001b28:	461d      	mov	r5, r3
 8001b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Display_Handle = osThreadCreate(osThread(Display_), NULL);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 ff16 	bl	800696e <osThreadCreate>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <MX_FREERTOS_Init+0x114>)
 8001b46:	6013      	str	r3, [r2, #0]

  /* definition and creation of Hydrofoil */
  osThreadDef(Hydrofoil, Hydrofoil_Algorithm, osPriorityHigh, 0, 256);
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_FREERTOS_Init+0x118>)
 8001b4a:	463c      	mov	r4, r7
 8001b4c:	461d      	mov	r5, r3
 8001b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HydrofoilHandle = osThreadCreate(osThread(Hydrofoil), NULL);
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 ff05 	bl	800696e <osThreadCreate>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <MX_FREERTOS_Init+0x11c>)
 8001b68:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001b6a:	bf00      	nop
 8001b6c:	37a8      	adds	r7, #168	; 0xa8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	0800cf90 	.word	0x0800cf90
 8001b78:	2000064c 	.word	0x2000064c
 8001b7c:	0800cfb8 	.word	0x0800cfb8
 8001b80:	20000650 	.word	0x20000650
 8001b84:	0800cfe0 	.word	0x0800cfe0
 8001b88:	20000654 	.word	0x20000654
 8001b8c:	0800d004 	.word	0x0800d004
 8001b90:	20000658 	.word	0x20000658
 8001b94:	0800d02c 	.word	0x0800d02c
 8001b98:	2000065c 	.word	0x2000065c
 8001b9c:	0800d054 	.word	0x0800d054
 8001ba0:	20000660 	.word	0x20000660

08001ba4 <Data_Management_Algorithm>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Data_Management_Algorithm */
void Data_Management_Algorithm(void const * argument)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Data_Management_Algorithm */
  /* Infinite loop */

	HAL_ADC_Start_DMA(&hadc1, ADC_BUFFER, 16);
 8001bac:	2210      	movs	r2, #16
 8001bae:	4906      	ldr	r1, [pc, #24]	; (8001bc8 <Data_Management_Algorithm+0x24>)
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <Data_Management_Algorithm+0x28>)
 8001bb2:	f001 f9f1 	bl	8002f98 <HAL_ADC_Start_DMA>



  for(;;)
  {
	  GPS_get_location1();
 8001bb6:	f000 fa23 	bl	8002000 <GPS_get_location1>
	  GPS_get_location2();
 8001bba:	f000 fa8d 	bl	80020d8 <GPS_get_location2>





    osDelay(5);
 8001bbe:	2005      	movs	r0, #5
 8001bc0:	f004 ff21 	bl	8006a06 <osDelay>
	  GPS_get_location1();
 8001bc4:	e7f7      	b.n	8001bb6 <Data_Management_Algorithm+0x12>
 8001bc6:	bf00      	nop
 8001bc8:	200005d8 	.word	0x200005d8
 8001bcc:	200001fc 	.word	0x200001fc

08001bd0 <Throttle_Algorithm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Throttle_Algorithm */
void Throttle_Algorithm(void const * argument)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af02      	add	r7, sp, #8
 8001bd6:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  //THR_ADC_PREVIOUS = THROTTLE.ADC_THR;

	  THROTTLE.THR_ADC_FILTERED = THR_pt1Filter_2(THROTTLE.ADC_THR, 20, 1.0, 0.001);
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <Throttle_Algorithm+0x5c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be4:	eddf 1a12 	vldr	s3, [pc, #72]	; 8001c30 <Throttle_Algorithm+0x60>
 8001be8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001bec:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf4:	f7ff fa76 	bl	80010e4 <THR_pt1Filter_2>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <Throttle_Algorithm+0x5c>)
 8001bfc:	6093      	str	r3, [r2, #8]

	  THROTTLE.THR_DUTY_CYCLE = THR_map(THROTTLE.THR_ADC_FILTERED, 0, 4096, 100, 300);
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <Throttle_Algorithm+0x5c>)
 8001c00:	6898      	ldr	r0, [r3, #8]
 8001c02:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2364      	movs	r3, #100	; 0x64
 8001c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c0e:	2100      	movs	r1, #0
 8001c10:	f7ff fab2 	bl	8001178 <THR_map>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <Throttle_Algorithm+0x5c>)
 8001c18:	60d3      	str	r3, [r2, #12]

	  TIM2->CCR2 = THROTTLE.THR_DUTY_CYCLE;
 8001c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c1e:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <Throttle_Algorithm+0x5c>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	6393      	str	r3, [r2, #56]	; 0x38

    osDelay(10);
 8001c24:	200a      	movs	r0, #10
 8001c26:	f004 feee 	bl	8006a06 <osDelay>
	  THROTTLE.THR_ADC_FILTERED = THR_pt1Filter_2(THROTTLE.ADC_THR, 20, 1.0, 0.001);
 8001c2a:	e7d5      	b.n	8001bd8 <Throttle_Algorithm+0x8>
 8001c2c:	200004cc 	.word	0x200004cc
 8001c30:	3a83126f 	.word	0x3a83126f

08001c34 <Temperature_Manegement_Algorithm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Temperature_Manegement_Algorithm */
void Temperature_Manegement_Algorithm(void const * argument)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
//
//	  SELECTED_TEMP = temp_select(TEMP->TEMP_ESC, TEMP->TEMP_MOTOR);
//
//	  TMA_cooling_automation(GPIOD, W_COOL_Pin, SELECTED_TEMP, 45, 3, 1);

	  TEMP.TEMP_MPPT1 = 35.0;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <Temperature_Manegement_Algorithm+0x54>)
 8001c3e:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <Temperature_Manegement_Algorithm+0x58>)
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
      TEMP.TEMP_MPPT2 = 36.0;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <Temperature_Manegement_Algorithm+0x54>)
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <Temperature_Manegement_Algorithm+0x5c>)
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c
      TEMP.TEMP_MPPT3 = 34.0;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <Temperature_Manegement_Algorithm+0x54>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <Temperature_Manegement_Algorithm+0x60>)
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
	  TEMP.TEMP_MPPT4 = 38.0;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <Temperature_Manegement_Algorithm+0x54>)
 8001c50:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <Temperature_Manegement_Algorithm+0x64>)
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44
	  TEMP.TEMP_MPPT5 = 34.0;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <Temperature_Manegement_Algorithm+0x54>)
 8001c56:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <Temperature_Manegement_Algorithm+0x60>)
 8001c58:	649a      	str	r2, [r3, #72]	; 0x48
	  TEMP.TEMP_MPPT6 = 32.0;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <Temperature_Manegement_Algorithm+0x54>)
 8001c5c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c
	  TEMP.TEMP_CONV_1 = 38.0;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <Temperature_Manegement_Algorithm+0x54>)
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <Temperature_Manegement_Algorithm+0x64>)
 8001c66:	65da      	str	r2, [r3, #92]	; 0x5c
	  TEMP.TEMP_ESC = 45.0;
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <Temperature_Manegement_Algorithm+0x54>)
 8001c6a:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <Temperature_Manegement_Algorithm+0x68>)
 8001c6c:	659a      	str	r2, [r3, #88]	; 0x58
	  TEMP.TEMP_MOTOR = 46.0;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <Temperature_Manegement_Algorithm+0x54>)
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <Temperature_Manegement_Algorithm+0x6c>)
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54

	  temp_1 = 32.0;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <Temperature_Manegement_Algorithm+0x70>)
 8001c76:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8001c7a:	601a      	str	r2, [r3, #0]





    osDelay(3000);
 8001c7c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c80:	f004 fec1 	bl	8006a06 <osDelay>
	  TEMP.TEMP_MPPT1 = 35.0;
 8001c84:	e7da      	b.n	8001c3c <Temperature_Manegement_Algorithm+0x8>
 8001c86:	bf00      	nop
 8001c88:	200004dc 	.word	0x200004dc
 8001c8c:	420c0000 	.word	0x420c0000
 8001c90:	42100000 	.word	0x42100000
 8001c94:	42080000 	.word	0x42080000
 8001c98:	42180000 	.word	0x42180000
 8001c9c:	42340000 	.word	0x42340000
 8001ca0:	42380000 	.word	0x42380000
 8001ca4:	20000644 	.word	0x20000644

08001ca8 <Range_Algorithm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Range_Algorithm */
void Range_Algorithm(void const * argument)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001cb4:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8001cb8:	6018      	str	r0, [r3, #0]

  for(;;)
  {
	  CircularBuffer CB;

	  R_initCircularBuffer(&CB);
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f996 	bl	8000ff0 <R_initCircularBuffer>

	  if(POWER.CN_CURRENT > 0){
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <Range_Algorithm+0x80>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00c      	beq.n	8001ce6 <Range_Algorithm+0x3e>

		 R_addCurrentReading(&CB, POWER.CN_CURRENT);
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <Range_Algorithm+0x80>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd8:	f107 0308 	add.w	r3, r7, #8
 8001cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f997 	bl	8001014 <R_addCurrentReading>
	  }

	  POWER.AVARAGE_CN_CURRENT = R_calculateAverage(&CB);
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f9c6 	bl	800107c <R_calculateAverage>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf8:	ee17 2a90 	vmov	r2, s15
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <Range_Algorithm+0x80>)
 8001cfe:	66da      	str	r2, [r3, #108]	; 0x6c

	  POWER.R_ENERGY = 45;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <Range_Algorithm+0x80>)
 8001d02:	222d      	movs	r2, #45	; 0x2d
 8001d04:	601a      	str	r2, [r3, #0]

	  POWER.R_TIME = POWER.AVARAGE_CN_CURRENT / POWER.R_ENERGY;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <Range_Algorithm+0x80>)
 8001d08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <Range_Algorithm+0x80>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <Range_Algorithm+0x80>)
 8001d14:	6093      	str	r3, [r2, #8]

	  temp_2 = temp_1;
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <Range_Algorithm+0x84>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <Range_Algorithm+0x88>)
 8001d1c:	6013      	str	r3, [r2, #0]




    osDelay(10);
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f004 fe71 	bl	8006a06 <osDelay>
  {
 8001d24:	e7c9      	b.n	8001cba <Range_Algorithm+0x12>
 8001d26:	bf00      	nop
 8001d28:	20000558 	.word	0x20000558
 8001d2c:	20000644 	.word	0x20000644
 8001d30:	20000648 	.word	0x20000648

08001d34 <Display_Algorithm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display_Algorithm */
void Display_Algorithm(void const * argument)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display_Algorithm */
  /* Infinite loop */
//	 display_reset();

	HAL_TIM_Base_Start(&htim1);
 8001d3c:	4815      	ldr	r0, [pc, #84]	; (8001d94 <Display_Algorithm+0x60>)
 8001d3e:	f003 fad9 	bl	80052f4 <HAL_TIM_Base_Start>
//
//		   TEMP.ADC_MCU = __HAL_TIM_GET_COUNTER(&htim1);
//
//	   }

	  display_wakeup();
 8001d42:	f7ff fcc3 	bl	80016cc <display_wakeup>

//	  interface_write_logo(0, 0);
	  display_clear();
 8001d46:	f7ff fd55 	bl	80017f4 <display_clear>
	  display_fill_circle(40, 40, 20);
 8001d4a:	2214      	movs	r2, #20
 8001d4c:	2128      	movs	r1, #40	; 0x28
 8001d4e:	2028      	movs	r0, #40	; 0x28
 8001d50:	f7ff fd00 	bl	8001754 <display_fill_circle>
	  display_string("Tekrar Merhabalar aq", 100, 100);
 8001d54:	2264      	movs	r2, #100	; 0x64
 8001d56:	2164      	movs	r1, #100	; 0x64
 8001d58:	480f      	ldr	r0, [pc, #60]	; (8001d98 <Display_Algorithm+0x64>)
 8001d5a:	f7ff fd7b 	bl	8001854 <display_string>
	  display_update();
 8001d5e:	f7ff fcd9 	bl	8001714 <display_update>
//
//	  interface_write_mtrTmp(50, 400, TEMP.TEMP_MOTOR);
//
//	  interface_write_escTmp(550, 400, TEMP.TEMP_ESC);

	  osThreadSuspend(Range_Handle);
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <Display_Algorithm+0x68>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 fe61 	bl	8006a2e <osThreadSuspend>
	  osThreadSuspend(HydrofoilHandle);
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <Display_Algorithm+0x6c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 fe5c 	bl	8006a2e <osThreadSuspend>
	  osThreadSuspend(Throttle_Handle);
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <Display_Algorithm+0x70>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fe57 	bl	8006a2e <osThreadSuspend>
	  osThreadSuspend(Data_Manage_Handle);
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <Display_Algorithm+0x74>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 fe52 	bl	8006a2e <osThreadSuspend>


    osDelay(5000);
 8001d8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d8e:	f004 fe3a 	bl	8006a06 <osDelay>
	  display_wakeup();
 8001d92:	e7d6      	b.n	8001d42 <Display_Algorithm+0xe>
 8001d94:	20000ffc 	.word	0x20000ffc
 8001d98:	0800d070 	.word	0x0800d070
 8001d9c:	20000658 	.word	0x20000658
 8001da0:	20000660 	.word	0x20000660
 8001da4:	20000650 	.word	0x20000650
 8001da8:	2000064c 	.word	0x2000064c

08001dac <Hydrofoil_Algorithm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Hydrofoil_Algorithm */
void Hydrofoil_Algorithm(void const * argument)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	6078      	str	r0, [r7, #4]


  for(;;)
  {

	  HYDROFOIL.HYD_ADC_FILTERED = THR_pt1Filter_2(HYDROFOIL.ADC_HYD, 20, 1.0, 0.001);
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <Hydrofoil_Algorithm+0x5c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc0:	eddf 1a12 	vldr	s3, [pc, #72]	; 8001e0c <Hydrofoil_Algorithm+0x60>
 8001dc4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001dc8:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd0:	f7ff f988 	bl	80010e4 <THR_pt1Filter_2>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <Hydrofoil_Algorithm+0x5c>)
 8001dd8:	6093      	str	r3, [r2, #8]

	  HYDROFOIL.HYD_DUTY_CYCLE = THR_map(HYDROFOIL.HYD_ADC_FILTERED, 0, 4096, 100, 300);
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <Hydrofoil_Algorithm+0x5c>)
 8001ddc:	6898      	ldr	r0, [r3, #8]
 8001dde:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2364      	movs	r3, #100	; 0x64
 8001de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dea:	2100      	movs	r1, #0
 8001dec:	f7ff f9c4 	bl	8001178 <THR_map>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <Hydrofoil_Algorithm+0x5c>)
 8001df4:	60d3      	str	r3, [r2, #12]

	  TIM3->CCR1 = HYDROFOIL.HYD_DUTY_CYCLE;
 8001df6:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <Hydrofoil_Algorithm+0x64>)
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <Hydrofoil_Algorithm+0x5c>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	6353      	str	r3, [r2, #52]	; 0x34


    osDelay(10);
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f004 fe01 	bl	8006a06 <osDelay>
	  HYDROFOIL.HYD_ADC_FILTERED = THR_pt1Filter_2(HYDROFOIL.ADC_HYD, 20, 1.0, 0.001);
 8001e04:	e7d6      	b.n	8001db4 <Hydrofoil_Algorithm+0x8>
 8001e06:	bf00      	nop
 8001e08:	200005c8 	.word	0x200005c8
 8001e0c:	3a83126f 	.word	0x3a83126f
 8001e10:	40000400 	.word	0x40000400

08001e14 <MX_GPIO_Init>:
        * EXTI
     PC2   ------> ADCx_IN12
     PC3   ------> ADCx_IN13
*/
void MX_GPIO_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a6e      	ldr	r2, [pc, #440]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e34:	f043 0310 	orr.w	r3, r3, #16
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	4b68      	ldr	r3, [pc, #416]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a67      	ldr	r2, [pc, #412]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b65      	ldr	r3, [pc, #404]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b61      	ldr	r3, [pc, #388]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a60      	ldr	r2, [pc, #384]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b5e      	ldr	r3, [pc, #376]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b5a      	ldr	r3, [pc, #360]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a59      	ldr	r2, [pc, #356]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b57      	ldr	r3, [pc, #348]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b53      	ldr	r3, [pc, #332]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a52      	ldr	r2, [pc, #328]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b50      	ldr	r3, [pc, #320]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a4b      	ldr	r2, [pc, #300]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b49      	ldr	r3, [pc, #292]	; (8001fec <MX_GPIO_Init+0x1d8>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIS_WAKEUP_Pin|DIS_RESET_Pin|MPX_1_Pin|MPX_2_Pin
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 61f3 	mov.w	r1, #1944	; 0x798
 8001ed8:	4845      	ldr	r0, [pc, #276]	; (8001ff0 <MX_GPIO_Init+0x1dc>)
 8001eda:	f002 fb0b 	bl	80044f4 <HAL_GPIO_WritePin>
                          |MPX_3_Pin|MPX_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_6_Pin|RELAY_5_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001ee4:	4843      	ldr	r0, [pc, #268]	; (8001ff4 <MX_GPIO_Init+0x1e0>)
 8001ee6:	f002 fb05 	bl	80044f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RELAY_4_Pin|RELAY_3_Pin|RELAY_2_Pin|W_COOL_Pin, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	210f      	movs	r1, #15
 8001eee:	4842      	ldr	r0, [pc, #264]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001ef0:	f002 fb00 	bl	80044f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DIS_WAKEUP_Pin|DIS_RESET_Pin|MPX_1_Pin|MPX_2_Pin
 8001ef4:	f44f 63f3 	mov.w	r3, #1944	; 0x798
 8001ef8:	61fb      	str	r3, [r7, #28]
                          |MPX_3_Pin|MPX_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4838      	ldr	r0, [pc, #224]	; (8001ff0 <MX_GPIO_Init+0x1dc>)
 8001f0e:	f002 f955 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 8001f12:	2360      	movs	r3, #96	; 0x60
 8001f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	4832      	ldr	r0, [pc, #200]	; (8001ff0 <MX_GPIO_Init+0x1dc>)
 8001f26:	f002 f949 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_4_Pin|BTN_5_Pin;
 8001f2a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	482d      	ldr	r0, [pc, #180]	; (8001ff4 <MX_GPIO_Init+0x1e0>)
 8001f40:	f002 f93c 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = C_MPPT_3_Pin|C_MPPT_4_Pin;
 8001f44:	230c      	movs	r3, #12
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4619      	mov	r1, r3
 8001f56:	4827      	ldr	r0, [pc, #156]	; (8001ff4 <MX_GPIO_Init+0x1e0>)
 8001f58:	f002 f930 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4822      	ldr	r0, [pc, #136]	; (8001ffc <MX_GPIO_Init+0x1e8>)
 8001f72:	f002 f923 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DHT_11_Pin|W_SENS_A_Pin|W_SENS_B_Pin;
 8001f76:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	481b      	ldr	r0, [pc, #108]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001f8c:	f002 f916 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RELAY_6_Pin|RELAY_5_Pin;
 8001f90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4812      	ldr	r0, [pc, #72]	; (8001ff4 <MX_GPIO_Init+0x1e0>)
 8001faa:	f002 f907 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RELAY_4_Pin|RELAY_3_Pin|RELAY_2_Pin|W_COOL_Pin;
 8001fae:	230f      	movs	r3, #15
 8001fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <MX_GPIO_Init+0x1e4>)
 8001fc6:	f002 f8f9 	bl	80041bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C_INTERRUPT_Pin;
 8001fca:	2320      	movs	r3, #32
 8001fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2C_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4807      	ldr	r0, [pc, #28]	; (8001ffc <MX_GPIO_Init+0x1e8>)
 8001fe0:	f002 f8ec 	bl	80041bc <HAL_GPIO_Init>

}
 8001fe4:	bf00      	nop
 8001fe6:	3730      	adds	r7, #48	; 0x30
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	40020400 	.word	0x40020400

08002000 <GPS_get_location1>:
	 HAL_UART_Receive_DMA(&huart2, (uint8_t*)Rxdata, 700);
}


void GPS_get_location1(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af02      	add	r7, sp, #8

    if (gps_flag == 1)
 8002006:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <GPS_get_location1+0xa4>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d146      	bne.n	800209c <GPS_get_location1+0x9c>
    {
    	Msgindex=0;
 800200e:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <GPS_get_location1+0xa8>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
    			strcpy(Txdata,(char*)(Rxdata));
 8002014:	4925      	ldr	r1, [pc, #148]	; (80020ac <GPS_get_location1+0xac>)
 8002016:	4826      	ldr	r0, [pc, #152]	; (80020b0 <GPS_get_location1+0xb0>)
 8002018:	f007 fe8f 	bl	8009d3a <strcpy>
    			ptr=strstr(Txdata,"GPRMC");
 800201c:	4925      	ldr	r1, [pc, #148]	; (80020b4 <GPS_get_location1+0xb4>)
 800201e:	4824      	ldr	r0, [pc, #144]	; (80020b0 <GPS_get_location1+0xb0>)
 8002020:	f007 fde8 	bl	8009bf4 <strstr>
 8002024:	4603      	mov	r3, r0
 8002026:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <GPS_get_location1+0xb8>)
 8002028:	6013      	str	r3, [r2, #0]
    			if(*ptr=='G')
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <GPS_get_location1+0xb8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b47      	cmp	r3, #71	; 0x47
 8002032:	d133      	bne.n	800209c <GPS_get_location1+0x9c>
    			{
    				while(1)
    				{
    					GPS_Payyload[Msgindex]=*ptr;
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <GPS_get_location1+0xb8>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <GPS_get_location1+0xa8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	7811      	ldrb	r1, [r2, #0]
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <GPS_get_location1+0xbc>)
 8002040:	54d1      	strb	r1, [r2, r3]
    					Msgindex++;
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <GPS_get_location1+0xa8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <GPS_get_location1+0xa8>)
 800204a:	6013      	str	r3, [r2, #0]
    					*ptr=*(ptr+Msgindex);
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <GPS_get_location1+0xb8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <GPS_get_location1+0xa8>)
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	441a      	add	r2, r3
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <GPS_get_location1+0xb8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	701a      	strb	r2, [r3, #0]
    					if(*ptr=='\n')
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <GPS_get_location1+0xb8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b0a      	cmp	r3, #10
 8002066:	d1e5      	bne.n	8002034 <GPS_get_location1+0x34>
    					{
    						GPS_Payyload[Msgindex]='\0';
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <GPS_get_location1+0xa8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <GPS_get_location1+0xbc>)
 800206e:	2100      	movs	r1, #0
 8002070:	54d1      	strb	r1, [r2, r3]
    						break;
 8002072:	bf00      	nop
    					}
    				}
    				sscanf(GPS_Payyload,"GPRMC,%f,A,%f,N,%f,E,%f",&gps1.time,&gps1.Latitude,&gps1.Longitude,&gps1.speed);
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <GPS_get_location1+0xc0>)
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <GPS_get_location1+0xc4>)
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <GPS_get_location1+0xc8>)
 800207e:	4a13      	ldr	r2, [pc, #76]	; (80020cc <GPS_get_location1+0xcc>)
 8002080:	4913      	ldr	r1, [pc, #76]	; (80020d0 <GPS_get_location1+0xd0>)
 8002082:	480e      	ldr	r0, [pc, #56]	; (80020bc <GPS_get_location1+0xbc>)
 8002084:	f006 fdd8 	bl	8008c38 <siscanf>
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <GPS_get_location1+0xd4>)
 800208a:	691b      	ldr	r3, [r3, #16]

    				memcpy(&gps1.speedread, &gps1.speed, sizeof(gps1.speedread));
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <GPS_get_location1+0xd4>)
 800208e:	6013      	str	r3, [r2, #0]

//    				GPS_Format_data(gps1.time, gps1.Latitude, gps1.Longitude, gps1.speed, gps1.altitude);
    				HAL_Delay(1);
 8002090:	2001      	movs	r0, #1
 8002092:	f000 ff19 	bl	8002ec8 <HAL_Delay>
    				gps_flag=0;
 8002096:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <GPS_get_location1+0xa4>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
    			}
    }
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000618 	.word	0x20000618
 80020a8:	20000efc 	.word	0x20000efc
 80020ac:	200008b8 	.word	0x200008b8
 80020b0:	20000ba8 	.word	0x20000ba8
 80020b4:	0800d088 	.word	0x0800d088
 80020b8:	20000f00 	.word	0x20000f00
 80020bc:	20000e98 	.word	0x20000e98
 80020c0:	2000062c 	.word	0x2000062c
 80020c4:	20000628 	.word	0x20000628
 80020c8:	20000624 	.word	0x20000624
 80020cc:	20000620 	.word	0x20000620
 80020d0:	0800d090 	.word	0x0800d090
 80020d4:	2000061c 	.word	0x2000061c

080020d8 <GPS_get_location2>:



void GPS_get_location2(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af06      	add	r7, sp, #24


	if(gps_flag==1)
 80020de:	4b28      	ldr	r3, [pc, #160]	; (8002180 <GPS_get_location2+0xa8>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d148      	bne.n	8002178 <GPS_get_location2+0xa0>
		{

			Msgindex=0;
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <GPS_get_location2+0xac>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
			strcpy(Txdata,(char*)(Rxdata));
 80020ec:	4926      	ldr	r1, [pc, #152]	; (8002188 <GPS_get_location2+0xb0>)
 80020ee:	4827      	ldr	r0, [pc, #156]	; (800218c <GPS_get_location2+0xb4>)
 80020f0:	f007 fe23 	bl	8009d3a <strcpy>
			ptr=strstr(Txdata,"GPGGA");
 80020f4:	4926      	ldr	r1, [pc, #152]	; (8002190 <GPS_get_location2+0xb8>)
 80020f6:	4825      	ldr	r0, [pc, #148]	; (800218c <GPS_get_location2+0xb4>)
 80020f8:	f007 fd7c 	bl	8009bf4 <strstr>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4a25      	ldr	r2, [pc, #148]	; (8002194 <GPS_get_location2+0xbc>)
 8002100:	6013      	str	r3, [r2, #0]
			if(*ptr=='G')
 8002102:	4b24      	ldr	r3, [pc, #144]	; (8002194 <GPS_get_location2+0xbc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b47      	cmp	r3, #71	; 0x47
 800210a:	d135      	bne.n	8002178 <GPS_get_location2+0xa0>
			{
				while(1)
				{
					GPS_Payyload[Msgindex]=*ptr;
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <GPS_get_location2+0xbc>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <GPS_get_location2+0xac>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	7811      	ldrb	r1, [r2, #0]
 8002116:	4a20      	ldr	r2, [pc, #128]	; (8002198 <GPS_get_location2+0xc0>)
 8002118:	54d1      	strb	r1, [r2, r3]
					Msgindex++;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <GPS_get_location2+0xac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	4a18      	ldr	r2, [pc, #96]	; (8002184 <GPS_get_location2+0xac>)
 8002122:	6013      	str	r3, [r2, #0]
					*ptr=*(ptr+Msgindex);
 8002124:	4b1b      	ldr	r3, [pc, #108]	; (8002194 <GPS_get_location2+0xbc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a16      	ldr	r2, [pc, #88]	; (8002184 <GPS_get_location2+0xac>)
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	441a      	add	r2, r3
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <GPS_get_location2+0xbc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	701a      	strb	r2, [r3, #0]
					if(*ptr=='\n')
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <GPS_get_location2+0xbc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b0a      	cmp	r3, #10
 800213e:	d1e5      	bne.n	800210c <GPS_get_location2+0x34>
					{
						GPS_Payyload[Msgindex]='\0';
 8002140:	4b10      	ldr	r3, [pc, #64]	; (8002184 <GPS_get_location2+0xac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <GPS_get_location2+0xc0>)
 8002146:	2100      	movs	r1, #0
 8002148:	54d1      	strb	r1, [r2, r3]
						break;
 800214a:	bf00      	nop
					}
				}
				sscanf(GPS_Payyload,"GPGGA,%f,%f,N,%f,E,%f,%f,%f,%f",&gps1.time,&gps1.Latitude,&gps1.Longitude,&gps1.trash,&gps1.trash,&gps1.trash,&gps1.altitude);
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <GPS_get_location2+0xc4>)
 800214e:	9304      	str	r3, [sp, #16]
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <GPS_get_location2+0xc8>)
 8002152:	9303      	str	r3, [sp, #12]
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <GPS_get_location2+0xc8>)
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <GPS_get_location2+0xc8>)
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <GPS_get_location2+0xcc>)
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <GPS_get_location2+0xd0>)
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <GPS_get_location2+0xd4>)
 8002164:	4912      	ldr	r1, [pc, #72]	; (80021b0 <GPS_get_location2+0xd8>)
 8002166:	480c      	ldr	r0, [pc, #48]	; (8002198 <GPS_get_location2+0xc0>)
 8002168:	f006 fd66 	bl	8008c38 <siscanf>
//				GPS_Format_data(gps1.time, gps1.Latitude, gps1.Longitude, gps1.speed, gps1.altitude);
				HAL_Delay(1);
 800216c:	2001      	movs	r0, #1
 800216e:	f000 feab 	bl	8002ec8 <HAL_Delay>
				gps_flag=0;
 8002172:	4b03      	ldr	r3, [pc, #12]	; (8002180 <GPS_get_location2+0xa8>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
    			}
    }
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000618 	.word	0x20000618
 8002184:	20000efc 	.word	0x20000efc
 8002188:	200008b8 	.word	0x200008b8
 800218c:	20000ba8 	.word	0x20000ba8
 8002190:	0800d0a8 	.word	0x0800d0a8
 8002194:	20000f00 	.word	0x20000f00
 8002198:	20000e98 	.word	0x20000e98
 800219c:	20000630 	.word	0x20000630
 80021a0:	20000634 	.word	0x20000634
 80021a4:	20000628 	.word	0x20000628
 80021a8:	20000624 	.word	0x20000624
 80021ac:	20000620 	.word	0x20000620
 80021b0:	0800d0b0 	.word	0x0800d0b0

080021b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <MX_I2C1_Init+0x50>)
 80021ba:	4a13      	ldr	r2, [pc, #76]	; (8002208 <MX_I2C1_Init+0x54>)
 80021bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_I2C1_Init+0x50>)
 80021c0:	4a12      	ldr	r2, [pc, #72]	; (800220c <MX_I2C1_Init+0x58>)
 80021c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_I2C1_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_I2C1_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <MX_I2C1_Init+0x50>)
 80021d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <MX_I2C1_Init+0x50>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <MX_I2C1_Init+0x50>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <MX_I2C1_Init+0x50>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_I2C1_Init+0x50>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021f0:	4804      	ldr	r0, [pc, #16]	; (8002204 <MX_I2C1_Init+0x50>)
 80021f2:	f002 f999 	bl	8004528 <HAL_I2C_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021fc:	f000 f8ee 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000f04 	.word	0x20000f04
 8002208:	40005400 	.word	0x40005400
 800220c:	000186a0 	.word	0x000186a0

08002210 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_I2C_MspInit+0x84>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12b      	bne.n	800228a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_I2C_MspInit+0x88>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_I2C_MspInit+0x88>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <HAL_I2C_MspInit+0x88>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800224e:	23c0      	movs	r3, #192	; 0xc0
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002252:	2312      	movs	r3, #18
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800225e:	2304      	movs	r3, #4
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <HAL_I2C_MspInit+0x8c>)
 800226a:	f001 ffa7 	bl	80041bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_I2C_MspInit+0x88>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a08      	ldr	r2, [pc, #32]	; (8002298 <HAL_I2C_MspInit+0x88>)
 8002278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_I2C_MspInit+0x88>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800228a:	bf00      	nop
 800228c:	3728      	adds	r7, #40	; 0x28
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40005400 	.word	0x40005400
 8002298:	40023800 	.word	0x40023800
 800229c:	40020400 	.word	0x40020400

080022a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a4:	f000 fdce 	bl	8002e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a8:	f000 f81c 	bl	80022e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ac:	f7ff fdb2 	bl	8001e14 <MX_GPIO_Init>
  MX_DMA_Init();
 80022b0:	f7ff fb3c 	bl	800192c <MX_DMA_Init>
  MX_ADC1_Init();
 80022b4:	f7fe ff7e 	bl	80011b4 <MX_ADC1_Init>
  MX_CAN1_Init();
 80022b8:	f7ff f950 	bl	800155c <MX_CAN1_Init>
  MX_I2C1_Init();
 80022bc:	f7ff ff7a 	bl	80021b4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80022c0:	f000 f892 	bl	80023e8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80022c4:	f000 fc8e 	bl	8002be4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80022c8:	f000 fcb6 	bl	8002c38 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80022cc:	f000 fb18 	bl	8002900 <MX_TIM2_Init>
  MX_TIM3_Init();
 80022d0:	f000 fb70 	bl	80029b4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80022d4:	f000 fac4 	bl	8002860 <MX_TIM1_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80022d8:	f7ff fbd4 	bl	8001a84 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80022dc:	f004 fb40 	bl	8006960 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <main+0x40>
	...

080022e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b094      	sub	sp, #80	; 0x50
 80022e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ea:	f107 0320 	add.w	r3, r7, #32
 80022ee:	2230      	movs	r2, #48	; 0x30
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f007 fc94 	bl	8009c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <SystemClock_Config+0xcc>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <SystemClock_Config+0xcc>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6413      	str	r3, [r2, #64]	; 0x40
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <SystemClock_Config+0xcc>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <SystemClock_Config+0xd0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <SystemClock_Config+0xd0>)
 800232e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <SystemClock_Config+0xd0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002340:	2301      	movs	r3, #1
 8002342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800234a:	2302      	movs	r3, #2
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800234e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002354:	2304      	movs	r3, #4
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002358:	23a8      	movs	r3, #168	; 0xa8
 800235a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800235c:	2302      	movs	r3, #2
 800235e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002360:	2304      	movs	r3, #4
 8002362:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002364:	f107 0320 	add.w	r3, r7, #32
 8002368:	4618      	mov	r0, r3
 800236a:	f002 fa21 	bl	80047b0 <HAL_RCC_OscConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002374:	f000 f832 	bl	80023dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002378:	230f      	movs	r3, #15
 800237a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800237c:	2302      	movs	r3, #2
 800237e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002384:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800238a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	2105      	movs	r1, #5
 8002396:	4618      	mov	r0, r3
 8002398:	f002 fc82 	bl	8004ca0 <HAL_RCC_ClockConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023a2:	f000 f81b 	bl	80023dc <Error_Handler>
  }
}
 80023a6:	bf00      	nop
 80023a8:	3750      	adds	r7, #80	; 0x50
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40007000 	.word	0x40007000

080023b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023ca:	f000 fd5d 	bl	8002e88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40000c00 	.word	0x40000c00

080023dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <Error_Handler+0x8>
	...

080023e8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_SPI2_Init+0x64>)
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <MX_SPI2_Init+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <MX_SPI2_Init+0x64>)
 80023f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <MX_SPI2_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <MX_SPI2_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <MX_SPI2_Init+0x64>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <MX_SPI2_Init+0x64>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_SPI2_Init+0x64>)
 8002414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002418:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_SPI2_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <MX_SPI2_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_SPI2_Init+0x64>)
 8002428:	2200      	movs	r2, #0
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <MX_SPI2_Init+0x64>)
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_SPI2_Init+0x64>)
 8002434:	220a      	movs	r2, #10
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002438:	4804      	ldr	r0, [pc, #16]	; (800244c <MX_SPI2_Init+0x64>)
 800243a:	f002 fe83 	bl	8005144 <HAL_SPI_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002444:	f7ff ffca 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000f58 	.word	0x20000f58
 8002450:	40003800 	.word	0x40003800

08002454 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_SPI_MspInit+0x84>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d12c      	bne.n	80024d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_SPI_MspInit+0x88>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_SPI_MspInit+0x88>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_SPI_MspInit+0x88>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_SPI_MspInit+0x88>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_SPI_MspInit+0x88>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_SPI_MspInit+0x88>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80024ae:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024c0:	2305      	movs	r3, #5
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HAL_SPI_MspInit+0x8c>)
 80024cc:	f001 fe76 	bl	80041bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40003800 	.word	0x40003800
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020400 	.word	0x40020400

080024e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_MspInit+0x54>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a11      	ldr	r2, [pc, #68]	; (8002538 <HAL_MspInit+0x54>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_MspInit+0x54>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_MspInit+0x54>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <HAL_MspInit+0x54>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <HAL_MspInit+0x54>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	210f      	movs	r1, #15
 8002526:	f06f 0001 	mvn.w	r0, #1
 800252a:	f001 faad 	bl	8003a88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08e      	sub	sp, #56	; 0x38
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	4b33      	ldr	r3, [pc, #204]	; (8002620 <HAL_InitTick+0xe4>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	4a32      	ldr	r2, [pc, #200]	; (8002620 <HAL_InitTick+0xe4>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6413      	str	r3, [r2, #64]	; 0x40
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_InitTick+0xe4>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002568:	f107 0210 	add.w	r2, r7, #16
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f002 fdb4 	bl	80050e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d103      	bne.n	800258a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002582:	f002 fd85 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 8002586:	6378      	str	r0, [r7, #52]	; 0x34
 8002588:	e004      	b.n	8002594 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800258a:	f002 fd81 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 800258e:	4603      	mov	r3, r0
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	4a23      	ldr	r2, [pc, #140]	; (8002624 <HAL_InitTick+0xe8>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	0c9b      	lsrs	r3, r3, #18
 800259e:	3b01      	subs	r3, #1
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <HAL_InitTick+0xec>)
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <HAL_InitTick+0xf0>)
 80025a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <HAL_InitTick+0xec>)
 80025aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025ae:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80025b0:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <HAL_InitTick+0xec>)
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_InitTick+0xec>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025bc:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <HAL_InitTick+0xec>)
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_InitTick+0xec>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80025c8:	4817      	ldr	r0, [pc, #92]	; (8002628 <HAL_InitTick+0xec>)
 80025ca:	f002 fe44 	bl	8005256 <HAL_TIM_Base_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80025d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11b      	bne.n	8002614 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80025dc:	4812      	ldr	r0, [pc, #72]	; (8002628 <HAL_InitTick+0xec>)
 80025de:	f002 fef1 	bl	80053c4 <HAL_TIM_Base_Start_IT>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80025e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d111      	bne.n	8002614 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80025f0:	2032      	movs	r0, #50	; 0x32
 80025f2:	f001 fa65 	bl	8003ac0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d808      	bhi.n	800260e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	2032      	movs	r0, #50	; 0x32
 8002602:	f001 fa41 	bl	8003a88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_InitTick+0xf4>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e002      	b.n	8002614 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002614:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002618:	4618      	mov	r0, r3
 800261a:	3738      	adds	r7, #56	; 0x38
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	431bde83 	.word	0x431bde83
 8002628:	20000fb0 	.word	0x20000fb0
 800262c:	40000c00 	.word	0x40000c00
 8002630:	20000004 	.word	0x20000004

08002634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <NMI_Handler+0x4>

0800263a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <HardFault_Handler+0x4>

08002640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <MemManage_Handler+0x4>

08002646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <BusFault_Handler+0x4>

0800264c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <UsageFault_Handler+0x4>

08002652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <DMA1_Stream5_IRQHandler+0x10>)
 8002666:	f001 fb3f 	bl	8003ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000115c 	.word	0x2000115c

08002674 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM1_CC_IRQHandler+0x10>)
 800267a:	f002 ff62 	bl	8005542 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000ffc 	.word	0x20000ffc

08002688 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <TIM5_IRQHandler+0x10>)
 800268e:	f002 ff58 	bl	8005542 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000fb0 	.word	0x20000fb0

0800269c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <DMA2_Stream0_IRQHandler+0x10>)
 80026a2:	f001 fb21 	bl	8003ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000244 	.word	0x20000244

080026b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return 1;
 80026b4:	2301      	movs	r3, #1
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_kill>:

int _kill(int pid, int sig)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ca:	f007 fafb 	bl	8009cc4 <__errno>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2216      	movs	r2, #22
 80026d2:	601a      	str	r2, [r3, #0]
  return -1;
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_exit>:

void _exit (int status)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ffe7 	bl	80026c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026f2:	e7fe      	b.n	80026f2 <_exit+0x12>

080026f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e00a      	b.n	800271c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002706:	f3af 8000 	nop.w
 800270a:	4601      	mov	r1, r0
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	60ba      	str	r2, [r7, #8]
 8002712:	b2ca      	uxtb	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	dbf0      	blt.n	8002706 <_read+0x12>
  }

  return len;
 8002724:	687b      	ldr	r3, [r7, #4]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	e009      	b.n	8002754 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	60ba      	str	r2, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	dbf1      	blt.n	8002740 <_write+0x12>
  }
  return len;
 800275c:	687b      	ldr	r3, [r7, #4]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <_close>:

int _close(int file)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800278e:	605a      	str	r2, [r3, #4]
  return 0;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <_isatty>:

int _isatty(int file)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <_sbrk+0x5c>)
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <_sbrk+0x60>)
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <_sbrk+0x64>)
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <_sbrk+0x68>)
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d207      	bcs.n	8002810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002800:	f007 fa60 	bl	8009cc4 <__errno>
 8002804:	4603      	mov	r3, r0
 8002806:	220c      	movs	r2, #12
 8002808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800280e:	e009      	b.n	8002824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <_sbrk+0x64>)
 8002820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20020000 	.word	0x20020000
 8002830:	00000400 	.word	0x00000400
 8002834:	20000ff8 	.word	0x20000ff8
 8002838:	20007928 	.word	0x20007928

0800283c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <SystemInit+0x20>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	4a05      	ldr	r2, [pc, #20]	; (800285c <SystemInit+0x20>)
 8002848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800284c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002874:	463b      	mov	r3, r7
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800287c:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <MX_TIM1_Init+0x98>)
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <MX_TIM1_Init+0x9c>)
 8002880:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <MX_TIM1_Init+0x98>)
 8002884:	22a7      	movs	r2, #167	; 0xa7
 8002886:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <MX_TIM1_Init+0x98>)
 800288a:	2200      	movs	r2, #0
 800288c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <MX_TIM1_Init+0x98>)
 8002890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002894:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_TIM1_Init+0x98>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_TIM1_Init+0x98>)
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <MX_TIM1_Init+0x98>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028a8:	4813      	ldr	r0, [pc, #76]	; (80028f8 <MX_TIM1_Init+0x98>)
 80028aa:	f002 fcd4 	bl	8005256 <HAL_TIM_Base_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80028b4:	f7ff fd92 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <MX_TIM1_Init+0x98>)
 80028c6:	f003 f807 	bl	80058d8 <HAL_TIM_ConfigClockSource>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80028d0:	f7ff fd84 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028dc:	463b      	mov	r3, r7
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_TIM1_Init+0x98>)
 80028e2:	f003 fbd3 	bl	800608c <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80028ec:	f7ff fd76 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000ffc 	.word	0x20000ffc
 80028fc:	40010000 	.word	0x40010000

08002900 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002906:	f107 0320 	add.w	r3, r7, #32
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]
 800291e:	615a      	str	r2, [r3, #20]
 8002920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <MX_TIM2_Init+0xb0>)
 8002924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <MX_TIM2_Init+0xb0>)
 800292c:	f240 628f 	movw	r2, #1679	; 0x68f
 8002930:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002932:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <MX_TIM2_Init+0xb0>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <MX_TIM2_Init+0xb0>)
 800293a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800293e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <MX_TIM2_Init+0xb0>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <MX_TIM2_Init+0xb0>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800294c:	4818      	ldr	r0, [pc, #96]	; (80029b0 <MX_TIM2_Init+0xb0>)
 800294e:	f002 fda9 	bl	80054a4 <HAL_TIM_PWM_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002958:	f7ff fd40 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002964:	f107 0320 	add.w	r3, r7, #32
 8002968:	4619      	mov	r1, r3
 800296a:	4811      	ldr	r0, [pc, #68]	; (80029b0 <MX_TIM2_Init+0xb0>)
 800296c:	f003 fb8e 	bl	800608c <HAL_TIMEx_MasterConfigSynchronization>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002976:	f7ff fd31 	bl	80023dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800297a:	2360      	movs	r3, #96	; 0x60
 800297c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2204      	movs	r2, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4807      	ldr	r0, [pc, #28]	; (80029b0 <MX_TIM2_Init+0xb0>)
 8002992:	f002 fedf 	bl	8005754 <HAL_TIM_PWM_ConfigChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800299c:	f7ff fd1e 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <MX_TIM2_Init+0xb0>)
 80029a2:	f000 f8bf 	bl	8002b24 <HAL_TIM_MspPostInit>

}
 80029a6:	bf00      	nop
 80029a8:	3728      	adds	r7, #40	; 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20001044 	.word	0x20001044

080029b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ba:	f107 0320 	add.w	r3, r7, #32
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	615a      	str	r2, [r3, #20]
 80029d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80029d6:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <MX_TIM3_Init+0xac>)
 80029d8:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <MX_TIM3_Init+0xb0>)
 80029da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80029dc:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <MX_TIM3_Init+0xac>)
 80029de:	2253      	movs	r2, #83	; 0x53
 80029e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <MX_TIM3_Init+0xac>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <MX_TIM3_Init+0xac>)
 80029ea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80029ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <MX_TIM3_Init+0xac>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <MX_TIM3_Init+0xac>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029fc:	4818      	ldr	r0, [pc, #96]	; (8002a60 <MX_TIM3_Init+0xac>)
 80029fe:	f002 fd51 	bl	80054a4 <HAL_TIM_PWM_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002a08:	f7ff fce8 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a14:	f107 0320 	add.w	r3, r7, #32
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4811      	ldr	r0, [pc, #68]	; (8002a60 <MX_TIM3_Init+0xac>)
 8002a1c:	f003 fb36 	bl	800608c <HAL_TIMEx_MasterConfigSynchronization>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002a26:	f7ff fcd9 	bl	80023dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2a:	2360      	movs	r3, #96	; 0x60
 8002a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4807      	ldr	r0, [pc, #28]	; (8002a60 <MX_TIM3_Init+0xac>)
 8002a42:	f002 fe87 	bl	8005754 <HAL_TIM_PWM_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002a4c:	f7ff fcc6 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a50:	4803      	ldr	r0, [pc, #12]	; (8002a60 <MX_TIM3_Init+0xac>)
 8002a52:	f000 f867 	bl	8002b24 <HAL_TIM_MspPostInit>

}
 8002a56:	bf00      	nop
 8002a58:	3728      	adds	r7, #40	; 0x28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	2000108c 	.word	0x2000108c
 8002a64:	40000400 	.word	0x40000400

08002a68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <HAL_TIM_Base_MspInit+0x48>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d115      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_TIM_Base_MspInit+0x4c>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <HAL_TIM_Base_MspInit+0x4c>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_TIM_Base_MspInit+0x4c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2105      	movs	r1, #5
 8002a9a:	201b      	movs	r0, #27
 8002a9c:	f000 fff4 	bl	8003a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002aa0:	201b      	movs	r0, #27
 8002aa2:	f001 f80d 	bl	8003ac0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_TIM_PWM_MspInit+0x64>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_TIM_PWM_MspInit+0x64>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_TIM_PWM_MspInit+0x64>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ae6:	e012      	b.n	8002b0e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <HAL_TIM_PWM_MspInit+0x68>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10d      	bne.n	8002b0e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_TIM_PWM_MspInit+0x64>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <HAL_TIM_PWM_MspInit+0x64>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_TIM_PWM_MspInit+0x64>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40000400 	.word	0x40000400

08002b24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d11e      	bne.n	8002b84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_TIM_MspPostInit+0xb0>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <HAL_TIM_MspPostInit+0xb0>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_TIM_MspPostInit+0xb0>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_THROTTLE_Pin;
 8002b62:	2308      	movs	r3, #8
 8002b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_THROTTLE_GPIO_Port, &GPIO_InitStruct);
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4816      	ldr	r0, [pc, #88]	; (8002bd8 <HAL_TIM_MspPostInit+0xb4>)
 8002b7e:	f001 fb1d 	bl	80041bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b82:	e022      	b.n	8002bca <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <HAL_TIM_MspPostInit+0xb8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11d      	bne.n	8002bca <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_TIM_MspPostInit+0xb0>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a0f      	ldr	r2, [pc, #60]	; (8002bd4 <HAL_TIM_MspPostInit+0xb0>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_TIM_MspPostInit+0xb0>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S_SERVO_Pin;
 8002baa:	2340      	movs	r3, #64	; 0x40
 8002bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(S_SERVO_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4806      	ldr	r0, [pc, #24]	; (8002be0 <HAL_TIM_MspPostInit+0xbc>)
 8002bc6:	f001 faf9 	bl	80041bc <HAL_GPIO_Init>
}
 8002bca:	bf00      	nop
 8002bcc:	3728      	adds	r7, #40	; 0x28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40020400 	.word	0x40020400
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40020800 	.word	0x40020800

08002be4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <MX_USART1_UART_Init+0x50>)
 8002bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c1a:	4805      	ldr	r0, [pc, #20]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c1c:	f003 fac6 	bl	80061ac <HAL_UART_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c26:	f7ff fbd9 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200010d4 	.word	0x200010d4
 8002c34:	40011000 	.word	0x40011000

08002c38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <MX_USART2_UART_Init+0x50>)
 8002c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c5e:	220c      	movs	r2, #12
 8002c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c6e:	4805      	ldr	r0, [pc, #20]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c70:	f003 fa9c 	bl	80061ac <HAL_UART_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c7a:	f7ff fbaf 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20001118 	.word	0x20001118
 8002c88:	40004400 	.word	0x40004400

08002c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <HAL_UART_MspInit+0x148>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12d      	bne.n	8002d0a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	4a48      	ldr	r2, [pc, #288]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002cb8:	f043 0310 	orr.w	r3, r3, #16
 8002cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cbe:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	4b42      	ldr	r3, [pc, #264]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a41      	ldr	r2, [pc, #260]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cf8:	2307      	movs	r3, #7
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfc:	f107 031c 	add.w	r3, r7, #28
 8002d00:	4619      	mov	r1, r3
 8002d02:	4836      	ldr	r0, [pc, #216]	; (8002ddc <HAL_UART_MspInit+0x150>)
 8002d04:	f001 fa5a 	bl	80041bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d08:	e05f      	b.n	8002dca <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <HAL_UART_MspInit+0x154>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d15a      	bne.n	8002dca <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a2e      	ldr	r2, [pc, #184]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
 8002d24:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	4a27      	ldr	r2, [pc, #156]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002d3a:	f043 0308 	orr.w	r3, r3, #8
 8002d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d40:	4b25      	ldr	r3, [pc, #148]	; (8002dd8 <HAL_UART_MspInit+0x14c>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_GPS_TX_Pin|UART_GPS_RX_Pin;
 8002d4c:	2360      	movs	r3, #96	; 0x60
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d5c:	2307      	movs	r3, #7
 8002d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	4619      	mov	r1, r3
 8002d66:	481f      	ldr	r0, [pc, #124]	; (8002de4 <HAL_UART_MspInit+0x158>)
 8002d68:	f001 fa28 	bl	80041bc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_UART_MspInit+0x160>)
 8002d70:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002d74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d78:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002da0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002dae:	480e      	ldr	r0, [pc, #56]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002db0:	f000 fe94 	bl	8003adc <HAL_DMA_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002dba:	f7ff fb0f 	bl	80023dc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
 8002dc4:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <HAL_UART_MspInit+0x15c>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002dca:	bf00      	nop
 8002dcc:	3730      	adds	r7, #48	; 0x30
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40011000 	.word	0x40011000
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40004400 	.word	0x40004400
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	2000115c 	.word	0x2000115c
 8002dec:	40026088 	.word	0x40026088

08002df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002df6:	490e      	ldr	r1, [pc, #56]	; (8002e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dfc:	e002      	b.n	8002e04 <LoopCopyDataInit>

08002dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e02:	3304      	adds	r3, #4

08002e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e08:	d3f9      	bcc.n	8002dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0a:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e0c:	4c0b      	ldr	r4, [pc, #44]	; (8002e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e10:	e001      	b.n	8002e16 <LoopFillZerobss>

08002e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e14:	3204      	adds	r2, #4

08002e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e18:	d3fb      	bcc.n	8002e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e1a:	f7ff fd0f 	bl	800283c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e1e:	f006 ff57 	bl	8009cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e22:	f7ff fa3d 	bl	80022a0 <main>
  bx  lr    
 8002e26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e30:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002e34:	0800d560 	.word	0x0800d560
  ldr r2, =_sbss
 8002e38:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002e3c:	20007928 	.word	0x20007928

08002e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e40:	e7fe      	b.n	8002e40 <ADC_IRQHandler>
	...

08002e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e48:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_Init+0x40>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <HAL_Init+0x40>)
 8002e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_Init+0x40>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_Init+0x40>)
 8002e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_Init+0x40>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <HAL_Init+0x40>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f000 fe00 	bl	8003a72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e72:	200f      	movs	r0, #15
 8002e74:	f7ff fb62 	bl	800253c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e78:	f7ff fb34 	bl	80024e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00

08002e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_IncTick+0x20>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x24>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_IncTick+0x24>)
 8002e9a:	6013      	str	r3, [r2, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	200011bc 	.word	0x200011bc

08002eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_GetTick+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	200011bc 	.word	0x200011bc

08002ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff ffee 	bl	8002eb0 <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee0:	d005      	beq.n	8002eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_Delay+0x44>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eee:	bf00      	nop
 8002ef0:	f7ff ffde 	bl	8002eb0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d8f7      	bhi.n	8002ef0 <HAL_Delay+0x28>
  {
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e033      	b.n	8002f8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe fa64 	bl	80013fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f56:	f023 0302 	bic.w	r3, r3, #2
 8002f5a:	f043 0202 	orr.w	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa5e 	bl	8003424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f7e:	e001      	b.n	8002f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_Start_DMA+0x1e>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e0e9      	b.n	800318a <HAL_ADC_Start_DMA+0x1f2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d018      	beq.n	8002ffe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fdc:	4b6d      	ldr	r3, [pc, #436]	; (8003194 <HAL_ADC_Start_DMA+0x1fc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6d      	ldr	r2, [pc, #436]	; (8003198 <HAL_ADC_Start_DMA+0x200>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0c9a      	lsrs	r2, r3, #18
 8002fe8:	4613      	mov	r3, r2
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	4413      	add	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ff0:	e002      	b.n	8002ff8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f9      	bne.n	8002ff2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d107      	bne.n	800301e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800301c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	f040 80a1 	bne.w	8003170 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003058:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306c:	d106      	bne.n	800307c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f023 0206 	bic.w	r2, r3, #6
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
 800307a:	e002      	b.n	8003082 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308a:	4b44      	ldr	r3, [pc, #272]	; (800319c <HAL_ADC_Start_DMA+0x204>)
 800308c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	4a43      	ldr	r2, [pc, #268]	; (80031a0 <HAL_ADC_Start_DMA+0x208>)
 8003094:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	4a42      	ldr	r2, [pc, #264]	; (80031a4 <HAL_ADC_Start_DMA+0x20c>)
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	4a41      	ldr	r2, [pc, #260]	; (80031a8 <HAL_ADC_Start_DMA+0x210>)
 80030a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80030be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	334c      	adds	r3, #76	; 0x4c
 80030da:	4619      	mov	r1, r3
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f000 fdaa 	bl	8003c38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d12a      	bne.n	8003146 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2d      	ldr	r2, [pc, #180]	; (80031ac <HAL_ADC_Start_DMA+0x214>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d015      	beq.n	8003126 <HAL_ADC_Start_DMA+0x18e>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <HAL_ADC_Start_DMA+0x218>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d105      	bne.n	8003110 <HAL_ADC_Start_DMA+0x178>
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_ADC_Start_DMA+0x204>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <HAL_ADC_Start_DMA+0x21c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d136      	bne.n	8003188 <HAL_ADC_Start_DMA+0x1f0>
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_ADC_Start_DMA+0x204>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d130      	bne.n	8003188 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d129      	bne.n	8003188 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e020      	b.n	8003188 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_ADC_Start_DMA+0x214>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d11b      	bne.n	8003188 <HAL_ADC_Start_DMA+0x1f0>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d114      	bne.n	8003188 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	e00b      	b.n	8003188 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f043 0210 	orr.w	r2, r3, #16
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000
 8003198:	431bde83 	.word	0x431bde83
 800319c:	40012300 	.word	0x40012300
 80031a0:	0800361d 	.word	0x0800361d
 80031a4:	080036d7 	.word	0x080036d7
 80031a8:	080036f3 	.word	0x080036f3
 80031ac:	40012000 	.word	0x40012000
 80031b0:	40012100 	.word	0x40012100
 80031b4:	40012200 	.word	0x40012200

080031b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x1c>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e105      	b.n	8003408 <HAL_ADC_ConfigChannel+0x228>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b09      	cmp	r3, #9
 800320a:	d925      	bls.n	8003258 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68d9      	ldr	r1, [r3, #12]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	3b1e      	subs	r3, #30
 8003222:	2207      	movs	r2, #7
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43da      	mvns	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	400a      	ands	r2, r1
 8003230:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68d9      	ldr	r1, [r3, #12]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	b29b      	uxth	r3, r3
 8003242:	4618      	mov	r0, r3
 8003244:	4603      	mov	r3, r0
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	4403      	add	r3, r0
 800324a:	3b1e      	subs	r3, #30
 800324c:	409a      	lsls	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	e022      	b.n	800329e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6919      	ldr	r1, [r3, #16]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	2207      	movs	r2, #7
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	400a      	ands	r2, r1
 800327a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6919      	ldr	r1, [r3, #16]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	4618      	mov	r0, r3
 800328e:	4603      	mov	r3, r0
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4403      	add	r3, r0
 8003294:	409a      	lsls	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d824      	bhi.n	80032f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	3b05      	subs	r3, #5
 80032b8:	221f      	movs	r2, #31
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	400a      	ands	r2, r1
 80032c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	3b05      	subs	r3, #5
 80032e2:	fa00 f203 	lsl.w	r2, r0, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	635a      	str	r2, [r3, #52]	; 0x34
 80032ee:	e04c      	b.n	800338a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d824      	bhi.n	8003342 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	3b23      	subs	r3, #35	; 0x23
 800330a:	221f      	movs	r2, #31
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43da      	mvns	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	400a      	ands	r2, r1
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	4618      	mov	r0, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	3b23      	subs	r3, #35	; 0x23
 8003334:	fa00 f203 	lsl.w	r2, r0, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
 8003340:	e023      	b.n	800338a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	3b41      	subs	r3, #65	; 0x41
 8003354:	221f      	movs	r2, #31
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	400a      	ands	r2, r1
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	4618      	mov	r0, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	3b41      	subs	r3, #65	; 0x41
 800337e:	fa00 f203 	lsl.w	r2, r0, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_ADC_ConfigChannel+0x234>)
 800338c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a21      	ldr	r2, [pc, #132]	; (8003418 <HAL_ADC_ConfigChannel+0x238>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d109      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1cc>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b12      	cmp	r3, #18
 800339e:	d105      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_ADC_ConfigChannel+0x238>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d123      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d003      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x1e6>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b11      	cmp	r3, #17
 80033c4:	d11b      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b10      	cmp	r3, #16
 80033d8:	d111      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_ADC_ConfigChannel+0x23c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <HAL_ADC_ConfigChannel+0x240>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	0c9a      	lsrs	r2, r3, #18
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f0:	e002      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f9      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40012300 	.word	0x40012300
 8003418:	40012000 	.word	0x40012000
 800341c:	20000000 	.word	0x20000000
 8003420:	431bde83 	.word	0x431bde83

08003424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800342c:	4b79      	ldr	r3, [pc, #484]	; (8003614 <ADC_Init+0x1f0>)
 800342e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	431a      	orrs	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	021a      	lsls	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800347c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	4a58      	ldr	r2, [pc, #352]	; (8003618 <ADC_Init+0x1f4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6899      	ldr	r1, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	e00f      	b.n	8003522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0202 	bic.w	r2, r2, #2
 8003530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7e1b      	ldrb	r3, [r3, #24]
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01b      	beq.n	8003588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800356e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	3b01      	subs	r3, #1
 800357c:	035a      	lsls	r2, r3, #13
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e007      	b.n	8003598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	051a      	lsls	r2, r3, #20
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6899      	ldr	r1, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035da:	025a      	lsls	r2, r3, #9
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	029a      	lsls	r2, r3, #10
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40012300 	.word	0x40012300
 8003618:	0f000001 	.word	0x0f000001

0800361c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13c      	bne.n	80036b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d12b      	bne.n	80036a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003654:	2b00      	cmp	r3, #0
 8003656:	d127      	bne.n	80036a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003670:	2b00      	cmp	r3, #0
 8003672:	d119      	bne.n	80036a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0220 	bic.w	r2, r2, #32
 8003682:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0201 	orr.w	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7fe f975 	bl	8001998 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036ae:	e00e      	b.n	80036ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff fd85 	bl	80031cc <HAL_ADC_ErrorCallback>
}
 80036c2:	e004      	b.n	80036ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff fd67 	bl	80031b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f7ff fd5a 	bl	80031cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0ed      	b.n	800390e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd ff40 	bl	80015c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003754:	f7ff fbac 	bl	8002eb0 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800375a:	e012      	b.n	8003782 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800375c:	f7ff fba8 	bl	8002eb0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b0a      	cmp	r3, #10
 8003768:	d90b      	bls.n	8003782 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2205      	movs	r2, #5
 800377a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0c5      	b.n	800390e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0e5      	beq.n	800375c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0202 	bic.w	r2, r2, #2
 800379e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a0:	f7ff fb86 	bl	8002eb0 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037a6:	e012      	b.n	80037ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037a8:	f7ff fb82 	bl	8002eb0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b0a      	cmp	r3, #10
 80037b4:	d90b      	bls.n	80037ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2205      	movs	r2, #5
 80037c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e09f      	b.n	800390e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e5      	bne.n	80037a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	7e1b      	ldrb	r3, [r3, #24]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d108      	bne.n	80037f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e007      	b.n	8003806 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7e5b      	ldrb	r3, [r3, #25]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d108      	bne.n	8003820 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e007      	b.n	8003830 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7e9b      	ldrb	r3, [r3, #26]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d108      	bne.n	800384a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0220 	orr.w	r2, r2, #32
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e007      	b.n	800385a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0220 	bic.w	r2, r2, #32
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	7edb      	ldrb	r3, [r3, #27]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d108      	bne.n	8003874 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0210 	bic.w	r2, r2, #16
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	e007      	b.n	8003884 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0210 	orr.w	r2, r2, #16
 8003882:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7f1b      	ldrb	r3, [r3, #28]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d108      	bne.n	800389e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0208 	orr.w	r2, r2, #8
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e007      	b.n	80038ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0208 	bic.w	r2, r2, #8
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7f5b      	ldrb	r3, [r3, #29]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d108      	bne.n	80038c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0204 	orr.w	r2, r2, #4
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e007      	b.n	80038d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	ea42 0103 	orr.w	r1, r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	1e5a      	subs	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <__NVIC_SetPriorityGrouping+0x44>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003934:	4013      	ands	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800394a:	4a04      	ldr	r2, [pc, #16]	; (800395c <__NVIC_SetPriorityGrouping+0x44>)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	60d3      	str	r3, [r2, #12]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <__NVIC_GetPriorityGrouping+0x18>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	f003 0307 	and.w	r3, r3, #7
}
 800396e:	4618      	mov	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	2b00      	cmp	r3, #0
 800398c:	db0b      	blt.n	80039a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	f003 021f 	and.w	r2, r3, #31
 8003994:	4907      	ldr	r1, [pc, #28]	; (80039b4 <__NVIC_EnableIRQ+0x38>)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2001      	movs	r0, #1
 800399e:	fa00 f202 	lsl.w	r2, r0, r2
 80039a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	e000e100 	.word	0xe000e100

080039b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	6039      	str	r1, [r7, #0]
 80039c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	db0a      	blt.n	80039e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	490c      	ldr	r1, [pc, #48]	; (8003a04 <__NVIC_SetPriority+0x4c>)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	0112      	lsls	r2, r2, #4
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	440b      	add	r3, r1
 80039dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039e0:	e00a      	b.n	80039f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	4908      	ldr	r1, [pc, #32]	; (8003a08 <__NVIC_SetPriority+0x50>)
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	3b04      	subs	r3, #4
 80039f0:	0112      	lsls	r2, r2, #4
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	440b      	add	r3, r1
 80039f6:	761a      	strb	r2, [r3, #24]
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	e000e100 	.word	0xe000e100
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	; 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f1c3 0307 	rsb	r3, r3, #7
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	bf28      	it	cs
 8003a2a:	2304      	movcs	r3, #4
 8003a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d902      	bls.n	8003a3c <NVIC_EncodePriority+0x30>
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3b03      	subs	r3, #3
 8003a3a:	e000      	b.n	8003a3e <NVIC_EncodePriority+0x32>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	401a      	ands	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	43d9      	mvns	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	4313      	orrs	r3, r2
         );
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3724      	adds	r7, #36	; 0x24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff ff4c 	bl	8003918 <__NVIC_SetPriorityGrouping>
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a9a:	f7ff ff61 	bl	8003960 <__NVIC_GetPriorityGrouping>
 8003a9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	6978      	ldr	r0, [r7, #20]
 8003aa6:	f7ff ffb1 	bl	8003a0c <NVIC_EncodePriority>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff ff80 	bl	80039b8 <__NVIC_SetPriority>
}
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ff54 	bl	800397c <__NVIC_EnableIRQ>
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7ff f9e2 	bl	8002eb0 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e099      	b.n	8003c2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b18:	e00f      	b.n	8003b3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b1a:	f7ff f9c9 	bl	8002eb0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d908      	bls.n	8003b3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2203      	movs	r2, #3
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e078      	b.n	8003c2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e8      	bne.n	8003b1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <HAL_DMA_Init+0x158>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d107      	bne.n	8003ba4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0307 	bic.w	r3, r3, #7
 8003bba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d117      	bne.n	8003bfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fa6f 	bl	80040c4 <DMA_CheckFifoParam>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2240      	movs	r2, #64	; 0x40
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e016      	b.n	8003c2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fa26 	bl	8004058 <DMA_CalcBaseAndBitshift>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	223f      	movs	r2, #63	; 0x3f
 8003c16:	409a      	lsls	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	f010803f 	.word	0xf010803f

08003c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_DMA_Start_IT+0x26>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e040      	b.n	8003ce0 <HAL_DMA_Start_IT+0xa8>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d12f      	bne.n	8003cd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f9b8 	bl	8003ffc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	223f      	movs	r2, #63	; 0x3f
 8003c92:	409a      	lsls	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0216 	orr.w	r2, r2, #22
 8003ca6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0208 	orr.w	r2, r2, #8
 8003cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e005      	b.n	8003cde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cf4:	4b8e      	ldr	r3, [pc, #568]	; (8003f30 <HAL_DMA_IRQHandler+0x248>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a8e      	ldr	r2, [pc, #568]	; (8003f34 <HAL_DMA_IRQHandler+0x24c>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	0a9b      	lsrs	r3, r3, #10
 8003d00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	2208      	movs	r2, #8
 8003d14:	409a      	lsls	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01a      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d013      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0204 	bic.w	r2, r2, #4
 8003d3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	2208      	movs	r2, #8
 8003d42:	409a      	lsls	r2, r3
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4c:	f043 0201 	orr.w	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	2201      	movs	r2, #1
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d012      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2201      	movs	r2, #1
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	f043 0202 	orr.w	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8e:	2204      	movs	r2, #4
 8003d90:	409a      	lsls	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d012      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00b      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	2204      	movs	r2, #4
 8003dae:	409a      	lsls	r2, r3
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db8:	f043 0204 	orr.w	r2, r3, #4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	2210      	movs	r2, #16
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d043      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d03c      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de2:	2210      	movs	r2, #16
 8003de4:	409a      	lsls	r2, r3
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d018      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d108      	bne.n	8003e18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d024      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
 8003e16:	e01f      	b.n	8003e58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01b      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
 8003e28:	e016      	b.n	8003e58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0208 	bic.w	r2, r2, #8
 8003e46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 808f 	beq.w	8003f88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8087 	beq.w	8003f88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	2220      	movs	r2, #32
 8003e80:	409a      	lsls	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b05      	cmp	r3, #5
 8003e90:	d136      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0216 	bic.w	r2, r2, #22
 8003ea0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_DMA_IRQHandler+0x1da>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0208 	bic.w	r2, r2, #8
 8003ed0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	223f      	movs	r2, #63	; 0x3f
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d07e      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4798      	blx	r3
        }
        return;
 8003efe:	e079      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01d      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10d      	bne.n	8003f38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d031      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
 8003f2c:	e02c      	b.n	8003f88 <HAL_DMA_IRQHandler+0x2a0>
 8003f2e:	bf00      	nop
 8003f30:	20000000 	.word	0x20000000
 8003f34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d023      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4798      	blx	r3
 8003f48:	e01e      	b.n	8003f88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10f      	bne.n	8003f78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0210 	bic.w	r2, r2, #16
 8003f66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d032      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d022      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2205      	movs	r2, #5
 8003fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d307      	bcc.n	8003fd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f2      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x2cc>
 8003fce:	e000      	b.n	8003fd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
 8003ff2:	e000      	b.n	8003ff6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ff4:	bf00      	nop
    }
  }
}
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004018:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d108      	bne.n	800403c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800403a:	e007      	b.n	800404c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	60da      	str	r2, [r3, #12]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	3b10      	subs	r3, #16
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <DMA_CalcBaseAndBitshift+0x64>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004072:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d909      	bls.n	800409a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800408e:	f023 0303 	bic.w	r3, r3, #3
 8004092:	1d1a      	adds	r2, r3, #4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	659a      	str	r2, [r3, #88]	; 0x58
 8004098:	e007      	b.n	80040aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040a2:	f023 0303 	bic.w	r3, r3, #3
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	aaaaaaab 	.word	0xaaaaaaab
 80040c0:	0800d104 	.word	0x0800d104

080040c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11f      	bne.n	800411e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d856      	bhi.n	8004192 <DMA_CheckFifoParam+0xce>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <DMA_CheckFifoParam+0x28>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	0800410f 	.word	0x0800410f
 80040f4:	080040fd 	.word	0x080040fd
 80040f8:	08004193 	.word	0x08004193
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d046      	beq.n	8004196 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410c:	e043      	b.n	8004196 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004116:	d140      	bne.n	800419a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411c:	e03d      	b.n	800419a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004126:	d121      	bne.n	800416c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d837      	bhi.n	800419e <DMA_CheckFifoParam+0xda>
 800412e:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <DMA_CheckFifoParam+0x70>)
 8004130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004134:	08004145 	.word	0x08004145
 8004138:	0800414b 	.word	0x0800414b
 800413c:	08004145 	.word	0x08004145
 8004140:	0800415d 	.word	0x0800415d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      break;
 8004148:	e030      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d025      	beq.n	80041a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415a:	e022      	b.n	80041a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004164:	d11f      	bne.n	80041a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800416a:	e01c      	b.n	80041a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d903      	bls.n	800417a <DMA_CheckFifoParam+0xb6>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d003      	beq.n	8004180 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004178:	e018      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
      break;
 800417e:	e015      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      break;
 8004190:	e00b      	b.n	80041aa <DMA_CheckFifoParam+0xe6>
      break;
 8004192:	bf00      	nop
 8004194:	e00a      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
      break;
 8004196:	bf00      	nop
 8004198:	e008      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
      break;
 800419a:	bf00      	nop
 800419c:	e006      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
      break;
 800419e:	bf00      	nop
 80041a0:	e004      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
      break;
 80041a2:	bf00      	nop
 80041a4:	e002      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
      break;   
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <DMA_CheckFifoParam+0xe8>
      break;
 80041aa:	bf00      	nop
    }
  } 
  
  return status; 
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop

080041bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	e16b      	b.n	80044b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041d8:	2201      	movs	r2, #1
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4013      	ands	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	f040 815a 	bne.w	80044aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d005      	beq.n	800420e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800420a:	2b02      	cmp	r3, #2
 800420c:	d130      	bne.n	8004270 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	2203      	movs	r2, #3
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004244:	2201      	movs	r2, #1
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4013      	ands	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 0201 	and.w	r2, r3, #1
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b03      	cmp	r3, #3
 800427a:	d017      	beq.n	80042ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	2203      	movs	r2, #3
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43db      	mvns	r3, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4013      	ands	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d123      	bne.n	8004300 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	08da      	lsrs	r2, r3, #3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3208      	adds	r2, #8
 80042c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	220f      	movs	r2, #15
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	08da      	lsrs	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3208      	adds	r2, #8
 80042fa:	69b9      	ldr	r1, [r7, #24]
 80042fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	2203      	movs	r2, #3
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0203 	and.w	r2, r3, #3
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80b4 	beq.w	80044aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	4b60      	ldr	r3, [pc, #384]	; (80044c8 <HAL_GPIO_Init+0x30c>)
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	4a5f      	ldr	r2, [pc, #380]	; (80044c8 <HAL_GPIO_Init+0x30c>)
 800434c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004350:	6453      	str	r3, [r2, #68]	; 0x44
 8004352:	4b5d      	ldr	r3, [pc, #372]	; (80044c8 <HAL_GPIO_Init+0x30c>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800435e:	4a5b      	ldr	r2, [pc, #364]	; (80044cc <HAL_GPIO_Init+0x310>)
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	089b      	lsrs	r3, r3, #2
 8004364:	3302      	adds	r3, #2
 8004366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	220f      	movs	r2, #15
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a52      	ldr	r2, [pc, #328]	; (80044d0 <HAL_GPIO_Init+0x314>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d02b      	beq.n	80043e2 <HAL_GPIO_Init+0x226>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a51      	ldr	r2, [pc, #324]	; (80044d4 <HAL_GPIO_Init+0x318>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d025      	beq.n	80043de <HAL_GPIO_Init+0x222>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a50      	ldr	r2, [pc, #320]	; (80044d8 <HAL_GPIO_Init+0x31c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <HAL_GPIO_Init+0x21e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a4f      	ldr	r2, [pc, #316]	; (80044dc <HAL_GPIO_Init+0x320>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d019      	beq.n	80043d6 <HAL_GPIO_Init+0x21a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4e      	ldr	r2, [pc, #312]	; (80044e0 <HAL_GPIO_Init+0x324>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_GPIO_Init+0x216>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a4d      	ldr	r2, [pc, #308]	; (80044e4 <HAL_GPIO_Init+0x328>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00d      	beq.n	80043ce <HAL_GPIO_Init+0x212>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a4c      	ldr	r2, [pc, #304]	; (80044e8 <HAL_GPIO_Init+0x32c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d007      	beq.n	80043ca <HAL_GPIO_Init+0x20e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4b      	ldr	r2, [pc, #300]	; (80044ec <HAL_GPIO_Init+0x330>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d101      	bne.n	80043c6 <HAL_GPIO_Init+0x20a>
 80043c2:	2307      	movs	r3, #7
 80043c4:	e00e      	b.n	80043e4 <HAL_GPIO_Init+0x228>
 80043c6:	2308      	movs	r3, #8
 80043c8:	e00c      	b.n	80043e4 <HAL_GPIO_Init+0x228>
 80043ca:	2306      	movs	r3, #6
 80043cc:	e00a      	b.n	80043e4 <HAL_GPIO_Init+0x228>
 80043ce:	2305      	movs	r3, #5
 80043d0:	e008      	b.n	80043e4 <HAL_GPIO_Init+0x228>
 80043d2:	2304      	movs	r3, #4
 80043d4:	e006      	b.n	80043e4 <HAL_GPIO_Init+0x228>
 80043d6:	2303      	movs	r3, #3
 80043d8:	e004      	b.n	80043e4 <HAL_GPIO_Init+0x228>
 80043da:	2302      	movs	r3, #2
 80043dc:	e002      	b.n	80043e4 <HAL_GPIO_Init+0x228>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <HAL_GPIO_Init+0x228>
 80043e2:	2300      	movs	r3, #0
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	f002 0203 	and.w	r2, r2, #3
 80043ea:	0092      	lsls	r2, r2, #2
 80043ec:	4093      	lsls	r3, r2
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f4:	4935      	ldr	r1, [pc, #212]	; (80044cc <HAL_GPIO_Init+0x310>)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	3302      	adds	r3, #2
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004402:	4b3b      	ldr	r3, [pc, #236]	; (80044f0 <HAL_GPIO_Init+0x334>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004426:	4a32      	ldr	r2, [pc, #200]	; (80044f0 <HAL_GPIO_Init+0x334>)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800442c:	4b30      	ldr	r3, [pc, #192]	; (80044f0 <HAL_GPIO_Init+0x334>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004450:	4a27      	ldr	r2, [pc, #156]	; (80044f0 <HAL_GPIO_Init+0x334>)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_GPIO_Init+0x334>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	43db      	mvns	r3, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4013      	ands	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800447a:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HAL_GPIO_Init+0x334>)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <HAL_GPIO_Init+0x334>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044a4:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <HAL_GPIO_Init+0x334>)
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3301      	adds	r3, #1
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b0f      	cmp	r3, #15
 80044b4:	f67f ae90 	bls.w	80041d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044b8:	bf00      	nop
 80044ba:	bf00      	nop
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40013800 	.word	0x40013800
 80044d0:	40020000 	.word	0x40020000
 80044d4:	40020400 	.word	0x40020400
 80044d8:	40020800 	.word	0x40020800
 80044dc:	40020c00 	.word	0x40020c00
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40021400 	.word	0x40021400
 80044e8:	40021800 	.word	0x40021800
 80044ec:	40021c00 	.word	0x40021c00
 80044f0:	40013c00 	.word	0x40013c00

080044f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
 8004500:	4613      	mov	r3, r2
 8004502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004504:	787b      	ldrb	r3, [r7, #1]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800450a:	887a      	ldrh	r2, [r7, #2]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004510:	e003      	b.n	800451a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004512:	887b      	ldrh	r3, [r7, #2]
 8004514:	041a      	lsls	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	619a      	str	r2, [r3, #24]
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e12b      	b.n	8004792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd fe5e 	bl	8002210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800458a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800458c:	f000 fd80 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 8004590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a81      	ldr	r2, [pc, #516]	; (800479c <HAL_I2C_Init+0x274>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d807      	bhi.n	80045ac <HAL_I2C_Init+0x84>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a80      	ldr	r2, [pc, #512]	; (80047a0 <HAL_I2C_Init+0x278>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bf94      	ite	ls
 80045a4:	2301      	movls	r3, #1
 80045a6:	2300      	movhi	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e006      	b.n	80045ba <HAL_I2C_Init+0x92>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a7d      	ldr	r2, [pc, #500]	; (80047a4 <HAL_I2C_Init+0x27c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bf94      	ite	ls
 80045b4:	2301      	movls	r3, #1
 80045b6:	2300      	movhi	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0e7      	b.n	8004792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a78      	ldr	r2, [pc, #480]	; (80047a8 <HAL_I2C_Init+0x280>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	0c9b      	lsrs	r3, r3, #18
 80045cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4a6a      	ldr	r2, [pc, #424]	; (800479c <HAL_I2C_Init+0x274>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d802      	bhi.n	80045fc <HAL_I2C_Init+0xd4>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3301      	adds	r3, #1
 80045fa:	e009      	b.n	8004610 <HAL_I2C_Init+0xe8>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	4a69      	ldr	r2, [pc, #420]	; (80047ac <HAL_I2C_Init+0x284>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	3301      	adds	r3, #1
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	495c      	ldr	r1, [pc, #368]	; (800479c <HAL_I2C_Init+0x274>)
 800462c:	428b      	cmp	r3, r1
 800462e:	d819      	bhi.n	8004664 <HAL_I2C_Init+0x13c>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1e59      	subs	r1, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	fbb1 f3f3 	udiv	r3, r1, r3
 800463e:	1c59      	adds	r1, r3, #1
 8004640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004644:	400b      	ands	r3, r1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_I2C_Init+0x138>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1e59      	subs	r1, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	fbb1 f3f3 	udiv	r3, r1, r3
 8004658:	3301      	adds	r3, #1
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465e:	e051      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 8004660:	2304      	movs	r3, #4
 8004662:	e04f      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d111      	bne.n	8004690 <HAL_I2C_Init+0x168>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e58      	subs	r0, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e012      	b.n	80046b6 <HAL_I2C_Init+0x18e>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1e58      	subs	r0, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	0099      	lsls	r1, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a6:	3301      	adds	r3, #1
 80046a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Init+0x196>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e022      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10e      	bne.n	80046e4 <HAL_I2C_Init+0x1bc>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e58      	subs	r0, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	440b      	add	r3, r1
 80046d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e2:	e00f      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1e58      	subs	r0, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	0099      	lsls	r1, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	6809      	ldr	r1, [r1, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6911      	ldr	r1, [r2, #16]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68d2      	ldr	r2, [r2, #12]
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	430b      	orrs	r3, r1
 8004746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	000186a0 	.word	0x000186a0
 80047a0:	001e847f 	.word	0x001e847f
 80047a4:	003d08ff 	.word	0x003d08ff
 80047a8:	431bde83 	.word	0x431bde83
 80047ac:	10624dd3 	.word	0x10624dd3

080047b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e267      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d075      	beq.n	80048ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ce:	4b88      	ldr	r3, [pc, #544]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d00c      	beq.n	80047f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047da:	4b85      	ldr	r3, [pc, #532]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d112      	bne.n	800480c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e6:	4b82      	ldr	r3, [pc, #520]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f2:	d10b      	bne.n	800480c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	4b7e      	ldr	r3, [pc, #504]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d05b      	beq.n	80048b8 <HAL_RCC_OscConfig+0x108>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d157      	bne.n	80048b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e242      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004814:	d106      	bne.n	8004824 <HAL_RCC_OscConfig+0x74>
 8004816:	4b76      	ldr	r3, [pc, #472]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a75      	ldr	r2, [pc, #468]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	e01d      	b.n	8004860 <HAL_RCC_OscConfig+0xb0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800482c:	d10c      	bne.n	8004848 <HAL_RCC_OscConfig+0x98>
 800482e:	4b70      	ldr	r3, [pc, #448]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a6f      	ldr	r2, [pc, #444]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b6d      	ldr	r3, [pc, #436]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a6c      	ldr	r2, [pc, #432]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e00b      	b.n	8004860 <HAL_RCC_OscConfig+0xb0>
 8004848:	4b69      	ldr	r3, [pc, #420]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a68      	ldr	r2, [pc, #416]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800484e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b66      	ldr	r3, [pc, #408]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a65      	ldr	r2, [pc, #404]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800485a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d013      	beq.n	8004890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fe fb22 	bl	8002eb0 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004870:	f7fe fb1e 	bl	8002eb0 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e207      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004882:	4b5b      	ldr	r3, [pc, #364]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0xc0>
 800488e:	e014      	b.n	80048ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fe fb0e 	bl	8002eb0 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004898:	f7fe fb0a 	bl	8002eb0 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e1f3      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048aa:	4b51      	ldr	r3, [pc, #324]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0xe8>
 80048b6:	e000      	b.n	80048ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d063      	beq.n	800498e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048c6:	4b4a      	ldr	r3, [pc, #296]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d2:	4b47      	ldr	r3, [pc, #284]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d11c      	bne.n	8004918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048de:	4b44      	ldr	r3, [pc, #272]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d116      	bne.n	8004918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ea:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_RCC_OscConfig+0x152>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d001      	beq.n	8004902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e1c7      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004902:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	4937      	ldr	r1, [pc, #220]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004916:	e03a      	b.n	800498e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b34      	ldr	r3, [pc, #208]	; (80049f4 <HAL_RCC_OscConfig+0x244>)
 8004922:	2201      	movs	r2, #1
 8004924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fe fac3 	bl	8002eb0 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492e:	f7fe fabf 	bl	8002eb0 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e1a8      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004940:	4b2b      	ldr	r3, [pc, #172]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494c:	4b28      	ldr	r3, [pc, #160]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	4925      	ldr	r1, [pc, #148]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]
 8004960:	e015      	b.n	800498e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004962:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <HAL_RCC_OscConfig+0x244>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe faa2 	bl	8002eb0 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004970:	f7fe fa9e 	bl	8002eb0 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e187      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d036      	beq.n	8004a08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <HAL_RCC_OscConfig+0x248>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a8:	f7fe fa82 	bl	8002eb0 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b0:	f7fe fa7e 	bl	8002eb0 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e167      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_OscConfig+0x240>)
 80049c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x200>
 80049ce:	e01b      	b.n	8004a08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCC_OscConfig+0x248>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d6:	f7fe fa6b 	bl	8002eb0 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	e00e      	b.n	80049fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049de:	f7fe fa67 	bl	8002eb0 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d907      	bls.n	80049fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e150      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
 80049f0:	40023800 	.word	0x40023800
 80049f4:	42470000 	.word	0x42470000
 80049f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fc:	4b88      	ldr	r3, [pc, #544]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 80049fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ea      	bne.n	80049de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8097 	beq.w	8004b44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1a:	4b81      	ldr	r3, [pc, #516]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	4b7d      	ldr	r3, [pc, #500]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	4a7c      	ldr	r2, [pc, #496]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	; 0x40
 8004a36:	4b7a      	ldr	r3, [pc, #488]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b77      	ldr	r3, [pc, #476]	; (8004c24 <HAL_RCC_OscConfig+0x474>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d118      	bne.n	8004a84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a52:	4b74      	ldr	r3, [pc, #464]	; (8004c24 <HAL_RCC_OscConfig+0x474>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a73      	ldr	r2, [pc, #460]	; (8004c24 <HAL_RCC_OscConfig+0x474>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fe fa27 	bl	8002eb0 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a66:	f7fe fa23 	bl	8002eb0 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e10c      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	4b6a      	ldr	r3, [pc, #424]	; (8004c24 <HAL_RCC_OscConfig+0x474>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_OscConfig+0x2ea>
 8004a8c:	4b64      	ldr	r3, [pc, #400]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a63      	ldr	r2, [pc, #396]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x324>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x30c>
 8004aa2:	4b5f      	ldr	r3, [pc, #380]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	4a5e      	ldr	r2, [pc, #376]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	6713      	str	r3, [r2, #112]	; 0x70
 8004aae:	4b5c      	ldr	r3, [pc, #368]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	4a5b      	ldr	r2, [pc, #364]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	f043 0301 	orr.w	r3, r3, #1
 8004ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x324>
 8004abc:	4b58      	ldr	r3, [pc, #352]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	4a57      	ldr	r2, [pc, #348]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	f023 0301 	bic.w	r3, r3, #1
 8004ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac8:	4b55      	ldr	r3, [pc, #340]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	4a54      	ldr	r2, [pc, #336]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004ace:	f023 0304 	bic.w	r3, r3, #4
 8004ad2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d015      	beq.n	8004b08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fe f9e8 	bl	8002eb0 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae4:	f7fe f9e4 	bl	8002eb0 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e0cb      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	4b49      	ldr	r3, [pc, #292]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0ee      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x334>
 8004b06:	e014      	b.n	8004b32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b08:	f7fe f9d2 	bl	8002eb0 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b10:	f7fe f9ce 	bl	8002eb0 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e0b5      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ee      	bne.n	8004b10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d105      	bne.n	8004b44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b38:	4b39      	ldr	r3, [pc, #228]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	4a38      	ldr	r2, [pc, #224]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80a1 	beq.w	8004c90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b4e:	4b34      	ldr	r3, [pc, #208]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d05c      	beq.n	8004c14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d141      	bne.n	8004be6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b31      	ldr	r3, [pc, #196]	; (8004c28 <HAL_RCC_OscConfig+0x478>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fe f9a2 	bl	8002eb0 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fe f99e 	bl	8002eb0 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e087      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	019b      	lsls	r3, r3, #6
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	061b      	lsls	r3, r3, #24
 8004bb2:	491b      	ldr	r1, [pc, #108]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb8:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x478>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbe:	f7fe f977 	bl	8002eb0 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc6:	f7fe f973 	bl	8002eb0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e05c      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x416>
 8004be4:	e054      	b.n	8004c90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <HAL_RCC_OscConfig+0x478>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fe f960 	bl	8002eb0 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf4:	f7fe f95c 	bl	8002eb0 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e045      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_RCC_OscConfig+0x470>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x444>
 8004c12:	e03d      	b.n	8004c90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e038      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
 8004c20:	40023800 	.word	0x40023800
 8004c24:	40007000 	.word	0x40007000
 8004c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <HAL_RCC_OscConfig+0x4ec>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d028      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d121      	bne.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d11a      	bne.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d111      	bne.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	3b01      	subs	r3, #1
 8004c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800

08004ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0cc      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b68      	ldr	r3, [pc, #416]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d90c      	bls.n	8004cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b65      	ldr	r3, [pc, #404]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b63      	ldr	r3, [pc, #396]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e0b8      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d020      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cf4:	4b59      	ldr	r3, [pc, #356]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	4a58      	ldr	r2, [pc, #352]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d0c:	4b53      	ldr	r3, [pc, #332]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4a52      	ldr	r2, [pc, #328]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d18:	4b50      	ldr	r3, [pc, #320]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	494d      	ldr	r1, [pc, #308]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d044      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3e:	4b47      	ldr	r3, [pc, #284]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d119      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e07f      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d003      	beq.n	8004d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5e:	4b3f      	ldr	r3, [pc, #252]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e06f      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6e:	4b3b      	ldr	r3, [pc, #236]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e067      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d7e:	4b37      	ldr	r3, [pc, #220]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f023 0203 	bic.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4934      	ldr	r1, [pc, #208]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d90:	f7fe f88e 	bl	8002eb0 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d98:	f7fe f88a 	bl	8002eb0 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e04f      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 020c 	and.w	r2, r3, #12
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d1eb      	bne.n	8004d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d20c      	bcs.n	8004de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b22      	ldr	r3, [pc, #136]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	4b20      	ldr	r3, [pc, #128]	; (8004e58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e032      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df4:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4916      	ldr	r1, [pc, #88]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e12:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	490e      	ldr	r1, [pc, #56]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e26:	f000 f821 	bl	8004e6c <HAL_RCC_GetSysClockFreq>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	490a      	ldr	r1, [pc, #40]	; (8004e60 <HAL_RCC_ClockConfig+0x1c0>)
 8004e38:	5ccb      	ldrb	r3, [r1, r3]
 8004e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e3e:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_ClockConfig+0x1c8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fd fb78 	bl	800253c <HAL_InitTick>

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40023c00 	.word	0x40023c00
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	0800d0ec 	.word	0x0800d0ec
 8004e64:	20000000 	.word	0x20000000
 8004e68:	20000004 	.word	0x20000004

08004e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e70:	b094      	sub	sp, #80	; 0x50
 8004e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	647b      	str	r3, [r7, #68]	; 0x44
 8004e78:	2300      	movs	r3, #0
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e84:	4b79      	ldr	r3, [pc, #484]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 030c 	and.w	r3, r3, #12
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d00d      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0x40>
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	f200 80e1 	bhi.w	8005058 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d003      	beq.n	8004ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e9e:	e0db      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea0:	4b73      	ldr	r3, [pc, #460]	; (8005070 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ea2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004ea4:	e0db      	b.n	800505e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ea6:	4b73      	ldr	r3, [pc, #460]	; (8005074 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ea8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eaa:	e0d8      	b.n	800505e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eac:	4b6f      	ldr	r3, [pc, #444]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d063      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec2:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	099b      	lsrs	r3, r3, #6
 8004ec8:	2200      	movs	r2, #0
 8004eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ecc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ede:	4622      	mov	r2, r4
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f04f 0100 	mov.w	r1, #0
 8004eea:	0159      	lsls	r1, r3, #5
 8004eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef0:	0150      	lsls	r0, r2, #5
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	1a51      	subs	r1, r2, r1
 8004efa:	6139      	str	r1, [r7, #16]
 8004efc:	4629      	mov	r1, r5
 8004efe:	eb63 0301 	sbc.w	r3, r3, r1
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f10:	4659      	mov	r1, fp
 8004f12:	018b      	lsls	r3, r1, #6
 8004f14:	4651      	mov	r1, sl
 8004f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	018a      	lsls	r2, r1, #6
 8004f1e:	4651      	mov	r1, sl
 8004f20:	ebb2 0801 	subs.w	r8, r2, r1
 8004f24:	4659      	mov	r1, fp
 8004f26:	eb63 0901 	sbc.w	r9, r3, r1
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f3e:	4690      	mov	r8, r2
 8004f40:	4699      	mov	r9, r3
 8004f42:	4623      	mov	r3, r4
 8004f44:	eb18 0303 	adds.w	r3, r8, r3
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	eb49 0303 	adc.w	r3, r9, r3
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f5e:	4629      	mov	r1, r5
 8004f60:	024b      	lsls	r3, r1, #9
 8004f62:	4621      	mov	r1, r4
 8004f64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f68:	4621      	mov	r1, r4
 8004f6a:	024a      	lsls	r2, r1, #9
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f72:	2200      	movs	r2, #0
 8004f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f7c:	f7fb fe84 	bl	8000c88 <__aeabi_uldivmod>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4613      	mov	r3, r2
 8004f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f88:	e058      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8a:	4b38      	ldr	r3, [pc, #224]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	2200      	movs	r2, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	4611      	mov	r1, r2
 8004f96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	f04f 0000 	mov.w	r0, #0
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	0159      	lsls	r1, r3, #5
 8004fb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fb6:	0150      	lsls	r0, r2, #5
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004fe0:	eb63 050b 	sbc.w	r5, r3, fp
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	00eb      	lsls	r3, r5, #3
 8004fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ff2:	00e2      	lsls	r2, r4, #3
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	4643      	mov	r3, r8
 8004ffa:	18e3      	adds	r3, r4, r3
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	464b      	mov	r3, r9
 8005000:	eb45 0303 	adc.w	r3, r5, r3
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005012:	4629      	mov	r1, r5
 8005014:	028b      	lsls	r3, r1, #10
 8005016:	4621      	mov	r1, r4
 8005018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800501c:	4621      	mov	r1, r4
 800501e:	028a      	lsls	r2, r1, #10
 8005020:	4610      	mov	r0, r2
 8005022:	4619      	mov	r1, r3
 8005024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005026:	2200      	movs	r2, #0
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	61fa      	str	r2, [r7, #28]
 800502c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005030:	f7fb fe2a 	bl	8000c88 <__aeabi_uldivmod>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4613      	mov	r3, r2
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_GetSysClockFreq+0x200>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	0c1b      	lsrs	r3, r3, #16
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	3301      	adds	r3, #1
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800504c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800504e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005056:	e002      	b.n	800505e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_GetSysClockFreq+0x204>)
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800505c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800505e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005060:	4618      	mov	r0, r3
 8005062:	3750      	adds	r7, #80	; 0x50
 8005064:	46bd      	mov	sp, r7
 8005066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800
 8005070:	00f42400 	.word	0x00f42400
 8005074:	007a1200 	.word	0x007a1200

08005078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <HAL_RCC_GetHCLKFreq+0x14>)
 800507e:	681b      	ldr	r3, [r3, #0]
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000000 	.word	0x20000000

08005090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005094:	f7ff fff0 	bl	8005078 <HAL_RCC_GetHCLKFreq>
 8005098:	4602      	mov	r2, r0
 800509a:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	0a9b      	lsrs	r3, r3, #10
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	4903      	ldr	r1, [pc, #12]	; (80050b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a6:	5ccb      	ldrb	r3, [r1, r3]
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40023800 	.word	0x40023800
 80050b4:	0800d0fc 	.word	0x0800d0fc

080050b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050bc:	f7ff ffdc 	bl	8005078 <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0b5b      	lsrs	r3, r3, #13
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4903      	ldr	r1, [pc, #12]	; (80050dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40023800 	.word	0x40023800
 80050dc:	0800d0fc 	.word	0x0800d0fc

080050e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	220f      	movs	r2, #15
 80050ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050f0:	4b12      	ldr	r3, [pc, #72]	; (800513c <HAL_RCC_GetClockConfig+0x5c>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0203 	and.w	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050fc:	4b0f      	ldr	r3, [pc, #60]	; (800513c <HAL_RCC_GetClockConfig+0x5c>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <HAL_RCC_GetClockConfig+0x5c>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_RCC_GetClockConfig+0x5c>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	08db      	lsrs	r3, r3, #3
 800511a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005122:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_RCC_GetClockConfig+0x60>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0207 	and.w	r2, r3, #7
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	601a      	str	r2, [r3, #0]
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800
 8005140:	40023c00 	.word	0x40023c00

08005144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e07b      	b.n	800524e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d108      	bne.n	8005170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005166:	d009      	beq.n	800517c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	61da      	str	r2, [r3, #28]
 800516e:	e005      	b.n	800517c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fd f95c 	bl	8002454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005200:	ea42 0103 	orr.w	r1, r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	0c1b      	lsrs	r3, r3, #16
 800521a:	f003 0104 	and.w	r1, r3, #4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f003 0210 	and.w	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800523c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e041      	b.n	80052ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fd fbf3 	bl	8002a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3304      	adds	r3, #4
 8005292:	4619      	mov	r1, r3
 8005294:	4610      	mov	r0, r2
 8005296:	f000 fc0f 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d001      	beq.n	800530c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e046      	b.n	800539a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a23      	ldr	r2, [pc, #140]	; (80053a8 <HAL_TIM_Base_Start+0xb4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d022      	beq.n	8005364 <HAL_TIM_Base_Start+0x70>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005326:	d01d      	beq.n	8005364 <HAL_TIM_Base_Start+0x70>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1f      	ldr	r2, [pc, #124]	; (80053ac <HAL_TIM_Base_Start+0xb8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d018      	beq.n	8005364 <HAL_TIM_Base_Start+0x70>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <HAL_TIM_Base_Start+0xbc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d013      	beq.n	8005364 <HAL_TIM_Base_Start+0x70>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <HAL_TIM_Base_Start+0xc0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00e      	beq.n	8005364 <HAL_TIM_Base_Start+0x70>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <HAL_TIM_Base_Start+0xc4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d009      	beq.n	8005364 <HAL_TIM_Base_Start+0x70>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_TIM_Base_Start+0xc8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIM_Base_Start+0x70>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a18      	ldr	r2, [pc, #96]	; (80053c0 <HAL_TIM_Base_Start+0xcc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d111      	bne.n	8005388 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b06      	cmp	r3, #6
 8005374:	d010      	beq.n	8005398 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005386:	e007      	b.n	8005398 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40000c00 	.word	0x40000c00
 80053b8:	40010400 	.word	0x40010400
 80053bc:	40014000 	.word	0x40014000
 80053c0:	40001800 	.word	0x40001800

080053c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d001      	beq.n	80053dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e04e      	b.n	800547a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a23      	ldr	r2, [pc, #140]	; (8005488 <HAL_TIM_Base_Start_IT+0xc4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d022      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x80>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005406:	d01d      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x80>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a1f      	ldr	r2, [pc, #124]	; (800548c <HAL_TIM_Base_Start_IT+0xc8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d018      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x80>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <HAL_TIM_Base_Start_IT+0xcc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x80>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <HAL_TIM_Base_Start_IT+0xd0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00e      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x80>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1b      	ldr	r2, [pc, #108]	; (8005498 <HAL_TIM_Base_Start_IT+0xd4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d009      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x80>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a19      	ldr	r2, [pc, #100]	; (800549c <HAL_TIM_Base_Start_IT+0xd8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <HAL_TIM_Base_Start_IT+0x80>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d111      	bne.n	8005468 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b06      	cmp	r3, #6
 8005454:	d010      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0201 	orr.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	e007      	b.n	8005478 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0201 	orr.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40010000 	.word	0x40010000
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40010400 	.word	0x40010400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40001800 	.word	0x40001800

080054a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e041      	b.n	800553a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fd faf4 	bl	8002ab8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f000 fae8 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b02      	cmp	r3, #2
 8005556:	d122      	bne.n	800559e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b02      	cmp	r3, #2
 8005564:	d11b      	bne.n	800559e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0202 	mvn.w	r2, #2
 800556e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fa78 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 800558a:	e005      	b.n	8005598 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fa6a 	bl	8005a66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa7b 	bl	8005a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d122      	bne.n	80055f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d11b      	bne.n	80055f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f06f 0204 	mvn.w	r2, #4
 80055c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fa4e 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 80055de:	e005      	b.n	80055ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fa40 	bl	8005a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa51 	bl	8005a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d122      	bne.n	8005646 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b08      	cmp	r3, #8
 800560c:	d11b      	bne.n	8005646 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f06f 0208 	mvn.w	r2, #8
 8005616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2204      	movs	r2, #4
 800561c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fa24 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 8005632:	e005      	b.n	8005640 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fa16 	bl	8005a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fa27 	bl	8005a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b10      	cmp	r3, #16
 8005652:	d122      	bne.n	800569a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b10      	cmp	r3, #16
 8005660:	d11b      	bne.n	800569a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f06f 0210 	mvn.w	r2, #16
 800566a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2208      	movs	r2, #8
 8005670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f9fa 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 8005686:	e005      	b.n	8005694 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9ec 	bl	8005a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9fd 	bl	8005a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10e      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d107      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f06f 0201 	mvn.w	r2, #1
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fc fe79 	bl	80023b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d10e      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d107      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fd53 	bl	8006198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d10e      	bne.n	800571e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d107      	bne.n	800571e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f9c2 	bl	8005aa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b20      	cmp	r3, #32
 800572a:	d10e      	bne.n	800574a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b20      	cmp	r3, #32
 8005738:	d107      	bne.n	800574a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f06f 0220 	mvn.w	r2, #32
 8005742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fd1d 	bl	8006184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800576e:	2302      	movs	r3, #2
 8005770:	e0ae      	b.n	80058d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	f200 809f 	bhi.w	80058c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	080057bd 	.word	0x080057bd
 800578c:	080058c1 	.word	0x080058c1
 8005790:	080058c1 	.word	0x080058c1
 8005794:	080058c1 	.word	0x080058c1
 8005798:	080057fd 	.word	0x080057fd
 800579c:	080058c1 	.word	0x080058c1
 80057a0:	080058c1 	.word	0x080058c1
 80057a4:	080058c1 	.word	0x080058c1
 80057a8:	0800583f 	.word	0x0800583f
 80057ac:	080058c1 	.word	0x080058c1
 80057b0:	080058c1 	.word	0x080058c1
 80057b4:	080058c1 	.word	0x080058c1
 80057b8:	0800587f 	.word	0x0800587f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fa18 	bl	8005bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0208 	orr.w	r2, r2, #8
 80057d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0204 	bic.w	r2, r2, #4
 80057e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6999      	ldr	r1, [r3, #24]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	619a      	str	r2, [r3, #24]
      break;
 80057fa:	e064      	b.n	80058c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fa68 	bl	8005cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6999      	ldr	r1, [r3, #24]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	021a      	lsls	r2, r3, #8
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	619a      	str	r2, [r3, #24]
      break;
 800583c:	e043      	b.n	80058c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fabd 	bl	8005dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0208 	orr.w	r2, r2, #8
 8005858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0204 	bic.w	r2, r2, #4
 8005868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69d9      	ldr	r1, [r3, #28]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	61da      	str	r2, [r3, #28]
      break;
 800587c:	e023      	b.n	80058c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fb11 	bl	8005eac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69d9      	ldr	r1, [r3, #28]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	021a      	lsls	r2, r3, #8
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	61da      	str	r2, [r3, #28]
      break;
 80058be:	e002      	b.n	80058c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	75fb      	strb	r3, [r7, #23]
      break;
 80058c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIM_ConfigClockSource+0x1c>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e0b4      	b.n	8005a5e <HAL_TIM_ConfigClockSource+0x186>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800591a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592c:	d03e      	beq.n	80059ac <HAL_TIM_ConfigClockSource+0xd4>
 800592e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005932:	f200 8087 	bhi.w	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
 8005936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593a:	f000 8086 	beq.w	8005a4a <HAL_TIM_ConfigClockSource+0x172>
 800593e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005942:	d87f      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
 8005944:	2b70      	cmp	r3, #112	; 0x70
 8005946:	d01a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0xa6>
 8005948:	2b70      	cmp	r3, #112	; 0x70
 800594a:	d87b      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
 800594c:	2b60      	cmp	r3, #96	; 0x60
 800594e:	d050      	beq.n	80059f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005950:	2b60      	cmp	r3, #96	; 0x60
 8005952:	d877      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
 8005954:	2b50      	cmp	r3, #80	; 0x50
 8005956:	d03c      	beq.n	80059d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005958:	2b50      	cmp	r3, #80	; 0x50
 800595a:	d873      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d058      	beq.n	8005a12 <HAL_TIM_ConfigClockSource+0x13a>
 8005960:	2b40      	cmp	r3, #64	; 0x40
 8005962:	d86f      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
 8005964:	2b30      	cmp	r3, #48	; 0x30
 8005966:	d064      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x15a>
 8005968:	2b30      	cmp	r3, #48	; 0x30
 800596a:	d86b      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
 800596c:	2b20      	cmp	r3, #32
 800596e:	d060      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x15a>
 8005970:	2b20      	cmp	r3, #32
 8005972:	d867      	bhi.n	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d05c      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x15a>
 8005978:	2b10      	cmp	r3, #16
 800597a:	d05a      	beq.n	8005a32 <HAL_TIM_ConfigClockSource+0x15a>
 800597c:	e062      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6899      	ldr	r1, [r3, #8]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f000 fb5d 	bl	800604c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	609a      	str	r2, [r3, #8]
      break;
 80059aa:	e04f      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	6899      	ldr	r1, [r3, #8]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f000 fb46 	bl	800604c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ce:	609a      	str	r2, [r3, #8]
      break;
 80059d0:	e03c      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6859      	ldr	r1, [r3, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	461a      	mov	r2, r3
 80059e0:	f000 faba 	bl	8005f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2150      	movs	r1, #80	; 0x50
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fb13 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 80059f0:	e02c      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f000 fad9 	bl	8005fb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2160      	movs	r1, #96	; 0x60
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fb03 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 8005a10:	e01c      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6859      	ldr	r1, [r3, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f000 fa9a 	bl	8005f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2140      	movs	r1, #64	; 0x40
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 faf3 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 8005a30:	e00c      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f000 faea 	bl	8006016 <TIM_ITRx_SetConfig>
      break;
 8005a42:	e003      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	73fb      	strb	r3, [r7, #15]
      break;
 8005a48:	e000      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a40      	ldr	r2, [pc, #256]	; (8005bcc <TIM_Base_SetConfig+0x114>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad6:	d00f      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <TIM_Base_SetConfig+0x118>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00b      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3c      	ldr	r2, [pc, #240]	; (8005bd4 <TIM_Base_SetConfig+0x11c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3b      	ldr	r2, [pc, #236]	; (8005bd8 <TIM_Base_SetConfig+0x120>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a3a      	ldr	r2, [pc, #232]	; (8005bdc <TIM_Base_SetConfig+0x124>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d108      	bne.n	8005b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <TIM_Base_SetConfig+0x114>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d02b      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b18:	d027      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2c      	ldr	r2, [pc, #176]	; (8005bd0 <TIM_Base_SetConfig+0x118>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d023      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2b      	ldr	r2, [pc, #172]	; (8005bd4 <TIM_Base_SetConfig+0x11c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01f      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <TIM_Base_SetConfig+0x120>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01b      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <TIM_Base_SetConfig+0x124>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d017      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a28      	ldr	r2, [pc, #160]	; (8005be0 <TIM_Base_SetConfig+0x128>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a27      	ldr	r2, [pc, #156]	; (8005be4 <TIM_Base_SetConfig+0x12c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a26      	ldr	r2, [pc, #152]	; (8005be8 <TIM_Base_SetConfig+0x130>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a25      	ldr	r2, [pc, #148]	; (8005bec <TIM_Base_SetConfig+0x134>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a24      	ldr	r2, [pc, #144]	; (8005bf0 <TIM_Base_SetConfig+0x138>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a23      	ldr	r2, [pc, #140]	; (8005bf4 <TIM_Base_SetConfig+0x13c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d108      	bne.n	8005b7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <TIM_Base_SetConfig+0x114>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <TIM_Base_SetConfig+0x124>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d103      	bne.n	8005bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	615a      	str	r2, [r3, #20]
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40010400 	.word	0x40010400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40014400 	.word	0x40014400
 8005be8:	40014800 	.word	0x40014800
 8005bec:	40001800 	.word	0x40001800
 8005bf0:	40001c00 	.word	0x40001c00
 8005bf4:	40002000 	.word	0x40002000

08005bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f023 0201 	bic.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f023 0302 	bic.w	r3, r3, #2
 8005c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <TIM_OC1_SetConfig+0xd8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_OC1_SetConfig+0x64>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1f      	ldr	r2, [pc, #124]	; (8005cd4 <TIM_OC1_SetConfig+0xdc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d10c      	bne.n	8005c76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0308 	bic.w	r3, r3, #8
 8005c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 0304 	bic.w	r3, r3, #4
 8005c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a15      	ldr	r2, [pc, #84]	; (8005cd0 <TIM_OC1_SetConfig+0xd8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_OC1_SetConfig+0x8e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <TIM_OC1_SetConfig+0xdc>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d111      	bne.n	8005caa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	621a      	str	r2, [r3, #32]
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f023 0210 	bic.w	r2, r3, #16
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f023 0320 	bic.w	r3, r3, #32
 8005d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a22      	ldr	r2, [pc, #136]	; (8005dbc <TIM_OC2_SetConfig+0xe4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_OC2_SetConfig+0x68>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <TIM_OC2_SetConfig+0xe8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10d      	bne.n	8005d5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a17      	ldr	r2, [pc, #92]	; (8005dbc <TIM_OC2_SetConfig+0xe4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_OC2_SetConfig+0x94>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <TIM_OC2_SetConfig+0xe8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d113      	bne.n	8005d94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40010400 	.word	0x40010400

08005dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a21      	ldr	r2, [pc, #132]	; (8005ea4 <TIM_OC3_SetConfig+0xe0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_OC3_SetConfig+0x66>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a20      	ldr	r2, [pc, #128]	; (8005ea8 <TIM_OC3_SetConfig+0xe4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10d      	bne.n	8005e46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a16      	ldr	r2, [pc, #88]	; (8005ea4 <TIM_OC3_SetConfig+0xe0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d003      	beq.n	8005e56 <TIM_OC3_SetConfig+0x92>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a15      	ldr	r2, [pc, #84]	; (8005ea8 <TIM_OC3_SetConfig+0xe4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d113      	bne.n	8005e7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	621a      	str	r2, [r3, #32]
}
 8005e98:	bf00      	nop
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40010000 	.word	0x40010000
 8005ea8:	40010400 	.word	0x40010400

08005eac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	031b      	lsls	r3, r3, #12
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a12      	ldr	r2, [pc, #72]	; (8005f50 <TIM_OC4_SetConfig+0xa4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC4_SetConfig+0x68>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a11      	ldr	r2, [pc, #68]	; (8005f54 <TIM_OC4_SetConfig+0xa8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d109      	bne.n	8005f28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	019b      	lsls	r3, r3, #6
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40010400 	.word	0x40010400

08005f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f023 0201 	bic.w	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 030a 	bic.w	r3, r3, #10
 8005f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b087      	sub	sp, #28
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f023 0210 	bic.w	r2, r3, #16
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	031b      	lsls	r3, r3, #12
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	f043 0307 	orr.w	r3, r3, #7
 8006038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	609a      	str	r2, [r3, #8]
}
 8006040:	bf00      	nop
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	021a      	lsls	r2, r3, #8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	431a      	orrs	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4313      	orrs	r3, r2
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	609a      	str	r2, [r3, #8]
}
 8006080:	bf00      	nop
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e05a      	b.n	800615a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a21      	ldr	r2, [pc, #132]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f0:	d01d      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1a      	ldr	r2, [pc, #104]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a18      	ldr	r2, [pc, #96]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a17      	ldr	r2, [pc, #92]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a15      	ldr	r2, [pc, #84]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d10c      	bne.n	8006148 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4313      	orrs	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40010400 	.word	0x40010400
 800617c:	40014000 	.word	0x40014000
 8006180:	40001800 	.word	0x40001800

08006184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e03f      	b.n	800623e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7fc fd5a 	bl	8002c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2224      	movs	r2, #36	; 0x24
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f929 	bl	8006448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695a      	ldr	r2, [r3, #20]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b08a      	sub	sp, #40	; 0x28
 800624a:	af02      	add	r7, sp, #8
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	4613      	mov	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b20      	cmp	r3, #32
 8006264:	d17c      	bne.n	8006360 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <HAL_UART_Transmit+0x2c>
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e075      	b.n	8006362 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_UART_Transmit+0x3e>
 8006280:	2302      	movs	r3, #2
 8006282:	e06e      	b.n	8006362 <HAL_UART_Transmit+0x11c>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2221      	movs	r2, #33	; 0x21
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800629a:	f7fc fe09 	bl	8002eb0 <HAL_GetTick>
 800629e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	88fa      	ldrh	r2, [r7, #6]
 80062aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b4:	d108      	bne.n	80062c8 <HAL_UART_Transmit+0x82>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d104      	bne.n	80062c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	61bb      	str	r3, [r7, #24]
 80062c6:	e003      	b.n	80062d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062d8:	e02a      	b.n	8006330 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2180      	movs	r1, #128	; 0x80
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f840 	bl	800636a <UART_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e036      	b.n	8006362 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10b      	bne.n	8006312 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	3302      	adds	r3, #2
 800630e:	61bb      	str	r3, [r7, #24]
 8006310:	e007      	b.n	8006322 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	3301      	adds	r3, #1
 8006320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006326:	b29b      	uxth	r3, r3
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1cf      	bne.n	80062da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	2140      	movs	r1, #64	; 0x40
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f810 	bl	800636a <UART_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e006      	b.n	8006362 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	e000      	b.n	8006362 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006360:	2302      	movs	r3, #2
  }
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b090      	sub	sp, #64	; 0x40
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	4613      	mov	r3, r2
 8006378:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637a:	e050      	b.n	800641e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006382:	d04c      	beq.n	800641e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <UART_WaitOnFlagUntilTimeout+0x30>
 800638a:	f7fc fd91 	bl	8002eb0 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006396:	429a      	cmp	r2, r3
 8006398:	d241      	bcs.n	800641e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	330c      	adds	r3, #12
 80063b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063ba:	637a      	str	r2, [r7, #52]	; 0x34
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e5      	bne.n	800639a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3314      	adds	r3, #20
 80063d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	613b      	str	r3, [r7, #16]
   return(result);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3314      	adds	r3, #20
 80063ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ee:	623a      	str	r2, [r7, #32]
 80063f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	69f9      	ldr	r1, [r7, #28]
 80063f4:	6a3a      	ldr	r2, [r7, #32]
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e5      	bne.n	80063ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e00f      	b.n	800643e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	4013      	ands	r3, r2
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	bf0c      	ite	eq
 800642e:	2301      	moveq	r3, #1
 8006430:	2300      	movne	r3, #0
 8006432:	b2db      	uxtb	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	429a      	cmp	r2, r3
 800643a:	d09f      	beq.n	800637c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3740      	adds	r7, #64	; 0x40
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800644c:	b0c0      	sub	sp, #256	; 0x100
 800644e:	af00      	add	r7, sp, #0
 8006450:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	ea40 0301 	orr.w	r3, r0, r1
 8006470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	431a      	orrs	r2, r3
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	431a      	orrs	r2, r3
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064a0:	f021 010c 	bic.w	r1, r1, #12
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064ae:	430b      	orrs	r3, r1
 80064b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	6999      	ldr	r1, [r3, #24]
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	ea40 0301 	orr.w	r3, r0, r1
 80064ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b8f      	ldr	r3, [pc, #572]	; (8006714 <UART_SetConfig+0x2cc>)
 80064d8:	429a      	cmp	r2, r3
 80064da:	d005      	beq.n	80064e8 <UART_SetConfig+0xa0>
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b8d      	ldr	r3, [pc, #564]	; (8006718 <UART_SetConfig+0x2d0>)
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d104      	bne.n	80064f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7fe fde6 	bl	80050b8 <HAL_RCC_GetPCLK2Freq>
 80064ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064f0:	e003      	b.n	80064fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064f2:	f7fe fdcd 	bl	8005090 <HAL_RCC_GetPCLK1Freq>
 80064f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006504:	f040 810c 	bne.w	8006720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800650c:	2200      	movs	r2, #0
 800650e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006512:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800651a:	4622      	mov	r2, r4
 800651c:	462b      	mov	r3, r5
 800651e:	1891      	adds	r1, r2, r2
 8006520:	65b9      	str	r1, [r7, #88]	; 0x58
 8006522:	415b      	adcs	r3, r3
 8006524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800652a:	4621      	mov	r1, r4
 800652c:	eb12 0801 	adds.w	r8, r2, r1
 8006530:	4629      	mov	r1, r5
 8006532:	eb43 0901 	adc.w	r9, r3, r1
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800654a:	4690      	mov	r8, r2
 800654c:	4699      	mov	r9, r3
 800654e:	4623      	mov	r3, r4
 8006550:	eb18 0303 	adds.w	r3, r8, r3
 8006554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006558:	462b      	mov	r3, r5
 800655a:	eb49 0303 	adc.w	r3, r9, r3
 800655e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800656e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006576:	460b      	mov	r3, r1
 8006578:	18db      	adds	r3, r3, r3
 800657a:	653b      	str	r3, [r7, #80]	; 0x50
 800657c:	4613      	mov	r3, r2
 800657e:	eb42 0303 	adc.w	r3, r2, r3
 8006582:	657b      	str	r3, [r7, #84]	; 0x54
 8006584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800658c:	f7fa fb7c 	bl	8000c88 <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4b61      	ldr	r3, [pc, #388]	; (800671c <UART_SetConfig+0x2d4>)
 8006596:	fba3 2302 	umull	r2, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	011c      	lsls	r4, r3, #4
 800659e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	1891      	adds	r1, r2, r2
 80065b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80065b8:	415b      	adcs	r3, r3
 80065ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065c0:	4641      	mov	r1, r8
 80065c2:	eb12 0a01 	adds.w	sl, r2, r1
 80065c6:	4649      	mov	r1, r9
 80065c8:	eb43 0b01 	adc.w	fp, r3, r1
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065e0:	4692      	mov	sl, r2
 80065e2:	469b      	mov	fp, r3
 80065e4:	4643      	mov	r3, r8
 80065e6:	eb1a 0303 	adds.w	r3, sl, r3
 80065ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ee:	464b      	mov	r3, r9
 80065f0:	eb4b 0303 	adc.w	r3, fp, r3
 80065f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006604:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800660c:	460b      	mov	r3, r1
 800660e:	18db      	adds	r3, r3, r3
 8006610:	643b      	str	r3, [r7, #64]	; 0x40
 8006612:	4613      	mov	r3, r2
 8006614:	eb42 0303 	adc.w	r3, r2, r3
 8006618:	647b      	str	r3, [r7, #68]	; 0x44
 800661a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800661e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006622:	f7fa fb31 	bl	8000c88 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4611      	mov	r1, r2
 800662c:	4b3b      	ldr	r3, [pc, #236]	; (800671c <UART_SetConfig+0x2d4>)
 800662e:	fba3 2301 	umull	r2, r3, r3, r1
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	2264      	movs	r2, #100	; 0x64
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	1acb      	subs	r3, r1, r3
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006642:	4b36      	ldr	r3, [pc, #216]	; (800671c <UART_SetConfig+0x2d4>)
 8006644:	fba3 2302 	umull	r2, r3, r3, r2
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006650:	441c      	add	r4, r3
 8006652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006656:	2200      	movs	r2, #0
 8006658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800665c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	1891      	adds	r1, r2, r2
 800666a:	63b9      	str	r1, [r7, #56]	; 0x38
 800666c:	415b      	adcs	r3, r3
 800666e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006674:	4641      	mov	r1, r8
 8006676:	1851      	adds	r1, r2, r1
 8006678:	6339      	str	r1, [r7, #48]	; 0x30
 800667a:	4649      	mov	r1, r9
 800667c:	414b      	adcs	r3, r1
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
 8006680:	f04f 0200 	mov.w	r2, #0
 8006684:	f04f 0300 	mov.w	r3, #0
 8006688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800668c:	4659      	mov	r1, fp
 800668e:	00cb      	lsls	r3, r1, #3
 8006690:	4651      	mov	r1, sl
 8006692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006696:	4651      	mov	r1, sl
 8006698:	00ca      	lsls	r2, r1, #3
 800669a:	4610      	mov	r0, r2
 800669c:	4619      	mov	r1, r3
 800669e:	4603      	mov	r3, r0
 80066a0:	4642      	mov	r2, r8
 80066a2:	189b      	adds	r3, r3, r2
 80066a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066a8:	464b      	mov	r3, r9
 80066aa:	460a      	mov	r2, r1
 80066ac:	eb42 0303 	adc.w	r3, r2, r3
 80066b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066c8:	460b      	mov	r3, r1
 80066ca:	18db      	adds	r3, r3, r3
 80066cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ce:	4613      	mov	r3, r2
 80066d0:	eb42 0303 	adc.w	r3, r2, r3
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066de:	f7fa fad3 	bl	8000c88 <__aeabi_uldivmod>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <UART_SetConfig+0x2d4>)
 80066e8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	2164      	movs	r1, #100	; 0x64
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	3332      	adds	r3, #50	; 0x32
 80066fa:	4a08      	ldr	r2, [pc, #32]	; (800671c <UART_SetConfig+0x2d4>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f003 0207 	and.w	r2, r3, #7
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4422      	add	r2, r4
 800670e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006710:	e106      	b.n	8006920 <UART_SetConfig+0x4d8>
 8006712:	bf00      	nop
 8006714:	40011000 	.word	0x40011000
 8006718:	40011400 	.word	0x40011400
 800671c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006724:	2200      	movs	r2, #0
 8006726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800672a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800672e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006732:	4642      	mov	r2, r8
 8006734:	464b      	mov	r3, r9
 8006736:	1891      	adds	r1, r2, r2
 8006738:	6239      	str	r1, [r7, #32]
 800673a:	415b      	adcs	r3, r3
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
 800673e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006742:	4641      	mov	r1, r8
 8006744:	1854      	adds	r4, r2, r1
 8006746:	4649      	mov	r1, r9
 8006748:	eb43 0501 	adc.w	r5, r3, r1
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	00eb      	lsls	r3, r5, #3
 8006756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800675a:	00e2      	lsls	r2, r4, #3
 800675c:	4614      	mov	r4, r2
 800675e:	461d      	mov	r5, r3
 8006760:	4643      	mov	r3, r8
 8006762:	18e3      	adds	r3, r4, r3
 8006764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006768:	464b      	mov	r3, r9
 800676a:	eb45 0303 	adc.w	r3, r5, r3
 800676e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800677e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800678e:	4629      	mov	r1, r5
 8006790:	008b      	lsls	r3, r1, #2
 8006792:	4621      	mov	r1, r4
 8006794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006798:	4621      	mov	r1, r4
 800679a:	008a      	lsls	r2, r1, #2
 800679c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067a0:	f7fa fa72 	bl	8000c88 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4b60      	ldr	r3, [pc, #384]	; (800692c <UART_SetConfig+0x4e4>)
 80067aa:	fba3 2302 	umull	r2, r3, r3, r2
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	011c      	lsls	r4, r3, #4
 80067b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	1891      	adds	r1, r2, r2
 80067ca:	61b9      	str	r1, [r7, #24]
 80067cc:	415b      	adcs	r3, r3
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067d4:	4641      	mov	r1, r8
 80067d6:	1851      	adds	r1, r2, r1
 80067d8:	6139      	str	r1, [r7, #16]
 80067da:	4649      	mov	r1, r9
 80067dc:	414b      	adcs	r3, r1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067ec:	4659      	mov	r1, fp
 80067ee:	00cb      	lsls	r3, r1, #3
 80067f0:	4651      	mov	r1, sl
 80067f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f6:	4651      	mov	r1, sl
 80067f8:	00ca      	lsls	r2, r1, #3
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	4603      	mov	r3, r0
 8006800:	4642      	mov	r2, r8
 8006802:	189b      	adds	r3, r3, r2
 8006804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006808:	464b      	mov	r3, r9
 800680a:	460a      	mov	r2, r1
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	67bb      	str	r3, [r7, #120]	; 0x78
 800681e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800682c:	4649      	mov	r1, r9
 800682e:	008b      	lsls	r3, r1, #2
 8006830:	4641      	mov	r1, r8
 8006832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006836:	4641      	mov	r1, r8
 8006838:	008a      	lsls	r2, r1, #2
 800683a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800683e:	f7fa fa23 	bl	8000c88 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4611      	mov	r1, r2
 8006848:	4b38      	ldr	r3, [pc, #224]	; (800692c <UART_SetConfig+0x4e4>)
 800684a:	fba3 2301 	umull	r2, r3, r3, r1
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	2264      	movs	r2, #100	; 0x64
 8006852:	fb02 f303 	mul.w	r3, r2, r3
 8006856:	1acb      	subs	r3, r1, r3
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	3332      	adds	r3, #50	; 0x32
 800685c:	4a33      	ldr	r2, [pc, #204]	; (800692c <UART_SetConfig+0x4e4>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006868:	441c      	add	r4, r3
 800686a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800686e:	2200      	movs	r2, #0
 8006870:	673b      	str	r3, [r7, #112]	; 0x70
 8006872:	677a      	str	r2, [r7, #116]	; 0x74
 8006874:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	1891      	adds	r1, r2, r2
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	415b      	adcs	r3, r3
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006888:	4641      	mov	r1, r8
 800688a:	1851      	adds	r1, r2, r1
 800688c:	6039      	str	r1, [r7, #0]
 800688e:	4649      	mov	r1, r9
 8006890:	414b      	adcs	r3, r1
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068a0:	4659      	mov	r1, fp
 80068a2:	00cb      	lsls	r3, r1, #3
 80068a4:	4651      	mov	r1, sl
 80068a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068aa:	4651      	mov	r1, sl
 80068ac:	00ca      	lsls	r2, r1, #3
 80068ae:	4610      	mov	r0, r2
 80068b0:	4619      	mov	r1, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	4642      	mov	r2, r8
 80068b6:	189b      	adds	r3, r3, r2
 80068b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80068ba:	464b      	mov	r3, r9
 80068bc:	460a      	mov	r2, r1
 80068be:	eb42 0303 	adc.w	r3, r2, r3
 80068c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	663b      	str	r3, [r7, #96]	; 0x60
 80068ce:	667a      	str	r2, [r7, #100]	; 0x64
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068dc:	4649      	mov	r1, r9
 80068de:	008b      	lsls	r3, r1, #2
 80068e0:	4641      	mov	r1, r8
 80068e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e6:	4641      	mov	r1, r8
 80068e8:	008a      	lsls	r2, r1, #2
 80068ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068ee:	f7fa f9cb 	bl	8000c88 <__aeabi_uldivmod>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <UART_SetConfig+0x4e4>)
 80068f8:	fba3 1302 	umull	r1, r3, r3, r2
 80068fc:	095b      	lsrs	r3, r3, #5
 80068fe:	2164      	movs	r1, #100	; 0x64
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	3332      	adds	r3, #50	; 0x32
 800690a:	4a08      	ldr	r2, [pc, #32]	; (800692c <UART_SetConfig+0x4e4>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	f003 020f 	and.w	r2, r3, #15
 8006916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4422      	add	r2, r4
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006926:	46bd      	mov	sp, r7
 8006928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800692c:	51eb851f 	.word	0x51eb851f

08006930 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800693e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006942:	2b84      	cmp	r3, #132	; 0x84
 8006944:	d005      	beq.n	8006952 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006946:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	3303      	adds	r3, #3
 8006950:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006952:	68fb      	ldr	r3, [r7, #12]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006964:	f000 fb7c 	bl	8007060 <vTaskStartScheduler>
  
  return osOK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	bd80      	pop	{r7, pc}

0800696e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800696e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006970:	b089      	sub	sp, #36	; 0x24
 8006972:	af04      	add	r7, sp, #16
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d020      	beq.n	80069c2 <osThreadCreate+0x54>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01c      	beq.n	80069c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685c      	ldr	r4, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691e      	ldr	r6, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff ffc8 	bl	8006930 <makeFreeRtosPriority>
 80069a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069aa:	9202      	str	r2, [sp, #8]
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	9100      	str	r1, [sp, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	4632      	mov	r2, r6
 80069b4:	4629      	mov	r1, r5
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 f8f9 	bl	8006bae <xTaskCreateStatic>
 80069bc:	4603      	mov	r3, r0
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	e01c      	b.n	80069fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685c      	ldr	r4, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff ffaa 	bl	8006930 <makeFreeRtosPriority>
 80069dc:	4602      	mov	r2, r0
 80069de:	f107 030c 	add.w	r3, r7, #12
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	9200      	str	r2, [sp, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	4632      	mov	r2, r6
 80069ea:	4629      	mov	r1, r5
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 f93b 	bl	8006c68 <xTaskCreate>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d001      	beq.n	80069fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80069fc:	68fb      	ldr	r3, [r7, #12]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <osDelay+0x16>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	e000      	b.n	8006a1e <osDelay+0x18>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fa58 	bl	8006ed4 <vTaskDelay>
  
  return osOK;
 8006a24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa80 	bl	8006f3c <vTaskSuspend>
  
  return osOK;
 8006a3c:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f103 0208 	add.w	r2, r3, #8
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f103 0208 	add.w	r2, r3, #8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f103 0208 	add.w	r2, r3, #8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006afe:	d103      	bne.n	8006b08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	e00c      	b.n	8006b22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	e002      	b.n	8006b16 <vListInsert+0x2e>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d2f6      	bcs.n	8006b10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
}
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6892      	ldr	r2, [r2, #8]
 8006b70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6852      	ldr	r2, [r2, #4]
 8006b7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d103      	bne.n	8006b8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1e5a      	subs	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b08e      	sub	sp, #56	; 0x38
 8006bb2:	af04      	add	r7, sp, #16
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <xTaskCreateStatic+0x46>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	61fb      	str	r3, [r7, #28]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bf4:	2354      	movs	r3, #84	; 0x54
 8006bf6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b54      	cmp	r3, #84	; 0x54
 8006bfc:	d00a      	beq.n	8006c14 <xTaskCreateStatic+0x66>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	61bb      	str	r3, [r7, #24]
}
 8006c10:	bf00      	nop
 8006c12:	e7fe      	b.n	8006c12 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01e      	beq.n	8006c5a <xTaskCreateStatic+0xac>
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01b      	beq.n	8006c5a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c34:	2300      	movs	r3, #0
 8006c36:	9303      	str	r3, [sp, #12]
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	9302      	str	r3, [sp, #8]
 8006c3c:	f107 0314 	add.w	r3, r7, #20
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f850 	bl	8006cf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c54:	f000 f8d4 	bl	8006e00 <prvAddNewTaskToReadyList>
 8006c58:	e001      	b.n	8006c5e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c5e:	697b      	ldr	r3, [r7, #20]
	}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3728      	adds	r7, #40	; 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08c      	sub	sp, #48	; 0x30
 8006c6c:	af04      	add	r7, sp, #16
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	4613      	mov	r3, r2
 8006c76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c78:	88fb      	ldrh	r3, [r7, #6]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 ff5b 	bl	8007b38 <pvPortMalloc>
 8006c82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00e      	beq.n	8006ca8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c8a:	2054      	movs	r0, #84	; 0x54
 8006c8c:	f000 ff54 	bl	8007b38 <pvPortMalloc>
 8006c90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c9e:	e005      	b.n	8006cac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ca0:	6978      	ldr	r0, [r7, #20]
 8006ca2:	f001 f815 	bl	8007cd0 <vPortFree>
 8006ca6:	e001      	b.n	8006cac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d017      	beq.n	8006ce2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	9303      	str	r3, [sp, #12]
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	9302      	str	r3, [sp, #8]
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f80e 	bl	8006cf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cd6:	69f8      	ldr	r0, [r7, #28]
 8006cd8:	f000 f892 	bl	8006e00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	e002      	b.n	8006ce8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ce6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ce8:	69bb      	ldr	r3, [r7, #24]
	}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b088      	sub	sp, #32
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	f023 0307 	bic.w	r3, r3, #7
 8006d18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <prvInitialiseNewTask+0x48>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	617b      	str	r3, [r7, #20]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01f      	beq.n	8006d80 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	e012      	b.n	8006d6c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	7819      	ldrb	r1, [r3, #0]
 8006d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	3334      	adds	r3, #52	; 0x34
 8006d56:	460a      	mov	r2, r1
 8006d58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	2b0f      	cmp	r3, #15
 8006d70:	d9e9      	bls.n	8006d46 <prvInitialiseNewTask+0x54>
 8006d72:	e000      	b.n	8006d76 <prvInitialiseNewTask+0x84>
			{
				break;
 8006d74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d7e:	e003      	b.n	8006d88 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	2b06      	cmp	r3, #6
 8006d8c:	d901      	bls.n	8006d92 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d8e:	2306      	movs	r3, #6
 8006d90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	2200      	movs	r2, #0
 8006da2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	3304      	adds	r3, #4
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fe6c 	bl	8006a86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	3318      	adds	r3, #24
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fe67 	bl	8006a86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	f1c3 0207 	rsb	r2, r3, #7
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dcc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	69b8      	ldr	r0, [r7, #24]
 8006de2:	f000 fc97 	bl	8007714 <pxPortInitialiseStack>
 8006de6:	4602      	mov	r2, r0
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006df8:	bf00      	nop
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e08:	f000 fdb4 	bl	8007974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <prvAddNewTaskToReadyList+0xb8>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3301      	adds	r3, #1
 8006e12:	4a29      	ldr	r2, [pc, #164]	; (8006eb8 <prvAddNewTaskToReadyList+0xb8>)
 8006e14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e16:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <prvAddNewTaskToReadyList+0xbc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d109      	bne.n	8006e32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e1e:	4a27      	ldr	r2, [pc, #156]	; (8006ebc <prvAddNewTaskToReadyList+0xbc>)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e24:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <prvAddNewTaskToReadyList+0xb8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d110      	bne.n	8006e4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e2c:	f000 fb4e 	bl	80074cc <prvInitialiseTaskLists>
 8006e30:	e00d      	b.n	8006e4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e32:	4b23      	ldr	r3, [pc, #140]	; (8006ec0 <prvAddNewTaskToReadyList+0xc0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e3a:	4b20      	ldr	r3, [pc, #128]	; (8006ebc <prvAddNewTaskToReadyList+0xbc>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d802      	bhi.n	8006e4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e48:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <prvAddNewTaskToReadyList+0xbc>)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e4e:	4b1d      	ldr	r3, [pc, #116]	; (8006ec4 <prvAddNewTaskToReadyList+0xc4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3301      	adds	r3, #1
 8006e54:	4a1b      	ldr	r2, [pc, #108]	; (8006ec4 <prvAddNewTaskToReadyList+0xc4>)
 8006e56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	409a      	lsls	r2, r3
 8006e60:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <prvAddNewTaskToReadyList+0xc8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	4a18      	ldr	r2, [pc, #96]	; (8006ec8 <prvAddNewTaskToReadyList+0xc8>)
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <prvAddNewTaskToReadyList+0xcc>)
 8006e78:	441a      	add	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f7ff fe0d 	bl	8006aa0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e86:	f000 fda5 	bl	80079d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ec0 <prvAddNewTaskToReadyList+0xc0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e92:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <prvAddNewTaskToReadyList+0xbc>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d207      	bcs.n	8006eb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <prvAddNewTaskToReadyList+0xd0>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	200012c0 	.word	0x200012c0
 8006ebc:	200011c0 	.word	0x200011c0
 8006ec0:	200012cc 	.word	0x200012cc
 8006ec4:	200012dc 	.word	0x200012dc
 8006ec8:	200012c8 	.word	0x200012c8
 8006ecc:	200011c4 	.word	0x200011c4
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d017      	beq.n	8006f16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ee6:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <vTaskDelay+0x60>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <vTaskDelay+0x30>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	60bb      	str	r3, [r7, #8]
}
 8006f00:	bf00      	nop
 8006f02:	e7fe      	b.n	8006f02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f04:	f000 f90c 	bl	8007120 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f08:	2100      	movs	r1, #0
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fb9c 	bl	8007648 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f10:	f000 f914 	bl	800713c <xTaskResumeAll>
 8006f14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d107      	bne.n	8006f2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <vTaskDelay+0x64>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	200012e8 	.word	0x200012e8
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006f44:	f000 fd16 	bl	8007974 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d102      	bne.n	8006f54 <vTaskSuspend+0x18>
 8006f4e:	4b3c      	ldr	r3, [pc, #240]	; (8007040 <vTaskSuspend+0x104>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	e000      	b.n	8006f56 <vTaskSuspend+0x1a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff fdfc 	bl	8006b5a <uxListRemove>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d115      	bne.n	8006f94 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6c:	4935      	ldr	r1, [pc, #212]	; (8007044 <vTaskSuspend+0x108>)
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <vTaskSuspend+0x58>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	2201      	movs	r2, #1
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	43da      	mvns	r2, r3
 8006f8a:	4b2f      	ldr	r3, [pc, #188]	; (8007048 <vTaskSuspend+0x10c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	4a2d      	ldr	r2, [pc, #180]	; (8007048 <vTaskSuspend+0x10c>)
 8006f92:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3318      	adds	r3, #24
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff fdda 	bl	8006b5a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	4827      	ldr	r0, [pc, #156]	; (800704c <vTaskSuspend+0x110>)
 8006fae:	f7ff fd77 	bl	8006aa0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d103      	bne.n	8006fc6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006fc6:	f000 fd05 	bl	80079d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006fca:	4b21      	ldr	r3, [pc, #132]	; (8007050 <vTaskSuspend+0x114>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006fd2:	f000 fccf 	bl	8007974 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006fd6:	f000 fb17 	bl	8007608 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006fda:	f000 fcfb 	bl	80079d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006fde:	4b18      	ldr	r3, [pc, #96]	; (8007040 <vTaskSuspend+0x104>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d127      	bne.n	8007038 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006fe8:	4b19      	ldr	r3, [pc, #100]	; (8007050 <vTaskSuspend+0x114>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d017      	beq.n	8007020 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006ff0:	4b18      	ldr	r3, [pc, #96]	; (8007054 <vTaskSuspend+0x118>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <vTaskSuspend+0xd2>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60bb      	str	r3, [r7, #8]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800700e:	4b12      	ldr	r3, [pc, #72]	; (8007058 <vTaskSuspend+0x11c>)
 8007010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800701e:	e00b      	b.n	8007038 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <vTaskSuspend+0x110>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	4b0d      	ldr	r3, [pc, #52]	; (800705c <vTaskSuspend+0x120>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d103      	bne.n	8007034 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800702c:	4b04      	ldr	r3, [pc, #16]	; (8007040 <vTaskSuspend+0x104>)
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
	}
 8007032:	e001      	b.n	8007038 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007034:	f000 f9d6 	bl	80073e4 <vTaskSwitchContext>
	}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	200011c0 	.word	0x200011c0
 8007044:	200011c4 	.word	0x200011c4
 8007048:	200012c8 	.word	0x200012c8
 800704c:	200012ac 	.word	0x200012ac
 8007050:	200012cc 	.word	0x200012cc
 8007054:	200012e8 	.word	0x200012e8
 8007058:	e000ed04 	.word	0xe000ed04
 800705c:	200012c0 	.word	0x200012c0

08007060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08a      	sub	sp, #40	; 0x28
 8007064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800706e:	463a      	mov	r2, r7
 8007070:	1d39      	adds	r1, r7, #4
 8007072:	f107 0308 	add.w	r3, r7, #8
 8007076:	4618      	mov	r0, r3
 8007078:	f7fa fcea 	bl	8001a50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	9202      	str	r2, [sp, #8]
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	2300      	movs	r3, #0
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	2300      	movs	r3, #0
 800708c:	460a      	mov	r2, r1
 800708e:	491e      	ldr	r1, [pc, #120]	; (8007108 <vTaskStartScheduler+0xa8>)
 8007090:	481e      	ldr	r0, [pc, #120]	; (800710c <vTaskStartScheduler+0xac>)
 8007092:	f7ff fd8c 	bl	8006bae <xTaskCreateStatic>
 8007096:	4603      	mov	r3, r0
 8007098:	4a1d      	ldr	r2, [pc, #116]	; (8007110 <vTaskStartScheduler+0xb0>)
 800709a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800709c:	4b1c      	ldr	r3, [pc, #112]	; (8007110 <vTaskStartScheduler+0xb0>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070a4:	2301      	movs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e001      	b.n	80070ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d116      	bne.n	80070e2 <vTaskStartScheduler+0x82>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	613b      	str	r3, [r7, #16]
}
 80070c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070c8:	4b12      	ldr	r3, [pc, #72]	; (8007114 <vTaskStartScheduler+0xb4>)
 80070ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070d0:	4b11      	ldr	r3, [pc, #68]	; (8007118 <vTaskStartScheduler+0xb8>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070d6:	4b11      	ldr	r3, [pc, #68]	; (800711c <vTaskStartScheduler+0xbc>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070dc:	f000 fba8 	bl	8007830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070e0:	e00e      	b.n	8007100 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e8:	d10a      	bne.n	8007100 <vTaskStartScheduler+0xa0>
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	60fb      	str	r3, [r7, #12]
}
 80070fc:	bf00      	nop
 80070fe:	e7fe      	b.n	80070fe <vTaskStartScheduler+0x9e>
}
 8007100:	bf00      	nop
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	0800d0d0 	.word	0x0800d0d0
 800710c:	0800749d 	.word	0x0800749d
 8007110:	200012e4 	.word	0x200012e4
 8007114:	200012e0 	.word	0x200012e0
 8007118:	200012cc 	.word	0x200012cc
 800711c:	200012c4 	.word	0x200012c4

08007120 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007124:	4b04      	ldr	r3, [pc, #16]	; (8007138 <vTaskSuspendAll+0x18>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	4a03      	ldr	r2, [pc, #12]	; (8007138 <vTaskSuspendAll+0x18>)
 800712c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800712e:	bf00      	nop
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	200012e8 	.word	0x200012e8

0800713c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007146:	2300      	movs	r3, #0
 8007148:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800714a:	4b41      	ldr	r3, [pc, #260]	; (8007250 <xTaskResumeAll+0x114>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <xTaskResumeAll+0x2c>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	603b      	str	r3, [r7, #0]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007168:	f000 fc04 	bl	8007974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800716c:	4b38      	ldr	r3, [pc, #224]	; (8007250 <xTaskResumeAll+0x114>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3b01      	subs	r3, #1
 8007172:	4a37      	ldr	r2, [pc, #220]	; (8007250 <xTaskResumeAll+0x114>)
 8007174:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007176:	4b36      	ldr	r3, [pc, #216]	; (8007250 <xTaskResumeAll+0x114>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d161      	bne.n	8007242 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800717e:	4b35      	ldr	r3, [pc, #212]	; (8007254 <xTaskResumeAll+0x118>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d05d      	beq.n	8007242 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007186:	e02e      	b.n	80071e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007188:	4b33      	ldr	r3, [pc, #204]	; (8007258 <xTaskResumeAll+0x11c>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3318      	adds	r3, #24
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fce0 	bl	8006b5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3304      	adds	r3, #4
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fcdb 	bl	8006b5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	2201      	movs	r2, #1
 80071aa:	409a      	lsls	r2, r3
 80071ac:	4b2b      	ldr	r3, [pc, #172]	; (800725c <xTaskResumeAll+0x120>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	4a2a      	ldr	r2, [pc, #168]	; (800725c <xTaskResumeAll+0x120>)
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4a27      	ldr	r2, [pc, #156]	; (8007260 <xTaskResumeAll+0x124>)
 80071c4:	441a      	add	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7ff fc67 	bl	8006aa0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4b23      	ldr	r3, [pc, #140]	; (8007264 <xTaskResumeAll+0x128>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	429a      	cmp	r2, r3
 80071de:	d302      	bcc.n	80071e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80071e0:	4b21      	ldr	r3, [pc, #132]	; (8007268 <xTaskResumeAll+0x12c>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071e6:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <xTaskResumeAll+0x11c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1cc      	bne.n	8007188 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071f4:	f000 fa08 	bl	8007608 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80071f8:	4b1c      	ldr	r3, [pc, #112]	; (800726c <xTaskResumeAll+0x130>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d010      	beq.n	8007226 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007204:	f000 f836 	bl	8007274 <xTaskIncrementTick>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800720e:	4b16      	ldr	r3, [pc, #88]	; (8007268 <xTaskResumeAll+0x12c>)
 8007210:	2201      	movs	r2, #1
 8007212:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3b01      	subs	r3, #1
 8007218:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1f1      	bne.n	8007204 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007220:	4b12      	ldr	r3, [pc, #72]	; (800726c <xTaskResumeAll+0x130>)
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007226:	4b10      	ldr	r3, [pc, #64]	; (8007268 <xTaskResumeAll+0x12c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007232:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <xTaskResumeAll+0x134>)
 8007234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007242:	f000 fbc7 	bl	80079d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007246:	68bb      	ldr	r3, [r7, #8]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	200012e8 	.word	0x200012e8
 8007254:	200012c0 	.word	0x200012c0
 8007258:	20001280 	.word	0x20001280
 800725c:	200012c8 	.word	0x200012c8
 8007260:	200011c4 	.word	0x200011c4
 8007264:	200011c0 	.word	0x200011c0
 8007268:	200012d4 	.word	0x200012d4
 800726c:	200012d0 	.word	0x200012d0
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800727e:	4b4e      	ldr	r3, [pc, #312]	; (80073b8 <xTaskIncrementTick+0x144>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 808e 	bne.w	80073a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007288:	4b4c      	ldr	r3, [pc, #304]	; (80073bc <xTaskIncrementTick+0x148>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007290:	4a4a      	ldr	r2, [pc, #296]	; (80073bc <xTaskIncrementTick+0x148>)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d120      	bne.n	80072de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800729c:	4b48      	ldr	r3, [pc, #288]	; (80073c0 <xTaskIncrementTick+0x14c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <xTaskIncrementTick+0x48>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	603b      	str	r3, [r7, #0]
}
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <xTaskIncrementTick+0x46>
 80072bc:	4b40      	ldr	r3, [pc, #256]	; (80073c0 <xTaskIncrementTick+0x14c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	4b40      	ldr	r3, [pc, #256]	; (80073c4 <xTaskIncrementTick+0x150>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a3e      	ldr	r2, [pc, #248]	; (80073c0 <xTaskIncrementTick+0x14c>)
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	4a3e      	ldr	r2, [pc, #248]	; (80073c4 <xTaskIncrementTick+0x150>)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	4b3d      	ldr	r3, [pc, #244]	; (80073c8 <xTaskIncrementTick+0x154>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3301      	adds	r3, #1
 80072d6:	4a3c      	ldr	r2, [pc, #240]	; (80073c8 <xTaskIncrementTick+0x154>)
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	f000 f995 	bl	8007608 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072de:	4b3b      	ldr	r3, [pc, #236]	; (80073cc <xTaskIncrementTick+0x158>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d348      	bcc.n	800737a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072e8:	4b35      	ldr	r3, [pc, #212]	; (80073c0 <xTaskIncrementTick+0x14c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d104      	bne.n	80072fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f2:	4b36      	ldr	r3, [pc, #216]	; (80073cc <xTaskIncrementTick+0x158>)
 80072f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072f8:	601a      	str	r2, [r3, #0]
					break;
 80072fa:	e03e      	b.n	800737a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072fc:	4b30      	ldr	r3, [pc, #192]	; (80073c0 <xTaskIncrementTick+0x14c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d203      	bcs.n	800731c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007314:	4a2d      	ldr	r2, [pc, #180]	; (80073cc <xTaskIncrementTick+0x158>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800731a:	e02e      	b.n	800737a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	3304      	adds	r3, #4
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff fc1a 	bl	8006b5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	3318      	adds	r3, #24
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fc11 	bl	8006b5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	2201      	movs	r2, #1
 800733e:	409a      	lsls	r2, r3
 8007340:	4b23      	ldr	r3, [pc, #140]	; (80073d0 <xTaskIncrementTick+0x15c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4313      	orrs	r3, r2
 8007346:	4a22      	ldr	r2, [pc, #136]	; (80073d0 <xTaskIncrementTick+0x15c>)
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4a1f      	ldr	r2, [pc, #124]	; (80073d4 <xTaskIncrementTick+0x160>)
 8007358:	441a      	add	r2, r3
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	3304      	adds	r3, #4
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f7ff fb9d 	bl	8006aa0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <xTaskIncrementTick+0x164>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	429a      	cmp	r2, r3
 8007372:	d3b9      	bcc.n	80072e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007374:	2301      	movs	r3, #1
 8007376:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007378:	e7b6      	b.n	80072e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800737a:	4b17      	ldr	r3, [pc, #92]	; (80073d8 <xTaskIncrementTick+0x164>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007380:	4914      	ldr	r1, [pc, #80]	; (80073d4 <xTaskIncrementTick+0x160>)
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d901      	bls.n	8007396 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007392:	2301      	movs	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <xTaskIncrementTick+0x168>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d007      	beq.n	80073ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800739e:	2301      	movs	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	e004      	b.n	80073ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073a4:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <xTaskIncrementTick+0x16c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	4a0d      	ldr	r2, [pc, #52]	; (80073e0 <xTaskIncrementTick+0x16c>)
 80073ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073ae:	697b      	ldr	r3, [r7, #20]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	200012e8 	.word	0x200012e8
 80073bc:	200012c4 	.word	0x200012c4
 80073c0:	20001278 	.word	0x20001278
 80073c4:	2000127c 	.word	0x2000127c
 80073c8:	200012d8 	.word	0x200012d8
 80073cc:	200012e0 	.word	0x200012e0
 80073d0:	200012c8 	.word	0x200012c8
 80073d4:	200011c4 	.word	0x200011c4
 80073d8:	200011c0 	.word	0x200011c0
 80073dc:	200012d4 	.word	0x200012d4
 80073e0:	200012d0 	.word	0x200012d0

080073e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073ea:	4b27      	ldr	r3, [pc, #156]	; (8007488 <vTaskSwitchContext+0xa4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073f2:	4b26      	ldr	r3, [pc, #152]	; (800748c <vTaskSwitchContext+0xa8>)
 80073f4:	2201      	movs	r2, #1
 80073f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073f8:	e03f      	b.n	800747a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80073fa:	4b24      	ldr	r3, [pc, #144]	; (800748c <vTaskSwitchContext+0xa8>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007400:	4b23      	ldr	r3, [pc, #140]	; (8007490 <vTaskSwitchContext+0xac>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	fab3 f383 	clz	r3, r3
 800740c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	f1c3 031f 	rsb	r3, r3, #31
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	491f      	ldr	r1, [pc, #124]	; (8007494 <vTaskSwitchContext+0xb0>)
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <vTaskSwitchContext+0x5c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	607b      	str	r3, [r7, #4]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <vTaskSwitchContext+0x5a>
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4a12      	ldr	r2, [pc, #72]	; (8007494 <vTaskSwitchContext+0xb0>)
 800744c:	4413      	add	r3, r2
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	3308      	adds	r3, #8
 8007462:	429a      	cmp	r2, r3
 8007464:	d104      	bne.n	8007470 <vTaskSwitchContext+0x8c>
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	605a      	str	r2, [r3, #4]
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	4a08      	ldr	r2, [pc, #32]	; (8007498 <vTaskSwitchContext+0xb4>)
 8007478:	6013      	str	r3, [r2, #0]
}
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	200012e8 	.word	0x200012e8
 800748c:	200012d4 	.word	0x200012d4
 8007490:	200012c8 	.word	0x200012c8
 8007494:	200011c4 	.word	0x200011c4
 8007498:	200011c0 	.word	0x200011c0

0800749c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074a4:	f000 f852 	bl	800754c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <prvIdleTask+0x28>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d9f9      	bls.n	80074a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <prvIdleTask+0x2c>)
 80074b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074c0:	e7f0      	b.n	80074a4 <prvIdleTask+0x8>
 80074c2:	bf00      	nop
 80074c4:	200011c4 	.word	0x200011c4
 80074c8:	e000ed04 	.word	0xe000ed04

080074cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074d2:	2300      	movs	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	e00c      	b.n	80074f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4a12      	ldr	r2, [pc, #72]	; (800752c <prvInitialiseTaskLists+0x60>)
 80074e4:	4413      	add	r3, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff faad 	bl	8006a46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3301      	adds	r3, #1
 80074f0:	607b      	str	r3, [r7, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b06      	cmp	r3, #6
 80074f6:	d9ef      	bls.n	80074d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074f8:	480d      	ldr	r0, [pc, #52]	; (8007530 <prvInitialiseTaskLists+0x64>)
 80074fa:	f7ff faa4 	bl	8006a46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074fe:	480d      	ldr	r0, [pc, #52]	; (8007534 <prvInitialiseTaskLists+0x68>)
 8007500:	f7ff faa1 	bl	8006a46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007504:	480c      	ldr	r0, [pc, #48]	; (8007538 <prvInitialiseTaskLists+0x6c>)
 8007506:	f7ff fa9e 	bl	8006a46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800750a:	480c      	ldr	r0, [pc, #48]	; (800753c <prvInitialiseTaskLists+0x70>)
 800750c:	f7ff fa9b 	bl	8006a46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007510:	480b      	ldr	r0, [pc, #44]	; (8007540 <prvInitialiseTaskLists+0x74>)
 8007512:	f7ff fa98 	bl	8006a46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <prvInitialiseTaskLists+0x78>)
 8007518:	4a05      	ldr	r2, [pc, #20]	; (8007530 <prvInitialiseTaskLists+0x64>)
 800751a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <prvInitialiseTaskLists+0x7c>)
 800751e:	4a05      	ldr	r2, [pc, #20]	; (8007534 <prvInitialiseTaskLists+0x68>)
 8007520:	601a      	str	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	200011c4 	.word	0x200011c4
 8007530:	20001250 	.word	0x20001250
 8007534:	20001264 	.word	0x20001264
 8007538:	20001280 	.word	0x20001280
 800753c:	20001294 	.word	0x20001294
 8007540:	200012ac 	.word	0x200012ac
 8007544:	20001278 	.word	0x20001278
 8007548:	2000127c 	.word	0x2000127c

0800754c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007552:	e019      	b.n	8007588 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007554:	f000 fa0e 	bl	8007974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007558:	4b10      	ldr	r3, [pc, #64]	; (800759c <prvCheckTasksWaitingTermination+0x50>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3304      	adds	r3, #4
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff faf8 	bl	8006b5a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800756a:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <prvCheckTasksWaitingTermination+0x54>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3b01      	subs	r3, #1
 8007570:	4a0b      	ldr	r2, [pc, #44]	; (80075a0 <prvCheckTasksWaitingTermination+0x54>)
 8007572:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <prvCheckTasksWaitingTermination+0x58>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3b01      	subs	r3, #1
 800757a:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <prvCheckTasksWaitingTermination+0x58>)
 800757c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800757e:	f000 fa29 	bl	80079d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f810 	bl	80075a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007588:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <prvCheckTasksWaitingTermination+0x58>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e1      	bne.n	8007554 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20001294 	.word	0x20001294
 80075a0:	200012c0 	.word	0x200012c0
 80075a4:	200012a8 	.word	0x200012a8

080075a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d108      	bne.n	80075cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fb86 	bl	8007cd0 <vPortFree>
				vPortFree( pxTCB );
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fb83 	bl	8007cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075ca:	e018      	b.n	80075fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d103      	bne.n	80075de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fb7a 	bl	8007cd0 <vPortFree>
	}
 80075dc:	e00f      	b.n	80075fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d00a      	beq.n	80075fe <prvDeleteTCB+0x56>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	60fb      	str	r3, [r7, #12]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <prvDeleteTCB+0x54>
	}
 80075fe:	bf00      	nop
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800760e:	4b0c      	ldr	r3, [pc, #48]	; (8007640 <prvResetNextTaskUnblockTime+0x38>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d104      	bne.n	8007622 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <prvResetNextTaskUnblockTime+0x3c>)
 800761a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800761e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007620:	e008      	b.n	8007634 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007622:	4b07      	ldr	r3, [pc, #28]	; (8007640 <prvResetNextTaskUnblockTime+0x38>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	4a04      	ldr	r2, [pc, #16]	; (8007644 <prvResetNextTaskUnblockTime+0x3c>)
 8007632:	6013      	str	r3, [r2, #0]
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	20001278 	.word	0x20001278
 8007644:	200012e0 	.word	0x200012e0

08007648 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007652:	4b29      	ldr	r3, [pc, #164]	; (80076f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007658:	4b28      	ldr	r3, [pc, #160]	; (80076fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3304      	adds	r3, #4
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fa7b 	bl	8006b5a <uxListRemove>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10b      	bne.n	8007682 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800766a:	4b24      	ldr	r3, [pc, #144]	; (80076fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	2201      	movs	r2, #1
 8007672:	fa02 f303 	lsl.w	r3, r2, r3
 8007676:	43da      	mvns	r2, r3
 8007678:	4b21      	ldr	r3, [pc, #132]	; (8007700 <prvAddCurrentTaskToDelayedList+0xb8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4013      	ands	r3, r2
 800767e:	4a20      	ldr	r2, [pc, #128]	; (8007700 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007680:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007688:	d10a      	bne.n	80076a0 <prvAddCurrentTaskToDelayedList+0x58>
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007690:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3304      	adds	r3, #4
 8007696:	4619      	mov	r1, r3
 8007698:	481a      	ldr	r0, [pc, #104]	; (8007704 <prvAddCurrentTaskToDelayedList+0xbc>)
 800769a:	f7ff fa01 	bl	8006aa0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800769e:	e026      	b.n	80076ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4413      	add	r3, r2
 80076a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076a8:	4b14      	ldr	r3, [pc, #80]	; (80076fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d209      	bcs.n	80076cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076b8:	4b13      	ldr	r3, [pc, #76]	; (8007708 <prvAddCurrentTaskToDelayedList+0xc0>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f7ff fa0f 	bl	8006ae8 <vListInsert>
}
 80076ca:	e010      	b.n	80076ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076cc:	4b0f      	ldr	r3, [pc, #60]	; (800770c <prvAddCurrentTaskToDelayedList+0xc4>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7ff fa05 	bl	8006ae8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076de:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d202      	bcs.n	80076ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80076e8:	4a09      	ldr	r2, [pc, #36]	; (8007710 <prvAddCurrentTaskToDelayedList+0xc8>)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6013      	str	r3, [r2, #0]
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	200012c4 	.word	0x200012c4
 80076fc:	200011c0 	.word	0x200011c0
 8007700:	200012c8 	.word	0x200012c8
 8007704:	200012ac 	.word	0x200012ac
 8007708:	2000127c 	.word	0x2000127c
 800770c:	20001278 	.word	0x20001278
 8007710:	200012e0 	.word	0x200012e0

08007714 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3b04      	subs	r3, #4
 8007724:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800772c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3b04      	subs	r3, #4
 8007732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f023 0201 	bic.w	r2, r3, #1
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3b04      	subs	r3, #4
 8007742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007744:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <pxPortInitialiseStack+0x64>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3b14      	subs	r3, #20
 800774e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3b04      	subs	r3, #4
 800775a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f06f 0202 	mvn.w	r2, #2
 8007762:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3b20      	subs	r3, #32
 8007768:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800776a:	68fb      	ldr	r3, [r7, #12]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	0800777d 	.word	0x0800777d

0800777c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007786:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <prvTaskExitError+0x54>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800778e:	d00a      	beq.n	80077a6 <prvTaskExitError+0x2a>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	60fb      	str	r3, [r7, #12]
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <prvTaskExitError+0x28>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	60bb      	str	r3, [r7, #8]
}
 80077b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077ba:	bf00      	nop
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0fc      	beq.n	80077bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077c2:	bf00      	nop
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	2000000c 	.word	0x2000000c
	...

080077e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <pxCurrentTCBConst2>)
 80077e2:	6819      	ldr	r1, [r3, #0]
 80077e4:	6808      	ldr	r0, [r1, #0]
 80077e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ea:	f380 8809 	msr	PSP, r0
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8811 	msr	BASEPRI, r0
 80077fa:	4770      	bx	lr
 80077fc:	f3af 8000 	nop.w

08007800 <pxCurrentTCBConst2>:
 8007800:	200011c0 	.word	0x200011c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop

08007808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007808:	4808      	ldr	r0, [pc, #32]	; (800782c <prvPortStartFirstTask+0x24>)
 800780a:	6800      	ldr	r0, [r0, #0]
 800780c:	6800      	ldr	r0, [r0, #0]
 800780e:	f380 8808 	msr	MSP, r0
 8007812:	f04f 0000 	mov.w	r0, #0
 8007816:	f380 8814 	msr	CONTROL, r0
 800781a:	b662      	cpsie	i
 800781c:	b661      	cpsie	f
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	df00      	svc	0
 8007828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800782a:	bf00      	nop
 800782c:	e000ed08 	.word	0xe000ed08

08007830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007836:	4b46      	ldr	r3, [pc, #280]	; (8007950 <xPortStartScheduler+0x120>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a46      	ldr	r2, [pc, #280]	; (8007954 <xPortStartScheduler+0x124>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d10a      	bne.n	8007856 <xPortStartScheduler+0x26>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	613b      	str	r3, [r7, #16]
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007856:	4b3e      	ldr	r3, [pc, #248]	; (8007950 <xPortStartScheduler+0x120>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a3f      	ldr	r2, [pc, #252]	; (8007958 <xPortStartScheduler+0x128>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d10a      	bne.n	8007876 <xPortStartScheduler+0x46>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	60fb      	str	r3, [r7, #12]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007876:	4b39      	ldr	r3, [pc, #228]	; (800795c <xPortStartScheduler+0x12c>)
 8007878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	22ff      	movs	r2, #255	; 0xff
 8007886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007898:	b2da      	uxtb	r2, r3
 800789a:	4b31      	ldr	r3, [pc, #196]	; (8007960 <xPortStartScheduler+0x130>)
 800789c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800789e:	4b31      	ldr	r3, [pc, #196]	; (8007964 <xPortStartScheduler+0x134>)
 80078a0:	2207      	movs	r2, #7
 80078a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078a4:	e009      	b.n	80078ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078a6:	4b2f      	ldr	r3, [pc, #188]	; (8007964 <xPortStartScheduler+0x134>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	4a2d      	ldr	r2, [pc, #180]	; (8007964 <xPortStartScheduler+0x134>)
 80078ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d0ef      	beq.n	80078a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078c6:	4b27      	ldr	r3, [pc, #156]	; (8007964 <xPortStartScheduler+0x134>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f1c3 0307 	rsb	r3, r3, #7
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d00a      	beq.n	80078e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60bb      	str	r3, [r7, #8]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078e8:	4b1e      	ldr	r3, [pc, #120]	; (8007964 <xPortStartScheduler+0x134>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <xPortStartScheduler+0x134>)
 80078f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078f2:	4b1c      	ldr	r3, [pc, #112]	; (8007964 <xPortStartScheduler+0x134>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078fa:	4a1a      	ldr	r2, [pc, #104]	; (8007964 <xPortStartScheduler+0x134>)
 80078fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007906:	4b18      	ldr	r3, [pc, #96]	; (8007968 <xPortStartScheduler+0x138>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a17      	ldr	r2, [pc, #92]	; (8007968 <xPortStartScheduler+0x138>)
 800790c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007912:	4b15      	ldr	r3, [pc, #84]	; (8007968 <xPortStartScheduler+0x138>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a14      	ldr	r2, [pc, #80]	; (8007968 <xPortStartScheduler+0x138>)
 8007918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800791c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800791e:	f000 f8dd 	bl	8007adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007922:	4b12      	ldr	r3, [pc, #72]	; (800796c <xPortStartScheduler+0x13c>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007928:	f000 f8fc 	bl	8007b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800792c:	4b10      	ldr	r3, [pc, #64]	; (8007970 <xPortStartScheduler+0x140>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a0f      	ldr	r2, [pc, #60]	; (8007970 <xPortStartScheduler+0x140>)
 8007932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007938:	f7ff ff66 	bl	8007808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800793c:	f7ff fd52 	bl	80073e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007940:	f7ff ff1c 	bl	800777c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	e000ed00 	.word	0xe000ed00
 8007954:	410fc271 	.word	0x410fc271
 8007958:	410fc270 	.word	0x410fc270
 800795c:	e000e400 	.word	0xe000e400
 8007960:	200012ec 	.word	0x200012ec
 8007964:	200012f0 	.word	0x200012f0
 8007968:	e000ed20 	.word	0xe000ed20
 800796c:	2000000c 	.word	0x2000000c
 8007970:	e000ef34 	.word	0xe000ef34

08007974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	607b      	str	r3, [r7, #4]
}
 800798c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800798e:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <vPortEnterCritical+0x58>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3301      	adds	r3, #1
 8007994:	4a0d      	ldr	r2, [pc, #52]	; (80079cc <vPortEnterCritical+0x58>)
 8007996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <vPortEnterCritical+0x58>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d10f      	bne.n	80079c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <vPortEnterCritical+0x5c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	603b      	str	r3, [r7, #0]
}
 80079bc:	bf00      	nop
 80079be:	e7fe      	b.n	80079be <vPortEnterCritical+0x4a>
	}
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	2000000c 	.word	0x2000000c
 80079d0:	e000ed04 	.word	0xe000ed04

080079d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079da:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <vPortExitCritical+0x50>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <vPortExitCritical+0x24>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	607b      	str	r3, [r7, #4]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <vPortExitCritical+0x50>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <vPortExitCritical+0x50>)
 8007a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a02:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <vPortExitCritical+0x50>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d105      	bne.n	8007a16 <vPortExitCritical+0x42>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	2000000c 	.word	0x2000000c
	...

08007a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a30:	f3ef 8009 	mrs	r0, PSP
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <pxCurrentTCBConst>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	f01e 0f10 	tst.w	lr, #16
 8007a40:	bf08      	it	eq
 8007a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	6010      	str	r0, [r2, #0]
 8007a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a54:	f380 8811 	msr	BASEPRI, r0
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f7ff fcc0 	bl	80073e4 <vTaskSwitchContext>
 8007a64:	f04f 0000 	mov.w	r0, #0
 8007a68:	f380 8811 	msr	BASEPRI, r0
 8007a6c:	bc09      	pop	{r0, r3}
 8007a6e:	6819      	ldr	r1, [r3, #0]
 8007a70:	6808      	ldr	r0, [r1, #0]
 8007a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a76:	f01e 0f10 	tst.w	lr, #16
 8007a7a:	bf08      	it	eq
 8007a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a80:	f380 8809 	msr	PSP, r0
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	f3af 8000 	nop.w

08007a90 <pxCurrentTCBConst>:
 8007a90:	200011c0 	.word	0x200011c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop

08007a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ab2:	f7ff fbdf 	bl	8007274 <xTaskIncrementTick>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <SysTick_Handler+0x40>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f383 8811 	msr	BASEPRI, r3
}
 8007ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ae0:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <vPortSetupTimerInterrupt+0x38>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <vPortSetupTimerInterrupt+0x3c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <vPortSetupTimerInterrupt+0x40>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	099b      	lsrs	r3, r3, #6
 8007af8:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <vPortSetupTimerInterrupt+0x44>)
 8007afa:	3b01      	subs	r3, #1
 8007afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007afe:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007b00:	2207      	movs	r2, #7
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	e000e010 	.word	0xe000e010
 8007b14:	e000e018 	.word	0xe000e018
 8007b18:	20000000 	.word	0x20000000
 8007b1c:	10624dd3 	.word	0x10624dd3
 8007b20:	e000e014 	.word	0xe000e014

08007b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b34 <vPortEnableVFP+0x10>
 8007b28:	6801      	ldr	r1, [r0, #0]
 8007b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b2e:	6001      	str	r1, [r0, #0]
 8007b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b32:	bf00      	nop
 8007b34:	e000ed88 	.word	0xe000ed88

08007b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b44:	f7ff faec 	bl	8007120 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b48:	4b5b      	ldr	r3, [pc, #364]	; (8007cb8 <pvPortMalloc+0x180>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b50:	f000 f920 	bl	8007d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b54:	4b59      	ldr	r3, [pc, #356]	; (8007cbc <pvPortMalloc+0x184>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 8093 	bne.w	8007c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01d      	beq.n	8007ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b68:	2208      	movs	r2, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f023 0307 	bic.w	r3, r3, #7
 8007b80:	3308      	adds	r3, #8
 8007b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00a      	beq.n	8007ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	617b      	str	r3, [r7, #20]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d06e      	beq.n	8007c88 <pvPortMalloc+0x150>
 8007baa:	4b45      	ldr	r3, [pc, #276]	; (8007cc0 <pvPortMalloc+0x188>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d869      	bhi.n	8007c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bb4:	4b43      	ldr	r3, [pc, #268]	; (8007cc4 <pvPortMalloc+0x18c>)
 8007bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bb8:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <pvPortMalloc+0x18c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bbe:	e004      	b.n	8007bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d903      	bls.n	8007bdc <pvPortMalloc+0xa4>
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f1      	bne.n	8007bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bdc:	4b36      	ldr	r3, [pc, #216]	; (8007cb8 <pvPortMalloc+0x180>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d050      	beq.n	8007c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2208      	movs	r2, #8
 8007bec:	4413      	add	r3, r2
 8007bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	2308      	movs	r3, #8
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d91f      	bls.n	8007c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <pvPortMalloc+0xf8>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	613b      	str	r3, [r7, #16]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	1ad2      	subs	r2, r2, r3
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c42:	69b8      	ldr	r0, [r7, #24]
 8007c44:	f000 f908 	bl	8007e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c48:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c56:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <pvPortMalloc+0x190>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d203      	bcs.n	8007c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c62:	4b17      	ldr	r3, [pc, #92]	; (8007cc0 <pvPortMalloc+0x188>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a18      	ldr	r2, [pc, #96]	; (8007cc8 <pvPortMalloc+0x190>)
 8007c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <pvPortMalloc+0x184>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <pvPortMalloc+0x194>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3301      	adds	r3, #1
 8007c84:	4a11      	ldr	r2, [pc, #68]	; (8007ccc <pvPortMalloc+0x194>)
 8007c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c88:	f7ff fa58 	bl	800713c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <pvPortMalloc+0x174>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	60fb      	str	r3, [r7, #12]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <pvPortMalloc+0x172>
	return pvReturn;
 8007cac:	69fb      	ldr	r3, [r7, #28]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3728      	adds	r7, #40	; 0x28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200077c4 	.word	0x200077c4
 8007cbc:	200077d8 	.word	0x200077d8
 8007cc0:	200077c8 	.word	0x200077c8
 8007cc4:	200077bc 	.word	0x200077bc
 8007cc8:	200077cc 	.word	0x200077cc
 8007ccc:	200077d0 	.word	0x200077d0

08007cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d04d      	beq.n	8007d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	425b      	negs	r3, r3
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4413      	add	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <vPortFree+0xb8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <vPortFree+0x44>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60fb      	str	r3, [r7, #12]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <vPortFree+0x62>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	60bb      	str	r3, [r7, #8]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <vPortFree+0xb8>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d01e      	beq.n	8007d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d11a      	bne.n	8007d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <vPortFree+0xb8>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	43db      	mvns	r3, r3
 8007d52:	401a      	ands	r2, r3
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d58:	f7ff f9e2 	bl	8007120 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <vPortFree+0xbc>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4413      	add	r3, r2
 8007d66:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <vPortFree+0xbc>)
 8007d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d6a:	6938      	ldr	r0, [r7, #16]
 8007d6c:	f000 f874 	bl	8007e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d70:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <vPortFree+0xc0>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	3301      	adds	r3, #1
 8007d76:	4a06      	ldr	r2, [pc, #24]	; (8007d90 <vPortFree+0xc0>)
 8007d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d7a:	f7ff f9df 	bl	800713c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d7e:	bf00      	nop
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	200077d8 	.word	0x200077d8
 8007d8c:	200077c8 	.word	0x200077c8
 8007d90:	200077d4 	.word	0x200077d4

08007d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d9a:	f246 43c8 	movw	r3, #25800	; 0x64c8
 8007d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007da0:	4b27      	ldr	r3, [pc, #156]	; (8007e40 <prvHeapInit+0xac>)
 8007da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00c      	beq.n	8007dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3307      	adds	r3, #7
 8007db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	; (8007e40 <prvHeapInit+0xac>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dcc:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <prvHeapInit+0xb0>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dd2:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <prvHeapInit+0xb0>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4413      	add	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007de0:	2208      	movs	r2, #8
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	1a9b      	subs	r3, r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0307 	bic.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4a15      	ldr	r2, [pc, #84]	; (8007e48 <prvHeapInit+0xb4>)
 8007df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <prvHeapInit+0xb4>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <prvHeapInit+0xb4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e14:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <prvHeapInit+0xb4>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <prvHeapInit+0xb8>)
 8007e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <prvHeapInit+0xbc>)
 8007e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <prvHeapInit+0xc0>)
 8007e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e32:	601a      	str	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	200012f4 	.word	0x200012f4
 8007e44:	200077bc 	.word	0x200077bc
 8007e48:	200077c4 	.word	0x200077c4
 8007e4c:	200077cc 	.word	0x200077cc
 8007e50:	200077c8 	.word	0x200077c8
 8007e54:	200077d8 	.word	0x200077d8

08007e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e60:	4b28      	ldr	r3, [pc, #160]	; (8007f04 <prvInsertBlockIntoFreeList+0xac>)
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e002      	b.n	8007e6c <prvInsertBlockIntoFreeList+0x14>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d8f7      	bhi.n	8007e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	4413      	add	r3, r2
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d108      	bne.n	8007e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	441a      	add	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	441a      	add	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d118      	bne.n	8007ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d00d      	beq.n	8007ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e008      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e003      	b.n	8007ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d002      	beq.n	8007ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	200077bc 	.word	0x200077bc
 8007f08:	200077c4 	.word	0x200077c4

08007f0c <__cvt>:
 8007f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	ec55 4b10 	vmov	r4, r5, d0
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	460e      	mov	r6, r1
 8007f18:	4619      	mov	r1, r3
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	bfbb      	ittet	lt
 8007f1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f22:	461d      	movlt	r5, r3
 8007f24:	2300      	movge	r3, #0
 8007f26:	232d      	movlt	r3, #45	; 0x2d
 8007f28:	700b      	strb	r3, [r1, #0]
 8007f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f30:	4691      	mov	r9, r2
 8007f32:	f023 0820 	bic.w	r8, r3, #32
 8007f36:	bfbc      	itt	lt
 8007f38:	4622      	movlt	r2, r4
 8007f3a:	4614      	movlt	r4, r2
 8007f3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f40:	d005      	beq.n	8007f4e <__cvt+0x42>
 8007f42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f46:	d100      	bne.n	8007f4a <__cvt+0x3e>
 8007f48:	3601      	adds	r6, #1
 8007f4a:	2102      	movs	r1, #2
 8007f4c:	e000      	b.n	8007f50 <__cvt+0x44>
 8007f4e:	2103      	movs	r1, #3
 8007f50:	ab03      	add	r3, sp, #12
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	ab02      	add	r3, sp, #8
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	ec45 4b10 	vmov	d0, r4, r5
 8007f5c:	4653      	mov	r3, sl
 8007f5e:	4632      	mov	r2, r6
 8007f60:	f001 ff8e 	bl	8009e80 <_dtoa_r>
 8007f64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f68:	4607      	mov	r7, r0
 8007f6a:	d102      	bne.n	8007f72 <__cvt+0x66>
 8007f6c:	f019 0f01 	tst.w	r9, #1
 8007f70:	d022      	beq.n	8007fb8 <__cvt+0xac>
 8007f72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f76:	eb07 0906 	add.w	r9, r7, r6
 8007f7a:	d110      	bne.n	8007f9e <__cvt+0x92>
 8007f7c:	783b      	ldrb	r3, [r7, #0]
 8007f7e:	2b30      	cmp	r3, #48	; 0x30
 8007f80:	d10a      	bne.n	8007f98 <__cvt+0x8c>
 8007f82:	2200      	movs	r2, #0
 8007f84:	2300      	movs	r3, #0
 8007f86:	4620      	mov	r0, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f7f8 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f8e:	b918      	cbnz	r0, 8007f98 <__cvt+0x8c>
 8007f90:	f1c6 0601 	rsb	r6, r6, #1
 8007f94:	f8ca 6000 	str.w	r6, [sl]
 8007f98:	f8da 3000 	ldr.w	r3, [sl]
 8007f9c:	4499      	add	r9, r3
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f7f8 fd8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007faa:	b108      	cbz	r0, 8007fb0 <__cvt+0xa4>
 8007fac:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fb0:	2230      	movs	r2, #48	; 0x30
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	454b      	cmp	r3, r9
 8007fb6:	d307      	bcc.n	8007fc8 <__cvt+0xbc>
 8007fb8:	9b03      	ldr	r3, [sp, #12]
 8007fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fbc:	1bdb      	subs	r3, r3, r7
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	b004      	add	sp, #16
 8007fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc8:	1c59      	adds	r1, r3, #1
 8007fca:	9103      	str	r1, [sp, #12]
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e7f0      	b.n	8007fb2 <__cvt+0xa6>

08007fd0 <__exponent>:
 8007fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2900      	cmp	r1, #0
 8007fd6:	bfb8      	it	lt
 8007fd8:	4249      	neglt	r1, r1
 8007fda:	f803 2b02 	strb.w	r2, [r3], #2
 8007fde:	bfb4      	ite	lt
 8007fe0:	222d      	movlt	r2, #45	; 0x2d
 8007fe2:	222b      	movge	r2, #43	; 0x2b
 8007fe4:	2909      	cmp	r1, #9
 8007fe6:	7042      	strb	r2, [r0, #1]
 8007fe8:	dd2a      	ble.n	8008040 <__exponent+0x70>
 8007fea:	f10d 0207 	add.w	r2, sp, #7
 8007fee:	4617      	mov	r7, r2
 8007ff0:	260a      	movs	r6, #10
 8007ff2:	4694      	mov	ip, r2
 8007ff4:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ff8:	fb06 1415 	mls	r4, r6, r5, r1
 8007ffc:	3430      	adds	r4, #48	; 0x30
 8007ffe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008002:	460c      	mov	r4, r1
 8008004:	2c63      	cmp	r4, #99	; 0x63
 8008006:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800800a:	4629      	mov	r1, r5
 800800c:	dcf1      	bgt.n	8007ff2 <__exponent+0x22>
 800800e:	3130      	adds	r1, #48	; 0x30
 8008010:	f1ac 0402 	sub.w	r4, ip, #2
 8008014:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008018:	1c41      	adds	r1, r0, #1
 800801a:	4622      	mov	r2, r4
 800801c:	42ba      	cmp	r2, r7
 800801e:	d30a      	bcc.n	8008036 <__exponent+0x66>
 8008020:	f10d 0209 	add.w	r2, sp, #9
 8008024:	eba2 020c 	sub.w	r2, r2, ip
 8008028:	42bc      	cmp	r4, r7
 800802a:	bf88      	it	hi
 800802c:	2200      	movhi	r2, #0
 800802e:	4413      	add	r3, r2
 8008030:	1a18      	subs	r0, r3, r0
 8008032:	b003      	add	sp, #12
 8008034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008036:	f812 5b01 	ldrb.w	r5, [r2], #1
 800803a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800803e:	e7ed      	b.n	800801c <__exponent+0x4c>
 8008040:	2330      	movs	r3, #48	; 0x30
 8008042:	3130      	adds	r1, #48	; 0x30
 8008044:	7083      	strb	r3, [r0, #2]
 8008046:	70c1      	strb	r1, [r0, #3]
 8008048:	1d03      	adds	r3, r0, #4
 800804a:	e7f1      	b.n	8008030 <__exponent+0x60>

0800804c <_printf_float>:
 800804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	ed2d 8b02 	vpush	{d8}
 8008054:	b08d      	sub	sp, #52	; 0x34
 8008056:	460c      	mov	r4, r1
 8008058:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800805c:	4616      	mov	r6, r2
 800805e:	461f      	mov	r7, r3
 8008060:	4605      	mov	r5, r0
 8008062:	f001 fde5 	bl	8009c30 <_localeconv_r>
 8008066:	f8d0 a000 	ldr.w	sl, [r0]
 800806a:	4650      	mov	r0, sl
 800806c:	f7f8 f900 	bl	8000270 <strlen>
 8008070:	2300      	movs	r3, #0
 8008072:	930a      	str	r3, [sp, #40]	; 0x28
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	9305      	str	r3, [sp, #20]
 8008078:	f8d8 3000 	ldr.w	r3, [r8]
 800807c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008080:	3307      	adds	r3, #7
 8008082:	f023 0307 	bic.w	r3, r3, #7
 8008086:	f103 0208 	add.w	r2, r3, #8
 800808a:	f8c8 2000 	str.w	r2, [r8]
 800808e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008096:	9307      	str	r3, [sp, #28]
 8008098:	f8cd 8018 	str.w	r8, [sp, #24]
 800809c:	ee08 0a10 	vmov	s16, r0
 80080a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80080a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080a8:	4b9e      	ldr	r3, [pc, #632]	; (8008324 <_printf_float+0x2d8>)
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080ae:	f7f8 fd3d 	bl	8000b2c <__aeabi_dcmpun>
 80080b2:	bb88      	cbnz	r0, 8008118 <_printf_float+0xcc>
 80080b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080b8:	4b9a      	ldr	r3, [pc, #616]	; (8008324 <_printf_float+0x2d8>)
 80080ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080be:	f7f8 fd17 	bl	8000af0 <__aeabi_dcmple>
 80080c2:	bb48      	cbnz	r0, 8008118 <_printf_float+0xcc>
 80080c4:	2200      	movs	r2, #0
 80080c6:	2300      	movs	r3, #0
 80080c8:	4640      	mov	r0, r8
 80080ca:	4649      	mov	r1, r9
 80080cc:	f7f8 fd06 	bl	8000adc <__aeabi_dcmplt>
 80080d0:	b110      	cbz	r0, 80080d8 <_printf_float+0x8c>
 80080d2:	232d      	movs	r3, #45	; 0x2d
 80080d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d8:	4a93      	ldr	r2, [pc, #588]	; (8008328 <_printf_float+0x2dc>)
 80080da:	4b94      	ldr	r3, [pc, #592]	; (800832c <_printf_float+0x2e0>)
 80080dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080e0:	bf94      	ite	ls
 80080e2:	4690      	movls	r8, r2
 80080e4:	4698      	movhi	r8, r3
 80080e6:	2303      	movs	r3, #3
 80080e8:	6123      	str	r3, [r4, #16]
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	f023 0304 	bic.w	r3, r3, #4
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	f04f 0900 	mov.w	r9, #0
 80080f6:	9700      	str	r7, [sp, #0]
 80080f8:	4633      	mov	r3, r6
 80080fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80080fc:	4621      	mov	r1, r4
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 f9da 	bl	80084b8 <_printf_common>
 8008104:	3001      	adds	r0, #1
 8008106:	f040 8090 	bne.w	800822a <_printf_float+0x1de>
 800810a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800810e:	b00d      	add	sp, #52	; 0x34
 8008110:	ecbd 8b02 	vpop	{d8}
 8008114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008118:	4642      	mov	r2, r8
 800811a:	464b      	mov	r3, r9
 800811c:	4640      	mov	r0, r8
 800811e:	4649      	mov	r1, r9
 8008120:	f7f8 fd04 	bl	8000b2c <__aeabi_dcmpun>
 8008124:	b140      	cbz	r0, 8008138 <_printf_float+0xec>
 8008126:	464b      	mov	r3, r9
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfbc      	itt	lt
 800812c:	232d      	movlt	r3, #45	; 0x2d
 800812e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008132:	4a7f      	ldr	r2, [pc, #508]	; (8008330 <_printf_float+0x2e4>)
 8008134:	4b7f      	ldr	r3, [pc, #508]	; (8008334 <_printf_float+0x2e8>)
 8008136:	e7d1      	b.n	80080dc <_printf_float+0x90>
 8008138:	6863      	ldr	r3, [r4, #4]
 800813a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800813e:	9206      	str	r2, [sp, #24]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	d13f      	bne.n	80081c4 <_printf_float+0x178>
 8008144:	2306      	movs	r3, #6
 8008146:	6063      	str	r3, [r4, #4]
 8008148:	9b05      	ldr	r3, [sp, #20]
 800814a:	6861      	ldr	r1, [r4, #4]
 800814c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008150:	2300      	movs	r3, #0
 8008152:	9303      	str	r3, [sp, #12]
 8008154:	ab0a      	add	r3, sp, #40	; 0x28
 8008156:	e9cd b301 	strd	fp, r3, [sp, #4]
 800815a:	ab09      	add	r3, sp, #36	; 0x24
 800815c:	ec49 8b10 	vmov	d0, r8, r9
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	6022      	str	r2, [r4, #0]
 8008164:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008168:	4628      	mov	r0, r5
 800816a:	f7ff fecf 	bl	8007f0c <__cvt>
 800816e:	9b06      	ldr	r3, [sp, #24]
 8008170:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008172:	2b47      	cmp	r3, #71	; 0x47
 8008174:	4680      	mov	r8, r0
 8008176:	d108      	bne.n	800818a <_printf_float+0x13e>
 8008178:	1cc8      	adds	r0, r1, #3
 800817a:	db02      	blt.n	8008182 <_printf_float+0x136>
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	4299      	cmp	r1, r3
 8008180:	dd41      	ble.n	8008206 <_printf_float+0x1ba>
 8008182:	f1ab 0302 	sub.w	r3, fp, #2
 8008186:	fa5f fb83 	uxtb.w	fp, r3
 800818a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800818e:	d820      	bhi.n	80081d2 <_printf_float+0x186>
 8008190:	3901      	subs	r1, #1
 8008192:	465a      	mov	r2, fp
 8008194:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008198:	9109      	str	r1, [sp, #36]	; 0x24
 800819a:	f7ff ff19 	bl	8007fd0 <__exponent>
 800819e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081a0:	1813      	adds	r3, r2, r0
 80081a2:	2a01      	cmp	r2, #1
 80081a4:	4681      	mov	r9, r0
 80081a6:	6123      	str	r3, [r4, #16]
 80081a8:	dc02      	bgt.n	80081b0 <_printf_float+0x164>
 80081aa:	6822      	ldr	r2, [r4, #0]
 80081ac:	07d2      	lsls	r2, r2, #31
 80081ae:	d501      	bpl.n	80081b4 <_printf_float+0x168>
 80081b0:	3301      	adds	r3, #1
 80081b2:	6123      	str	r3, [r4, #16]
 80081b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d09c      	beq.n	80080f6 <_printf_float+0xaa>
 80081bc:	232d      	movs	r3, #45	; 0x2d
 80081be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c2:	e798      	b.n	80080f6 <_printf_float+0xaa>
 80081c4:	9a06      	ldr	r2, [sp, #24]
 80081c6:	2a47      	cmp	r2, #71	; 0x47
 80081c8:	d1be      	bne.n	8008148 <_printf_float+0xfc>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1bc      	bne.n	8008148 <_printf_float+0xfc>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e7b9      	b.n	8008146 <_printf_float+0xfa>
 80081d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081d6:	d118      	bne.n	800820a <_printf_float+0x1be>
 80081d8:	2900      	cmp	r1, #0
 80081da:	6863      	ldr	r3, [r4, #4]
 80081dc:	dd0b      	ble.n	80081f6 <_printf_float+0x1aa>
 80081de:	6121      	str	r1, [r4, #16]
 80081e0:	b913      	cbnz	r3, 80081e8 <_printf_float+0x19c>
 80081e2:	6822      	ldr	r2, [r4, #0]
 80081e4:	07d0      	lsls	r0, r2, #31
 80081e6:	d502      	bpl.n	80081ee <_printf_float+0x1a2>
 80081e8:	3301      	adds	r3, #1
 80081ea:	440b      	add	r3, r1
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80081f0:	f04f 0900 	mov.w	r9, #0
 80081f4:	e7de      	b.n	80081b4 <_printf_float+0x168>
 80081f6:	b913      	cbnz	r3, 80081fe <_printf_float+0x1b2>
 80081f8:	6822      	ldr	r2, [r4, #0]
 80081fa:	07d2      	lsls	r2, r2, #31
 80081fc:	d501      	bpl.n	8008202 <_printf_float+0x1b6>
 80081fe:	3302      	adds	r3, #2
 8008200:	e7f4      	b.n	80081ec <_printf_float+0x1a0>
 8008202:	2301      	movs	r3, #1
 8008204:	e7f2      	b.n	80081ec <_printf_float+0x1a0>
 8008206:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800820a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820c:	4299      	cmp	r1, r3
 800820e:	db05      	blt.n	800821c <_printf_float+0x1d0>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	6121      	str	r1, [r4, #16]
 8008214:	07d8      	lsls	r0, r3, #31
 8008216:	d5ea      	bpl.n	80081ee <_printf_float+0x1a2>
 8008218:	1c4b      	adds	r3, r1, #1
 800821a:	e7e7      	b.n	80081ec <_printf_float+0x1a0>
 800821c:	2900      	cmp	r1, #0
 800821e:	bfd4      	ite	le
 8008220:	f1c1 0202 	rsble	r2, r1, #2
 8008224:	2201      	movgt	r2, #1
 8008226:	4413      	add	r3, r2
 8008228:	e7e0      	b.n	80081ec <_printf_float+0x1a0>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	055a      	lsls	r2, r3, #21
 800822e:	d407      	bmi.n	8008240 <_printf_float+0x1f4>
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	4642      	mov	r2, r8
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	d12c      	bne.n	8008298 <_printf_float+0x24c>
 800823e:	e764      	b.n	800810a <_printf_float+0xbe>
 8008240:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008244:	f240 80e0 	bls.w	8008408 <_printf_float+0x3bc>
 8008248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800824c:	2200      	movs	r2, #0
 800824e:	2300      	movs	r3, #0
 8008250:	f7f8 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008254:	2800      	cmp	r0, #0
 8008256:	d034      	beq.n	80082c2 <_printf_float+0x276>
 8008258:	4a37      	ldr	r2, [pc, #220]	; (8008338 <_printf_float+0x2ec>)
 800825a:	2301      	movs	r3, #1
 800825c:	4631      	mov	r1, r6
 800825e:	4628      	mov	r0, r5
 8008260:	47b8      	blx	r7
 8008262:	3001      	adds	r0, #1
 8008264:	f43f af51 	beq.w	800810a <_printf_float+0xbe>
 8008268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800826c:	429a      	cmp	r2, r3
 800826e:	db02      	blt.n	8008276 <_printf_float+0x22a>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	07d8      	lsls	r0, r3, #31
 8008274:	d510      	bpl.n	8008298 <_printf_float+0x24c>
 8008276:	ee18 3a10 	vmov	r3, s16
 800827a:	4652      	mov	r2, sl
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	f43f af41 	beq.w	800810a <_printf_float+0xbe>
 8008288:	f04f 0800 	mov.w	r8, #0
 800828c:	f104 091a 	add.w	r9, r4, #26
 8008290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008292:	3b01      	subs	r3, #1
 8008294:	4543      	cmp	r3, r8
 8008296:	dc09      	bgt.n	80082ac <_printf_float+0x260>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	079b      	lsls	r3, r3, #30
 800829c:	f100 8107 	bmi.w	80084ae <_printf_float+0x462>
 80082a0:	68e0      	ldr	r0, [r4, #12]
 80082a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082a4:	4298      	cmp	r0, r3
 80082a6:	bfb8      	it	lt
 80082a8:	4618      	movlt	r0, r3
 80082aa:	e730      	b.n	800810e <_printf_float+0xc2>
 80082ac:	2301      	movs	r3, #1
 80082ae:	464a      	mov	r2, r9
 80082b0:	4631      	mov	r1, r6
 80082b2:	4628      	mov	r0, r5
 80082b4:	47b8      	blx	r7
 80082b6:	3001      	adds	r0, #1
 80082b8:	f43f af27 	beq.w	800810a <_printf_float+0xbe>
 80082bc:	f108 0801 	add.w	r8, r8, #1
 80082c0:	e7e6      	b.n	8008290 <_printf_float+0x244>
 80082c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dc39      	bgt.n	800833c <_printf_float+0x2f0>
 80082c8:	4a1b      	ldr	r2, [pc, #108]	; (8008338 <_printf_float+0x2ec>)
 80082ca:	2301      	movs	r3, #1
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f af19 	beq.w	800810a <_printf_float+0xbe>
 80082d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082dc:	4313      	orrs	r3, r2
 80082de:	d102      	bne.n	80082e6 <_printf_float+0x29a>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	07d9      	lsls	r1, r3, #31
 80082e4:	d5d8      	bpl.n	8008298 <_printf_float+0x24c>
 80082e6:	ee18 3a10 	vmov	r3, s16
 80082ea:	4652      	mov	r2, sl
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f af09 	beq.w	800810a <_printf_float+0xbe>
 80082f8:	f04f 0900 	mov.w	r9, #0
 80082fc:	f104 0a1a 	add.w	sl, r4, #26
 8008300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008302:	425b      	negs	r3, r3
 8008304:	454b      	cmp	r3, r9
 8008306:	dc01      	bgt.n	800830c <_printf_float+0x2c0>
 8008308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830a:	e792      	b.n	8008232 <_printf_float+0x1e6>
 800830c:	2301      	movs	r3, #1
 800830e:	4652      	mov	r2, sl
 8008310:	4631      	mov	r1, r6
 8008312:	4628      	mov	r0, r5
 8008314:	47b8      	blx	r7
 8008316:	3001      	adds	r0, #1
 8008318:	f43f aef7 	beq.w	800810a <_printf_float+0xbe>
 800831c:	f109 0901 	add.w	r9, r9, #1
 8008320:	e7ee      	b.n	8008300 <_printf_float+0x2b4>
 8008322:	bf00      	nop
 8008324:	7fefffff 	.word	0x7fefffff
 8008328:	0800d10c 	.word	0x0800d10c
 800832c:	0800d110 	.word	0x0800d110
 8008330:	0800d114 	.word	0x0800d114
 8008334:	0800d118 	.word	0x0800d118
 8008338:	0800d3b5 	.word	0x0800d3b5
 800833c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008340:	429a      	cmp	r2, r3
 8008342:	bfa8      	it	ge
 8008344:	461a      	movge	r2, r3
 8008346:	2a00      	cmp	r2, #0
 8008348:	4691      	mov	r9, r2
 800834a:	dc37      	bgt.n	80083bc <_printf_float+0x370>
 800834c:	f04f 0b00 	mov.w	fp, #0
 8008350:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008354:	f104 021a 	add.w	r2, r4, #26
 8008358:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800835a:	9305      	str	r3, [sp, #20]
 800835c:	eba3 0309 	sub.w	r3, r3, r9
 8008360:	455b      	cmp	r3, fp
 8008362:	dc33      	bgt.n	80083cc <_printf_float+0x380>
 8008364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008368:	429a      	cmp	r2, r3
 800836a:	db3b      	blt.n	80083e4 <_printf_float+0x398>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	07da      	lsls	r2, r3, #31
 8008370:	d438      	bmi.n	80083e4 <_printf_float+0x398>
 8008372:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008376:	eba2 0903 	sub.w	r9, r2, r3
 800837a:	9b05      	ldr	r3, [sp, #20]
 800837c:	1ad2      	subs	r2, r2, r3
 800837e:	4591      	cmp	r9, r2
 8008380:	bfa8      	it	ge
 8008382:	4691      	movge	r9, r2
 8008384:	f1b9 0f00 	cmp.w	r9, #0
 8008388:	dc35      	bgt.n	80083f6 <_printf_float+0x3aa>
 800838a:	f04f 0800 	mov.w	r8, #0
 800838e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008392:	f104 0a1a 	add.w	sl, r4, #26
 8008396:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	eba3 0309 	sub.w	r3, r3, r9
 80083a0:	4543      	cmp	r3, r8
 80083a2:	f77f af79 	ble.w	8008298 <_printf_float+0x24c>
 80083a6:	2301      	movs	r3, #1
 80083a8:	4652      	mov	r2, sl
 80083aa:	4631      	mov	r1, r6
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b8      	blx	r7
 80083b0:	3001      	adds	r0, #1
 80083b2:	f43f aeaa 	beq.w	800810a <_printf_float+0xbe>
 80083b6:	f108 0801 	add.w	r8, r8, #1
 80083ba:	e7ec      	b.n	8008396 <_printf_float+0x34a>
 80083bc:	4613      	mov	r3, r2
 80083be:	4631      	mov	r1, r6
 80083c0:	4642      	mov	r2, r8
 80083c2:	4628      	mov	r0, r5
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	d1c0      	bne.n	800834c <_printf_float+0x300>
 80083ca:	e69e      	b.n	800810a <_printf_float+0xbe>
 80083cc:	2301      	movs	r3, #1
 80083ce:	4631      	mov	r1, r6
 80083d0:	4628      	mov	r0, r5
 80083d2:	9205      	str	r2, [sp, #20]
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	f43f ae97 	beq.w	800810a <_printf_float+0xbe>
 80083dc:	9a05      	ldr	r2, [sp, #20]
 80083de:	f10b 0b01 	add.w	fp, fp, #1
 80083e2:	e7b9      	b.n	8008358 <_printf_float+0x30c>
 80083e4:	ee18 3a10 	vmov	r3, s16
 80083e8:	4652      	mov	r2, sl
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	d1be      	bne.n	8008372 <_printf_float+0x326>
 80083f4:	e689      	b.n	800810a <_printf_float+0xbe>
 80083f6:	9a05      	ldr	r2, [sp, #20]
 80083f8:	464b      	mov	r3, r9
 80083fa:	4442      	add	r2, r8
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	d1c1      	bne.n	800838a <_printf_float+0x33e>
 8008406:	e680      	b.n	800810a <_printf_float+0xbe>
 8008408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800840a:	2a01      	cmp	r2, #1
 800840c:	dc01      	bgt.n	8008412 <_printf_float+0x3c6>
 800840e:	07db      	lsls	r3, r3, #31
 8008410:	d53a      	bpl.n	8008488 <_printf_float+0x43c>
 8008412:	2301      	movs	r3, #1
 8008414:	4642      	mov	r2, r8
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	f43f ae74 	beq.w	800810a <_printf_float+0xbe>
 8008422:	ee18 3a10 	vmov	r3, s16
 8008426:	4652      	mov	r2, sl
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f ae6b 	beq.w	800810a <_printf_float+0xbe>
 8008434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008438:	2200      	movs	r2, #0
 800843a:	2300      	movs	r3, #0
 800843c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008440:	f7f8 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008444:	b9d8      	cbnz	r0, 800847e <_printf_float+0x432>
 8008446:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800844a:	f108 0201 	add.w	r2, r8, #1
 800844e:	4631      	mov	r1, r6
 8008450:	4628      	mov	r0, r5
 8008452:	47b8      	blx	r7
 8008454:	3001      	adds	r0, #1
 8008456:	d10e      	bne.n	8008476 <_printf_float+0x42a>
 8008458:	e657      	b.n	800810a <_printf_float+0xbe>
 800845a:	2301      	movs	r3, #1
 800845c:	4652      	mov	r2, sl
 800845e:	4631      	mov	r1, r6
 8008460:	4628      	mov	r0, r5
 8008462:	47b8      	blx	r7
 8008464:	3001      	adds	r0, #1
 8008466:	f43f ae50 	beq.w	800810a <_printf_float+0xbe>
 800846a:	f108 0801 	add.w	r8, r8, #1
 800846e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008470:	3b01      	subs	r3, #1
 8008472:	4543      	cmp	r3, r8
 8008474:	dcf1      	bgt.n	800845a <_printf_float+0x40e>
 8008476:	464b      	mov	r3, r9
 8008478:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800847c:	e6da      	b.n	8008234 <_printf_float+0x1e8>
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	f104 0a1a 	add.w	sl, r4, #26
 8008486:	e7f2      	b.n	800846e <_printf_float+0x422>
 8008488:	2301      	movs	r3, #1
 800848a:	4642      	mov	r2, r8
 800848c:	e7df      	b.n	800844e <_printf_float+0x402>
 800848e:	2301      	movs	r3, #1
 8008490:	464a      	mov	r2, r9
 8008492:	4631      	mov	r1, r6
 8008494:	4628      	mov	r0, r5
 8008496:	47b8      	blx	r7
 8008498:	3001      	adds	r0, #1
 800849a:	f43f ae36 	beq.w	800810a <_printf_float+0xbe>
 800849e:	f108 0801 	add.w	r8, r8, #1
 80084a2:	68e3      	ldr	r3, [r4, #12]
 80084a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084a6:	1a5b      	subs	r3, r3, r1
 80084a8:	4543      	cmp	r3, r8
 80084aa:	dcf0      	bgt.n	800848e <_printf_float+0x442>
 80084ac:	e6f8      	b.n	80082a0 <_printf_float+0x254>
 80084ae:	f04f 0800 	mov.w	r8, #0
 80084b2:	f104 0919 	add.w	r9, r4, #25
 80084b6:	e7f4      	b.n	80084a2 <_printf_float+0x456>

080084b8 <_printf_common>:
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	4616      	mov	r6, r2
 80084be:	4699      	mov	r9, r3
 80084c0:	688a      	ldr	r2, [r1, #8]
 80084c2:	690b      	ldr	r3, [r1, #16]
 80084c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084c8:	4293      	cmp	r3, r2
 80084ca:	bfb8      	it	lt
 80084cc:	4613      	movlt	r3, r2
 80084ce:	6033      	str	r3, [r6, #0]
 80084d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084d4:	4607      	mov	r7, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	b10a      	cbz	r2, 80084de <_printf_common+0x26>
 80084da:	3301      	adds	r3, #1
 80084dc:	6033      	str	r3, [r6, #0]
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	0699      	lsls	r1, r3, #26
 80084e2:	bf42      	ittt	mi
 80084e4:	6833      	ldrmi	r3, [r6, #0]
 80084e6:	3302      	addmi	r3, #2
 80084e8:	6033      	strmi	r3, [r6, #0]
 80084ea:	6825      	ldr	r5, [r4, #0]
 80084ec:	f015 0506 	ands.w	r5, r5, #6
 80084f0:	d106      	bne.n	8008500 <_printf_common+0x48>
 80084f2:	f104 0a19 	add.w	sl, r4, #25
 80084f6:	68e3      	ldr	r3, [r4, #12]
 80084f8:	6832      	ldr	r2, [r6, #0]
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	42ab      	cmp	r3, r5
 80084fe:	dc26      	bgt.n	800854e <_printf_common+0x96>
 8008500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008504:	1e13      	subs	r3, r2, #0
 8008506:	6822      	ldr	r2, [r4, #0]
 8008508:	bf18      	it	ne
 800850a:	2301      	movne	r3, #1
 800850c:	0692      	lsls	r2, r2, #26
 800850e:	d42b      	bmi.n	8008568 <_printf_common+0xb0>
 8008510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008514:	4649      	mov	r1, r9
 8008516:	4638      	mov	r0, r7
 8008518:	47c0      	blx	r8
 800851a:	3001      	adds	r0, #1
 800851c:	d01e      	beq.n	800855c <_printf_common+0xa4>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	6922      	ldr	r2, [r4, #16]
 8008522:	f003 0306 	and.w	r3, r3, #6
 8008526:	2b04      	cmp	r3, #4
 8008528:	bf02      	ittt	eq
 800852a:	68e5      	ldreq	r5, [r4, #12]
 800852c:	6833      	ldreq	r3, [r6, #0]
 800852e:	1aed      	subeq	r5, r5, r3
 8008530:	68a3      	ldr	r3, [r4, #8]
 8008532:	bf0c      	ite	eq
 8008534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008538:	2500      	movne	r5, #0
 800853a:	4293      	cmp	r3, r2
 800853c:	bfc4      	itt	gt
 800853e:	1a9b      	subgt	r3, r3, r2
 8008540:	18ed      	addgt	r5, r5, r3
 8008542:	2600      	movs	r6, #0
 8008544:	341a      	adds	r4, #26
 8008546:	42b5      	cmp	r5, r6
 8008548:	d11a      	bne.n	8008580 <_printf_common+0xc8>
 800854a:	2000      	movs	r0, #0
 800854c:	e008      	b.n	8008560 <_printf_common+0xa8>
 800854e:	2301      	movs	r3, #1
 8008550:	4652      	mov	r2, sl
 8008552:	4649      	mov	r1, r9
 8008554:	4638      	mov	r0, r7
 8008556:	47c0      	blx	r8
 8008558:	3001      	adds	r0, #1
 800855a:	d103      	bne.n	8008564 <_printf_common+0xac>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008564:	3501      	adds	r5, #1
 8008566:	e7c6      	b.n	80084f6 <_printf_common+0x3e>
 8008568:	18e1      	adds	r1, r4, r3
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	2030      	movs	r0, #48	; 0x30
 800856e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008572:	4422      	add	r2, r4
 8008574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800857c:	3302      	adds	r3, #2
 800857e:	e7c7      	b.n	8008510 <_printf_common+0x58>
 8008580:	2301      	movs	r3, #1
 8008582:	4622      	mov	r2, r4
 8008584:	4649      	mov	r1, r9
 8008586:	4638      	mov	r0, r7
 8008588:	47c0      	blx	r8
 800858a:	3001      	adds	r0, #1
 800858c:	d0e6      	beq.n	800855c <_printf_common+0xa4>
 800858e:	3601      	adds	r6, #1
 8008590:	e7d9      	b.n	8008546 <_printf_common+0x8e>
	...

08008594 <_printf_i>:
 8008594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	7e0f      	ldrb	r7, [r1, #24]
 800859a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800859c:	2f78      	cmp	r7, #120	; 0x78
 800859e:	4691      	mov	r9, r2
 80085a0:	4680      	mov	r8, r0
 80085a2:	460c      	mov	r4, r1
 80085a4:	469a      	mov	sl, r3
 80085a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085aa:	d807      	bhi.n	80085bc <_printf_i+0x28>
 80085ac:	2f62      	cmp	r7, #98	; 0x62
 80085ae:	d80a      	bhi.n	80085c6 <_printf_i+0x32>
 80085b0:	2f00      	cmp	r7, #0
 80085b2:	f000 80d4 	beq.w	800875e <_printf_i+0x1ca>
 80085b6:	2f58      	cmp	r7, #88	; 0x58
 80085b8:	f000 80c0 	beq.w	800873c <_printf_i+0x1a8>
 80085bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085c4:	e03a      	b.n	800863c <_printf_i+0xa8>
 80085c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085ca:	2b15      	cmp	r3, #21
 80085cc:	d8f6      	bhi.n	80085bc <_printf_i+0x28>
 80085ce:	a101      	add	r1, pc, #4	; (adr r1, 80085d4 <_printf_i+0x40>)
 80085d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	08008641 	.word	0x08008641
 80085dc:	080085bd 	.word	0x080085bd
 80085e0:	080085bd 	.word	0x080085bd
 80085e4:	080085bd 	.word	0x080085bd
 80085e8:	080085bd 	.word	0x080085bd
 80085ec:	08008641 	.word	0x08008641
 80085f0:	080085bd 	.word	0x080085bd
 80085f4:	080085bd 	.word	0x080085bd
 80085f8:	080085bd 	.word	0x080085bd
 80085fc:	080085bd 	.word	0x080085bd
 8008600:	08008745 	.word	0x08008745
 8008604:	0800866d 	.word	0x0800866d
 8008608:	080086ff 	.word	0x080086ff
 800860c:	080085bd 	.word	0x080085bd
 8008610:	080085bd 	.word	0x080085bd
 8008614:	08008767 	.word	0x08008767
 8008618:	080085bd 	.word	0x080085bd
 800861c:	0800866d 	.word	0x0800866d
 8008620:	080085bd 	.word	0x080085bd
 8008624:	080085bd 	.word	0x080085bd
 8008628:	08008707 	.word	0x08008707
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	1d1a      	adds	r2, r3, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	602a      	str	r2, [r5, #0]
 8008634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800863c:	2301      	movs	r3, #1
 800863e:	e09f      	b.n	8008780 <_printf_i+0x1ec>
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	682b      	ldr	r3, [r5, #0]
 8008644:	0607      	lsls	r7, r0, #24
 8008646:	f103 0104 	add.w	r1, r3, #4
 800864a:	6029      	str	r1, [r5, #0]
 800864c:	d501      	bpl.n	8008652 <_printf_i+0xbe>
 800864e:	681e      	ldr	r6, [r3, #0]
 8008650:	e003      	b.n	800865a <_printf_i+0xc6>
 8008652:	0646      	lsls	r6, r0, #25
 8008654:	d5fb      	bpl.n	800864e <_printf_i+0xba>
 8008656:	f9b3 6000 	ldrsh.w	r6, [r3]
 800865a:	2e00      	cmp	r6, #0
 800865c:	da03      	bge.n	8008666 <_printf_i+0xd2>
 800865e:	232d      	movs	r3, #45	; 0x2d
 8008660:	4276      	negs	r6, r6
 8008662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008666:	485a      	ldr	r0, [pc, #360]	; (80087d0 <_printf_i+0x23c>)
 8008668:	230a      	movs	r3, #10
 800866a:	e012      	b.n	8008692 <_printf_i+0xfe>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	6820      	ldr	r0, [r4, #0]
 8008670:	1d19      	adds	r1, r3, #4
 8008672:	6029      	str	r1, [r5, #0]
 8008674:	0605      	lsls	r5, r0, #24
 8008676:	d501      	bpl.n	800867c <_printf_i+0xe8>
 8008678:	681e      	ldr	r6, [r3, #0]
 800867a:	e002      	b.n	8008682 <_printf_i+0xee>
 800867c:	0641      	lsls	r1, r0, #25
 800867e:	d5fb      	bpl.n	8008678 <_printf_i+0xe4>
 8008680:	881e      	ldrh	r6, [r3, #0]
 8008682:	4853      	ldr	r0, [pc, #332]	; (80087d0 <_printf_i+0x23c>)
 8008684:	2f6f      	cmp	r7, #111	; 0x6f
 8008686:	bf0c      	ite	eq
 8008688:	2308      	moveq	r3, #8
 800868a:	230a      	movne	r3, #10
 800868c:	2100      	movs	r1, #0
 800868e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008692:	6865      	ldr	r5, [r4, #4]
 8008694:	60a5      	str	r5, [r4, #8]
 8008696:	2d00      	cmp	r5, #0
 8008698:	bfa2      	ittt	ge
 800869a:	6821      	ldrge	r1, [r4, #0]
 800869c:	f021 0104 	bicge.w	r1, r1, #4
 80086a0:	6021      	strge	r1, [r4, #0]
 80086a2:	b90e      	cbnz	r6, 80086a8 <_printf_i+0x114>
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	d04b      	beq.n	8008740 <_printf_i+0x1ac>
 80086a8:	4615      	mov	r5, r2
 80086aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80086ae:	fb03 6711 	mls	r7, r3, r1, r6
 80086b2:	5dc7      	ldrb	r7, [r0, r7]
 80086b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086b8:	4637      	mov	r7, r6
 80086ba:	42bb      	cmp	r3, r7
 80086bc:	460e      	mov	r6, r1
 80086be:	d9f4      	bls.n	80086aa <_printf_i+0x116>
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d10b      	bne.n	80086dc <_printf_i+0x148>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	07de      	lsls	r6, r3, #31
 80086c8:	d508      	bpl.n	80086dc <_printf_i+0x148>
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	6861      	ldr	r1, [r4, #4]
 80086ce:	4299      	cmp	r1, r3
 80086d0:	bfde      	ittt	le
 80086d2:	2330      	movle	r3, #48	; 0x30
 80086d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80086dc:	1b52      	subs	r2, r2, r5
 80086de:	6122      	str	r2, [r4, #16]
 80086e0:	f8cd a000 	str.w	sl, [sp]
 80086e4:	464b      	mov	r3, r9
 80086e6:	aa03      	add	r2, sp, #12
 80086e8:	4621      	mov	r1, r4
 80086ea:	4640      	mov	r0, r8
 80086ec:	f7ff fee4 	bl	80084b8 <_printf_common>
 80086f0:	3001      	adds	r0, #1
 80086f2:	d14a      	bne.n	800878a <_printf_i+0x1f6>
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086f8:	b004      	add	sp, #16
 80086fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	f043 0320 	orr.w	r3, r3, #32
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	4833      	ldr	r0, [pc, #204]	; (80087d4 <_printf_i+0x240>)
 8008708:	2778      	movs	r7, #120	; 0x78
 800870a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	6829      	ldr	r1, [r5, #0]
 8008712:	061f      	lsls	r7, r3, #24
 8008714:	f851 6b04 	ldr.w	r6, [r1], #4
 8008718:	d402      	bmi.n	8008720 <_printf_i+0x18c>
 800871a:	065f      	lsls	r7, r3, #25
 800871c:	bf48      	it	mi
 800871e:	b2b6      	uxthmi	r6, r6
 8008720:	07df      	lsls	r7, r3, #31
 8008722:	bf48      	it	mi
 8008724:	f043 0320 	orrmi.w	r3, r3, #32
 8008728:	6029      	str	r1, [r5, #0]
 800872a:	bf48      	it	mi
 800872c:	6023      	strmi	r3, [r4, #0]
 800872e:	b91e      	cbnz	r6, 8008738 <_printf_i+0x1a4>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	f023 0320 	bic.w	r3, r3, #32
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	2310      	movs	r3, #16
 800873a:	e7a7      	b.n	800868c <_printf_i+0xf8>
 800873c:	4824      	ldr	r0, [pc, #144]	; (80087d0 <_printf_i+0x23c>)
 800873e:	e7e4      	b.n	800870a <_printf_i+0x176>
 8008740:	4615      	mov	r5, r2
 8008742:	e7bd      	b.n	80086c0 <_printf_i+0x12c>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	6826      	ldr	r6, [r4, #0]
 8008748:	6961      	ldr	r1, [r4, #20]
 800874a:	1d18      	adds	r0, r3, #4
 800874c:	6028      	str	r0, [r5, #0]
 800874e:	0635      	lsls	r5, r6, #24
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	d501      	bpl.n	8008758 <_printf_i+0x1c4>
 8008754:	6019      	str	r1, [r3, #0]
 8008756:	e002      	b.n	800875e <_printf_i+0x1ca>
 8008758:	0670      	lsls	r0, r6, #25
 800875a:	d5fb      	bpl.n	8008754 <_printf_i+0x1c0>
 800875c:	8019      	strh	r1, [r3, #0]
 800875e:	2300      	movs	r3, #0
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	4615      	mov	r5, r2
 8008764:	e7bc      	b.n	80086e0 <_printf_i+0x14c>
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	1d1a      	adds	r2, r3, #4
 800876a:	602a      	str	r2, [r5, #0]
 800876c:	681d      	ldr	r5, [r3, #0]
 800876e:	6862      	ldr	r2, [r4, #4]
 8008770:	2100      	movs	r1, #0
 8008772:	4628      	mov	r0, r5
 8008774:	f7f7 fd2c 	bl	80001d0 <memchr>
 8008778:	b108      	cbz	r0, 800877e <_printf_i+0x1ea>
 800877a:	1b40      	subs	r0, r0, r5
 800877c:	6060      	str	r0, [r4, #4]
 800877e:	6863      	ldr	r3, [r4, #4]
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	2300      	movs	r3, #0
 8008784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008788:	e7aa      	b.n	80086e0 <_printf_i+0x14c>
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	462a      	mov	r2, r5
 800878e:	4649      	mov	r1, r9
 8008790:	4640      	mov	r0, r8
 8008792:	47d0      	blx	sl
 8008794:	3001      	adds	r0, #1
 8008796:	d0ad      	beq.n	80086f4 <_printf_i+0x160>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	079b      	lsls	r3, r3, #30
 800879c:	d413      	bmi.n	80087c6 <_printf_i+0x232>
 800879e:	68e0      	ldr	r0, [r4, #12]
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	4298      	cmp	r0, r3
 80087a4:	bfb8      	it	lt
 80087a6:	4618      	movlt	r0, r3
 80087a8:	e7a6      	b.n	80086f8 <_printf_i+0x164>
 80087aa:	2301      	movs	r3, #1
 80087ac:	4632      	mov	r2, r6
 80087ae:	4649      	mov	r1, r9
 80087b0:	4640      	mov	r0, r8
 80087b2:	47d0      	blx	sl
 80087b4:	3001      	adds	r0, #1
 80087b6:	d09d      	beq.n	80086f4 <_printf_i+0x160>
 80087b8:	3501      	adds	r5, #1
 80087ba:	68e3      	ldr	r3, [r4, #12]
 80087bc:	9903      	ldr	r1, [sp, #12]
 80087be:	1a5b      	subs	r3, r3, r1
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	dcf2      	bgt.n	80087aa <_printf_i+0x216>
 80087c4:	e7eb      	b.n	800879e <_printf_i+0x20a>
 80087c6:	2500      	movs	r5, #0
 80087c8:	f104 0619 	add.w	r6, r4, #25
 80087cc:	e7f5      	b.n	80087ba <_printf_i+0x226>
 80087ce:	bf00      	nop
 80087d0:	0800d11c 	.word	0x0800d11c
 80087d4:	0800d12d 	.word	0x0800d12d

080087d8 <_scanf_float>:
 80087d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	b087      	sub	sp, #28
 80087de:	4617      	mov	r7, r2
 80087e0:	9303      	str	r3, [sp, #12]
 80087e2:	688b      	ldr	r3, [r1, #8]
 80087e4:	1e5a      	subs	r2, r3, #1
 80087e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087ea:	bf83      	ittte	hi
 80087ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087f0:	195b      	addhi	r3, r3, r5
 80087f2:	9302      	strhi	r3, [sp, #8]
 80087f4:	2300      	movls	r3, #0
 80087f6:	bf86      	itte	hi
 80087f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087fc:	608b      	strhi	r3, [r1, #8]
 80087fe:	9302      	strls	r3, [sp, #8]
 8008800:	680b      	ldr	r3, [r1, #0]
 8008802:	468b      	mov	fp, r1
 8008804:	2500      	movs	r5, #0
 8008806:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800880a:	f84b 3b1c 	str.w	r3, [fp], #28
 800880e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008812:	4680      	mov	r8, r0
 8008814:	460c      	mov	r4, r1
 8008816:	465e      	mov	r6, fp
 8008818:	46aa      	mov	sl, r5
 800881a:	46a9      	mov	r9, r5
 800881c:	9501      	str	r5, [sp, #4]
 800881e:	68a2      	ldr	r2, [r4, #8]
 8008820:	b152      	cbz	r2, 8008838 <_scanf_float+0x60>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b4e      	cmp	r3, #78	; 0x4e
 8008828:	d864      	bhi.n	80088f4 <_scanf_float+0x11c>
 800882a:	2b40      	cmp	r3, #64	; 0x40
 800882c:	d83c      	bhi.n	80088a8 <_scanf_float+0xd0>
 800882e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008832:	b2c8      	uxtb	r0, r1
 8008834:	280e      	cmp	r0, #14
 8008836:	d93a      	bls.n	80088ae <_scanf_float+0xd6>
 8008838:	f1b9 0f00 	cmp.w	r9, #0
 800883c:	d003      	beq.n	8008846 <_scanf_float+0x6e>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800884a:	f1ba 0f01 	cmp.w	sl, #1
 800884e:	f200 8113 	bhi.w	8008a78 <_scanf_float+0x2a0>
 8008852:	455e      	cmp	r6, fp
 8008854:	f200 8105 	bhi.w	8008a62 <_scanf_float+0x28a>
 8008858:	2501      	movs	r5, #1
 800885a:	4628      	mov	r0, r5
 800885c:	b007      	add	sp, #28
 800885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008862:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008866:	2a0d      	cmp	r2, #13
 8008868:	d8e6      	bhi.n	8008838 <_scanf_float+0x60>
 800886a:	a101      	add	r1, pc, #4	; (adr r1, 8008870 <_scanf_float+0x98>)
 800886c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008870:	080089af 	.word	0x080089af
 8008874:	08008839 	.word	0x08008839
 8008878:	08008839 	.word	0x08008839
 800887c:	08008839 	.word	0x08008839
 8008880:	08008a0f 	.word	0x08008a0f
 8008884:	080089e7 	.word	0x080089e7
 8008888:	08008839 	.word	0x08008839
 800888c:	08008839 	.word	0x08008839
 8008890:	080089bd 	.word	0x080089bd
 8008894:	08008839 	.word	0x08008839
 8008898:	08008839 	.word	0x08008839
 800889c:	08008839 	.word	0x08008839
 80088a0:	08008839 	.word	0x08008839
 80088a4:	08008975 	.word	0x08008975
 80088a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80088ac:	e7db      	b.n	8008866 <_scanf_float+0x8e>
 80088ae:	290e      	cmp	r1, #14
 80088b0:	d8c2      	bhi.n	8008838 <_scanf_float+0x60>
 80088b2:	a001      	add	r0, pc, #4	; (adr r0, 80088b8 <_scanf_float+0xe0>)
 80088b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088b8:	08008967 	.word	0x08008967
 80088bc:	08008839 	.word	0x08008839
 80088c0:	08008967 	.word	0x08008967
 80088c4:	080089fb 	.word	0x080089fb
 80088c8:	08008839 	.word	0x08008839
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008951 	.word	0x08008951
 80088d4:	08008951 	.word	0x08008951
 80088d8:	08008951 	.word	0x08008951
 80088dc:	08008951 	.word	0x08008951
 80088e0:	08008951 	.word	0x08008951
 80088e4:	08008951 	.word	0x08008951
 80088e8:	08008951 	.word	0x08008951
 80088ec:	08008951 	.word	0x08008951
 80088f0:	08008951 	.word	0x08008951
 80088f4:	2b6e      	cmp	r3, #110	; 0x6e
 80088f6:	d809      	bhi.n	800890c <_scanf_float+0x134>
 80088f8:	2b60      	cmp	r3, #96	; 0x60
 80088fa:	d8b2      	bhi.n	8008862 <_scanf_float+0x8a>
 80088fc:	2b54      	cmp	r3, #84	; 0x54
 80088fe:	d077      	beq.n	80089f0 <_scanf_float+0x218>
 8008900:	2b59      	cmp	r3, #89	; 0x59
 8008902:	d199      	bne.n	8008838 <_scanf_float+0x60>
 8008904:	2d07      	cmp	r5, #7
 8008906:	d197      	bne.n	8008838 <_scanf_float+0x60>
 8008908:	2508      	movs	r5, #8
 800890a:	e029      	b.n	8008960 <_scanf_float+0x188>
 800890c:	2b74      	cmp	r3, #116	; 0x74
 800890e:	d06f      	beq.n	80089f0 <_scanf_float+0x218>
 8008910:	2b79      	cmp	r3, #121	; 0x79
 8008912:	e7f6      	b.n	8008902 <_scanf_float+0x12a>
 8008914:	6821      	ldr	r1, [r4, #0]
 8008916:	05c8      	lsls	r0, r1, #23
 8008918:	d51a      	bpl.n	8008950 <_scanf_float+0x178>
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008920:	6021      	str	r1, [r4, #0]
 8008922:	f109 0901 	add.w	r9, r9, #1
 8008926:	b11b      	cbz	r3, 8008930 <_scanf_float+0x158>
 8008928:	3b01      	subs	r3, #1
 800892a:	3201      	adds	r2, #1
 800892c:	9302      	str	r3, [sp, #8]
 800892e:	60a2      	str	r2, [r4, #8]
 8008930:	68a3      	ldr	r3, [r4, #8]
 8008932:	3b01      	subs	r3, #1
 8008934:	60a3      	str	r3, [r4, #8]
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	3301      	adds	r3, #1
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3b01      	subs	r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	607b      	str	r3, [r7, #4]
 8008944:	f340 8084 	ble.w	8008a50 <_scanf_float+0x278>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	603b      	str	r3, [r7, #0]
 800894e:	e766      	b.n	800881e <_scanf_float+0x46>
 8008950:	eb1a 0f05 	cmn.w	sl, r5
 8008954:	f47f af70 	bne.w	8008838 <_scanf_float+0x60>
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800895e:	6022      	str	r2, [r4, #0]
 8008960:	f806 3b01 	strb.w	r3, [r6], #1
 8008964:	e7e4      	b.n	8008930 <_scanf_float+0x158>
 8008966:	6822      	ldr	r2, [r4, #0]
 8008968:	0610      	lsls	r0, r2, #24
 800896a:	f57f af65 	bpl.w	8008838 <_scanf_float+0x60>
 800896e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008972:	e7f4      	b.n	800895e <_scanf_float+0x186>
 8008974:	f1ba 0f00 	cmp.w	sl, #0
 8008978:	d10e      	bne.n	8008998 <_scanf_float+0x1c0>
 800897a:	f1b9 0f00 	cmp.w	r9, #0
 800897e:	d10e      	bne.n	800899e <_scanf_float+0x1c6>
 8008980:	6822      	ldr	r2, [r4, #0]
 8008982:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008986:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800898a:	d108      	bne.n	800899e <_scanf_float+0x1c6>
 800898c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008990:	6022      	str	r2, [r4, #0]
 8008992:	f04f 0a01 	mov.w	sl, #1
 8008996:	e7e3      	b.n	8008960 <_scanf_float+0x188>
 8008998:	f1ba 0f02 	cmp.w	sl, #2
 800899c:	d055      	beq.n	8008a4a <_scanf_float+0x272>
 800899e:	2d01      	cmp	r5, #1
 80089a0:	d002      	beq.n	80089a8 <_scanf_float+0x1d0>
 80089a2:	2d04      	cmp	r5, #4
 80089a4:	f47f af48 	bne.w	8008838 <_scanf_float+0x60>
 80089a8:	3501      	adds	r5, #1
 80089aa:	b2ed      	uxtb	r5, r5
 80089ac:	e7d8      	b.n	8008960 <_scanf_float+0x188>
 80089ae:	f1ba 0f01 	cmp.w	sl, #1
 80089b2:	f47f af41 	bne.w	8008838 <_scanf_float+0x60>
 80089b6:	f04f 0a02 	mov.w	sl, #2
 80089ba:	e7d1      	b.n	8008960 <_scanf_float+0x188>
 80089bc:	b97d      	cbnz	r5, 80089de <_scanf_float+0x206>
 80089be:	f1b9 0f00 	cmp.w	r9, #0
 80089c2:	f47f af3c 	bne.w	800883e <_scanf_float+0x66>
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089d0:	f47f af39 	bne.w	8008846 <_scanf_float+0x6e>
 80089d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089d8:	6022      	str	r2, [r4, #0]
 80089da:	2501      	movs	r5, #1
 80089dc:	e7c0      	b.n	8008960 <_scanf_float+0x188>
 80089de:	2d03      	cmp	r5, #3
 80089e0:	d0e2      	beq.n	80089a8 <_scanf_float+0x1d0>
 80089e2:	2d05      	cmp	r5, #5
 80089e4:	e7de      	b.n	80089a4 <_scanf_float+0x1cc>
 80089e6:	2d02      	cmp	r5, #2
 80089e8:	f47f af26 	bne.w	8008838 <_scanf_float+0x60>
 80089ec:	2503      	movs	r5, #3
 80089ee:	e7b7      	b.n	8008960 <_scanf_float+0x188>
 80089f0:	2d06      	cmp	r5, #6
 80089f2:	f47f af21 	bne.w	8008838 <_scanf_float+0x60>
 80089f6:	2507      	movs	r5, #7
 80089f8:	e7b2      	b.n	8008960 <_scanf_float+0x188>
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	0591      	lsls	r1, r2, #22
 80089fe:	f57f af1b 	bpl.w	8008838 <_scanf_float+0x60>
 8008a02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a06:	6022      	str	r2, [r4, #0]
 8008a08:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a0c:	e7a8      	b.n	8008960 <_scanf_float+0x188>
 8008a0e:	6822      	ldr	r2, [r4, #0]
 8008a10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a18:	d006      	beq.n	8008a28 <_scanf_float+0x250>
 8008a1a:	0550      	lsls	r0, r2, #21
 8008a1c:	f57f af0c 	bpl.w	8008838 <_scanf_float+0x60>
 8008a20:	f1b9 0f00 	cmp.w	r9, #0
 8008a24:	f43f af0f 	beq.w	8008846 <_scanf_float+0x6e>
 8008a28:	0591      	lsls	r1, r2, #22
 8008a2a:	bf58      	it	pl
 8008a2c:	9901      	ldrpl	r1, [sp, #4]
 8008a2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a32:	bf58      	it	pl
 8008a34:	eba9 0101 	subpl.w	r1, r9, r1
 8008a38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a3c:	bf58      	it	pl
 8008a3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a42:	6022      	str	r2, [r4, #0]
 8008a44:	f04f 0900 	mov.w	r9, #0
 8008a48:	e78a      	b.n	8008960 <_scanf_float+0x188>
 8008a4a:	f04f 0a03 	mov.w	sl, #3
 8008a4e:	e787      	b.n	8008960 <_scanf_float+0x188>
 8008a50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a54:	4639      	mov	r1, r7
 8008a56:	4640      	mov	r0, r8
 8008a58:	4798      	blx	r3
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	f43f aedf 	beq.w	800881e <_scanf_float+0x46>
 8008a60:	e6ea      	b.n	8008838 <_scanf_float+0x60>
 8008a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a6a:	463a      	mov	r2, r7
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	4798      	blx	r3
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	e6ec      	b.n	8008852 <_scanf_float+0x7a>
 8008a78:	1e6b      	subs	r3, r5, #1
 8008a7a:	2b06      	cmp	r3, #6
 8008a7c:	d825      	bhi.n	8008aca <_scanf_float+0x2f2>
 8008a7e:	2d02      	cmp	r5, #2
 8008a80:	d836      	bhi.n	8008af0 <_scanf_float+0x318>
 8008a82:	455e      	cmp	r6, fp
 8008a84:	f67f aee8 	bls.w	8008858 <_scanf_float+0x80>
 8008a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a90:	463a      	mov	r2, r7
 8008a92:	4640      	mov	r0, r8
 8008a94:	4798      	blx	r3
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	e7f1      	b.n	8008a82 <_scanf_float+0x2aa>
 8008a9e:	9802      	ldr	r0, [sp, #8]
 8008aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aa4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008aa8:	9002      	str	r0, [sp, #8]
 8008aaa:	463a      	mov	r2, r7
 8008aac:	4640      	mov	r0, r8
 8008aae:	4798      	blx	r3
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	6123      	str	r3, [r4, #16]
 8008ab6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008aba:	fa5f fa8a 	uxtb.w	sl, sl
 8008abe:	f1ba 0f02 	cmp.w	sl, #2
 8008ac2:	d1ec      	bne.n	8008a9e <_scanf_float+0x2c6>
 8008ac4:	3d03      	subs	r5, #3
 8008ac6:	b2ed      	uxtb	r5, r5
 8008ac8:	1b76      	subs	r6, r6, r5
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	05da      	lsls	r2, r3, #23
 8008ace:	d52f      	bpl.n	8008b30 <_scanf_float+0x358>
 8008ad0:	055b      	lsls	r3, r3, #21
 8008ad2:	d510      	bpl.n	8008af6 <_scanf_float+0x31e>
 8008ad4:	455e      	cmp	r6, fp
 8008ad6:	f67f aebf 	bls.w	8008858 <_scanf_float+0x80>
 8008ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ae2:	463a      	mov	r2, r7
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	4798      	blx	r3
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	6123      	str	r3, [r4, #16]
 8008aee:	e7f1      	b.n	8008ad4 <_scanf_float+0x2fc>
 8008af0:	46aa      	mov	sl, r5
 8008af2:	9602      	str	r6, [sp, #8]
 8008af4:	e7df      	b.n	8008ab6 <_scanf_float+0x2de>
 8008af6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	2965      	cmp	r1, #101	; 0x65
 8008afe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008b02:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008b06:	6123      	str	r3, [r4, #16]
 8008b08:	d00c      	beq.n	8008b24 <_scanf_float+0x34c>
 8008b0a:	2945      	cmp	r1, #69	; 0x45
 8008b0c:	d00a      	beq.n	8008b24 <_scanf_float+0x34c>
 8008b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b12:	463a      	mov	r2, r7
 8008b14:	4640      	mov	r0, r8
 8008b16:	4798      	blx	r3
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	1eb5      	subs	r5, r6, #2
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b28:	463a      	mov	r2, r7
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	4798      	blx	r3
 8008b2e:	462e      	mov	r6, r5
 8008b30:	6825      	ldr	r5, [r4, #0]
 8008b32:	f015 0510 	ands.w	r5, r5, #16
 8008b36:	d158      	bne.n	8008bea <_scanf_float+0x412>
 8008b38:	7035      	strb	r5, [r6, #0]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b44:	d11c      	bne.n	8008b80 <_scanf_float+0x3a8>
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	454b      	cmp	r3, r9
 8008b4a:	eba3 0209 	sub.w	r2, r3, r9
 8008b4e:	d124      	bne.n	8008b9a <_scanf_float+0x3c2>
 8008b50:	2200      	movs	r2, #0
 8008b52:	4659      	mov	r1, fp
 8008b54:	4640      	mov	r0, r8
 8008b56:	f000 ff93 	bl	8009a80 <_strtod_r>
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	6821      	ldr	r1, [r4, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f011 0f02 	tst.w	r1, #2
 8008b64:	ec57 6b10 	vmov	r6, r7, d0
 8008b68:	f103 0204 	add.w	r2, r3, #4
 8008b6c:	d020      	beq.n	8008bb0 <_scanf_float+0x3d8>
 8008b6e:	9903      	ldr	r1, [sp, #12]
 8008b70:	600a      	str	r2, [r1, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	e9c3 6700 	strd	r6, r7, [r3]
 8008b78:	68e3      	ldr	r3, [r4, #12]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60e3      	str	r3, [r4, #12]
 8008b7e:	e66c      	b.n	800885a <_scanf_float+0x82>
 8008b80:	9b04      	ldr	r3, [sp, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d0e4      	beq.n	8008b50 <_scanf_float+0x378>
 8008b86:	9905      	ldr	r1, [sp, #20]
 8008b88:	230a      	movs	r3, #10
 8008b8a:	462a      	mov	r2, r5
 8008b8c:	3101      	adds	r1, #1
 8008b8e:	4640      	mov	r0, r8
 8008b90:	f000 fffe 	bl	8009b90 <_strtol_r>
 8008b94:	9b04      	ldr	r3, [sp, #16]
 8008b96:	9e05      	ldr	r6, [sp, #20]
 8008b98:	1ac2      	subs	r2, r0, r3
 8008b9a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b9e:	429e      	cmp	r6, r3
 8008ba0:	bf28      	it	cs
 8008ba2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008ba6:	4912      	ldr	r1, [pc, #72]	; (8008bf0 <_scanf_float+0x418>)
 8008ba8:	4630      	mov	r0, r6
 8008baa:	f000 f825 	bl	8008bf8 <siprintf>
 8008bae:	e7cf      	b.n	8008b50 <_scanf_float+0x378>
 8008bb0:	f011 0f04 	tst.w	r1, #4
 8008bb4:	9903      	ldr	r1, [sp, #12]
 8008bb6:	600a      	str	r2, [r1, #0]
 8008bb8:	d1db      	bne.n	8008b72 <_scanf_float+0x39a>
 8008bba:	f8d3 8000 	ldr.w	r8, [r3]
 8008bbe:	ee10 2a10 	vmov	r2, s0
 8008bc2:	ee10 0a10 	vmov	r0, s0
 8008bc6:	463b      	mov	r3, r7
 8008bc8:	4639      	mov	r1, r7
 8008bca:	f7f7 ffaf 	bl	8000b2c <__aeabi_dcmpun>
 8008bce:	b128      	cbz	r0, 8008bdc <_scanf_float+0x404>
 8008bd0:	4808      	ldr	r0, [pc, #32]	; (8008bf4 <_scanf_float+0x41c>)
 8008bd2:	f001 f8c5 	bl	8009d60 <nanf>
 8008bd6:	ed88 0a00 	vstr	s0, [r8]
 8008bda:	e7cd      	b.n	8008b78 <_scanf_float+0x3a0>
 8008bdc:	4630      	mov	r0, r6
 8008bde:	4639      	mov	r1, r7
 8008be0:	f7f8 f802 	bl	8000be8 <__aeabi_d2f>
 8008be4:	f8c8 0000 	str.w	r0, [r8]
 8008be8:	e7c6      	b.n	8008b78 <_scanf_float+0x3a0>
 8008bea:	2500      	movs	r5, #0
 8008bec:	e635      	b.n	800885a <_scanf_float+0x82>
 8008bee:	bf00      	nop
 8008bf0:	0800d13e 	.word	0x0800d13e
 8008bf4:	0800d54f 	.word	0x0800d54f

08008bf8 <siprintf>:
 8008bf8:	b40e      	push	{r1, r2, r3}
 8008bfa:	b500      	push	{lr}
 8008bfc:	b09c      	sub	sp, #112	; 0x70
 8008bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8008c00:	9002      	str	r0, [sp, #8]
 8008c02:	9006      	str	r0, [sp, #24]
 8008c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c08:	4809      	ldr	r0, [pc, #36]	; (8008c30 <siprintf+0x38>)
 8008c0a:	9107      	str	r1, [sp, #28]
 8008c0c:	9104      	str	r1, [sp, #16]
 8008c0e:	4909      	ldr	r1, [pc, #36]	; (8008c34 <siprintf+0x3c>)
 8008c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c14:	9105      	str	r1, [sp, #20]
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	a902      	add	r1, sp, #8
 8008c1c:	f002 fb20 	bl	800b260 <_svfiprintf_r>
 8008c20:	9b02      	ldr	r3, [sp, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	b01c      	add	sp, #112	; 0x70
 8008c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c2c:	b003      	add	sp, #12
 8008c2e:	4770      	bx	lr
 8008c30:	200001d4 	.word	0x200001d4
 8008c34:	ffff0208 	.word	0xffff0208

08008c38 <siscanf>:
 8008c38:	b40e      	push	{r1, r2, r3}
 8008c3a:	b510      	push	{r4, lr}
 8008c3c:	b09f      	sub	sp, #124	; 0x7c
 8008c3e:	ac21      	add	r4, sp, #132	; 0x84
 8008c40:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008c44:	f854 2b04 	ldr.w	r2, [r4], #4
 8008c48:	9201      	str	r2, [sp, #4]
 8008c4a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008c4e:	9004      	str	r0, [sp, #16]
 8008c50:	9008      	str	r0, [sp, #32]
 8008c52:	f7f7 fb0d 	bl	8000270 <strlen>
 8008c56:	4b0c      	ldr	r3, [pc, #48]	; (8008c88 <siscanf+0x50>)
 8008c58:	9005      	str	r0, [sp, #20]
 8008c5a:	9009      	str	r0, [sp, #36]	; 0x24
 8008c5c:	930d      	str	r3, [sp, #52]	; 0x34
 8008c5e:	480b      	ldr	r0, [pc, #44]	; (8008c8c <siscanf+0x54>)
 8008c60:	9a01      	ldr	r2, [sp, #4]
 8008c62:	6800      	ldr	r0, [r0, #0]
 8008c64:	9403      	str	r4, [sp, #12]
 8008c66:	2300      	movs	r3, #0
 8008c68:	9311      	str	r3, [sp, #68]	; 0x44
 8008c6a:	9316      	str	r3, [sp, #88]	; 0x58
 8008c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c70:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008c74:	a904      	add	r1, sp, #16
 8008c76:	4623      	mov	r3, r4
 8008c78:	f002 fc4a 	bl	800b510 <__ssvfiscanf_r>
 8008c7c:	b01f      	add	sp, #124	; 0x7c
 8008c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c82:	b003      	add	sp, #12
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	08008cb3 	.word	0x08008cb3
 8008c8c:	200001d4 	.word	0x200001d4

08008c90 <__sread>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	460c      	mov	r4, r1
 8008c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c98:	f000 fff0 	bl	8009c7c <_read_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	bfab      	itete	ge
 8008ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ca4:	181b      	addge	r3, r3, r0
 8008ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008caa:	bfac      	ite	ge
 8008cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cae:	81a3      	strhlt	r3, [r4, #12]
 8008cb0:	bd10      	pop	{r4, pc}

08008cb2 <__seofread>:
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	4770      	bx	lr

08008cb6 <__swrite>:
 8008cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cba:	461f      	mov	r7, r3
 8008cbc:	898b      	ldrh	r3, [r1, #12]
 8008cbe:	05db      	lsls	r3, r3, #23
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	4616      	mov	r6, r2
 8008cc6:	d505      	bpl.n	8008cd4 <__swrite+0x1e>
 8008cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ccc:	2302      	movs	r3, #2
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f000 ffc2 	bl	8009c58 <_lseek_r>
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	463b      	mov	r3, r7
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cea:	f000 bfd9 	b.w	8009ca0 <_write_r>

08008cee <__sseek>:
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf6:	f000 ffaf 	bl	8009c58 <_lseek_r>
 8008cfa:	1c43      	adds	r3, r0, #1
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	bf15      	itete	ne
 8008d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d0a:	81a3      	strheq	r3, [r4, #12]
 8008d0c:	bf18      	it	ne
 8008d0e:	81a3      	strhne	r3, [r4, #12]
 8008d10:	bd10      	pop	{r4, pc}

08008d12 <__sclose>:
 8008d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d16:	f000 bf8f 	b.w	8009c38 <_close_r>
	...

08008d1c <std>:
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	b510      	push	{r4, lr}
 8008d20:	4604      	mov	r4, r0
 8008d22:	e9c0 3300 	strd	r3, r3, [r0]
 8008d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d2a:	6083      	str	r3, [r0, #8]
 8008d2c:	8181      	strh	r1, [r0, #12]
 8008d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d30:	81c2      	strh	r2, [r0, #14]
 8008d32:	6183      	str	r3, [r0, #24]
 8008d34:	4619      	mov	r1, r3
 8008d36:	2208      	movs	r2, #8
 8008d38:	305c      	adds	r0, #92	; 0x5c
 8008d3a:	f000 ff71 	bl	8009c20 <memset>
 8008d3e:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <std+0x58>)
 8008d40:	6263      	str	r3, [r4, #36]	; 0x24
 8008d42:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <std+0x5c>)
 8008d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d46:	4b0d      	ldr	r3, [pc, #52]	; (8008d7c <std+0x60>)
 8008d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d4a:	4b0d      	ldr	r3, [pc, #52]	; (8008d80 <std+0x64>)
 8008d4c:	6323      	str	r3, [r4, #48]	; 0x30
 8008d4e:	4b0d      	ldr	r3, [pc, #52]	; (8008d84 <std+0x68>)
 8008d50:	6224      	str	r4, [r4, #32]
 8008d52:	429c      	cmp	r4, r3
 8008d54:	d006      	beq.n	8008d64 <std+0x48>
 8008d56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008d5a:	4294      	cmp	r4, r2
 8008d5c:	d002      	beq.n	8008d64 <std+0x48>
 8008d5e:	33d0      	adds	r3, #208	; 0xd0
 8008d60:	429c      	cmp	r4, r3
 8008d62:	d105      	bne.n	8008d70 <std+0x54>
 8008d64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d6c:	f000 bfd4 	b.w	8009d18 <__retarget_lock_init_recursive>
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	bf00      	nop
 8008d74:	08008c91 	.word	0x08008c91
 8008d78:	08008cb7 	.word	0x08008cb7
 8008d7c:	08008cef 	.word	0x08008cef
 8008d80:	08008d13 	.word	0x08008d13
 8008d84:	200077dc 	.word	0x200077dc

08008d88 <stdio_exit_handler>:
 8008d88:	4a02      	ldr	r2, [pc, #8]	; (8008d94 <stdio_exit_handler+0xc>)
 8008d8a:	4903      	ldr	r1, [pc, #12]	; (8008d98 <stdio_exit_handler+0x10>)
 8008d8c:	4803      	ldr	r0, [pc, #12]	; (8008d9c <stdio_exit_handler+0x14>)
 8008d8e:	f000 bf01 	b.w	8009b94 <_fwalk_sglue>
 8008d92:	bf00      	nop
 8008d94:	20000010 	.word	0x20000010
 8008d98:	0800bd91 	.word	0x0800bd91
 8008d9c:	20000188 	.word	0x20000188

08008da0 <cleanup_stdio>:
 8008da0:	6841      	ldr	r1, [r0, #4]
 8008da2:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <cleanup_stdio+0x34>)
 8008da4:	4299      	cmp	r1, r3
 8008da6:	b510      	push	{r4, lr}
 8008da8:	4604      	mov	r4, r0
 8008daa:	d001      	beq.n	8008db0 <cleanup_stdio+0x10>
 8008dac:	f002 fff0 	bl	800bd90 <_fflush_r>
 8008db0:	68a1      	ldr	r1, [r4, #8]
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <cleanup_stdio+0x38>)
 8008db4:	4299      	cmp	r1, r3
 8008db6:	d002      	beq.n	8008dbe <cleanup_stdio+0x1e>
 8008db8:	4620      	mov	r0, r4
 8008dba:	f002 ffe9 	bl	800bd90 <_fflush_r>
 8008dbe:	68e1      	ldr	r1, [r4, #12]
 8008dc0:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <cleanup_stdio+0x3c>)
 8008dc2:	4299      	cmp	r1, r3
 8008dc4:	d004      	beq.n	8008dd0 <cleanup_stdio+0x30>
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dcc:	f002 bfe0 	b.w	800bd90 <_fflush_r>
 8008dd0:	bd10      	pop	{r4, pc}
 8008dd2:	bf00      	nop
 8008dd4:	200077dc 	.word	0x200077dc
 8008dd8:	20007844 	.word	0x20007844
 8008ddc:	200078ac 	.word	0x200078ac

08008de0 <global_stdio_init.part.0>:
 8008de0:	b510      	push	{r4, lr}
 8008de2:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <global_stdio_init.part.0+0x30>)
 8008de4:	4c0b      	ldr	r4, [pc, #44]	; (8008e14 <global_stdio_init.part.0+0x34>)
 8008de6:	4a0c      	ldr	r2, [pc, #48]	; (8008e18 <global_stdio_init.part.0+0x38>)
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	4620      	mov	r0, r4
 8008dec:	2200      	movs	r2, #0
 8008dee:	2104      	movs	r1, #4
 8008df0:	f7ff ff94 	bl	8008d1c <std>
 8008df4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008df8:	2201      	movs	r2, #1
 8008dfa:	2109      	movs	r1, #9
 8008dfc:	f7ff ff8e 	bl	8008d1c <std>
 8008e00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008e04:	2202      	movs	r2, #2
 8008e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e0a:	2112      	movs	r1, #18
 8008e0c:	f7ff bf86 	b.w	8008d1c <std>
 8008e10:	20007914 	.word	0x20007914
 8008e14:	200077dc 	.word	0x200077dc
 8008e18:	08008d89 	.word	0x08008d89

08008e1c <__sfp_lock_acquire>:
 8008e1c:	4801      	ldr	r0, [pc, #4]	; (8008e24 <__sfp_lock_acquire+0x8>)
 8008e1e:	f000 bf7c 	b.w	8009d1a <__retarget_lock_acquire_recursive>
 8008e22:	bf00      	nop
 8008e24:	2000791d 	.word	0x2000791d

08008e28 <__sfp_lock_release>:
 8008e28:	4801      	ldr	r0, [pc, #4]	; (8008e30 <__sfp_lock_release+0x8>)
 8008e2a:	f000 bf77 	b.w	8009d1c <__retarget_lock_release_recursive>
 8008e2e:	bf00      	nop
 8008e30:	2000791d 	.word	0x2000791d

08008e34 <__sinit>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	4604      	mov	r4, r0
 8008e38:	f7ff fff0 	bl	8008e1c <__sfp_lock_acquire>
 8008e3c:	6a23      	ldr	r3, [r4, #32]
 8008e3e:	b11b      	cbz	r3, 8008e48 <__sinit+0x14>
 8008e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e44:	f7ff bff0 	b.w	8008e28 <__sfp_lock_release>
 8008e48:	4b04      	ldr	r3, [pc, #16]	; (8008e5c <__sinit+0x28>)
 8008e4a:	6223      	str	r3, [r4, #32]
 8008e4c:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <__sinit+0x2c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1f5      	bne.n	8008e40 <__sinit+0xc>
 8008e54:	f7ff ffc4 	bl	8008de0 <global_stdio_init.part.0>
 8008e58:	e7f2      	b.n	8008e40 <__sinit+0xc>
 8008e5a:	bf00      	nop
 8008e5c:	08008da1 	.word	0x08008da1
 8008e60:	20007914 	.word	0x20007914

08008e64 <sulp>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	4604      	mov	r4, r0
 8008e68:	460d      	mov	r5, r1
 8008e6a:	ec45 4b10 	vmov	d0, r4, r5
 8008e6e:	4616      	mov	r6, r2
 8008e70:	f003 fb2e 	bl	800c4d0 <__ulp>
 8008e74:	ec51 0b10 	vmov	r0, r1, d0
 8008e78:	b17e      	cbz	r6, 8008e9a <sulp+0x36>
 8008e7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	dd09      	ble.n	8008e9a <sulp+0x36>
 8008e86:	051b      	lsls	r3, r3, #20
 8008e88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008e8c:	2400      	movs	r4, #0
 8008e8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008e92:	4622      	mov	r2, r4
 8008e94:	462b      	mov	r3, r5
 8008e96:	f7f7 fbaf 	bl	80005f8 <__aeabi_dmul>
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	0000      	movs	r0, r0
	...

08008ea0 <_strtod_l>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	ed2d 8b02 	vpush	{d8}
 8008ea8:	b09b      	sub	sp, #108	; 0x6c
 8008eaa:	4604      	mov	r4, r0
 8008eac:	9213      	str	r2, [sp, #76]	; 0x4c
 8008eae:	2200      	movs	r2, #0
 8008eb0:	9216      	str	r2, [sp, #88]	; 0x58
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	f04f 0800 	mov.w	r8, #0
 8008eb8:	f04f 0900 	mov.w	r9, #0
 8008ebc:	460a      	mov	r2, r1
 8008ebe:	9215      	str	r2, [sp, #84]	; 0x54
 8008ec0:	7811      	ldrb	r1, [r2, #0]
 8008ec2:	292b      	cmp	r1, #43	; 0x2b
 8008ec4:	d04c      	beq.n	8008f60 <_strtod_l+0xc0>
 8008ec6:	d83a      	bhi.n	8008f3e <_strtod_l+0x9e>
 8008ec8:	290d      	cmp	r1, #13
 8008eca:	d834      	bhi.n	8008f36 <_strtod_l+0x96>
 8008ecc:	2908      	cmp	r1, #8
 8008ece:	d834      	bhi.n	8008f3a <_strtod_l+0x9a>
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	d03d      	beq.n	8008f50 <_strtod_l+0xb0>
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ed8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008eda:	7832      	ldrb	r2, [r6, #0]
 8008edc:	2a30      	cmp	r2, #48	; 0x30
 8008ede:	f040 80b4 	bne.w	800904a <_strtod_l+0x1aa>
 8008ee2:	7872      	ldrb	r2, [r6, #1]
 8008ee4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008ee8:	2a58      	cmp	r2, #88	; 0x58
 8008eea:	d170      	bne.n	8008fce <_strtod_l+0x12e>
 8008eec:	9302      	str	r3, [sp, #8]
 8008eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	ab16      	add	r3, sp, #88	; 0x58
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	4a8e      	ldr	r2, [pc, #568]	; (8009130 <_strtod_l+0x290>)
 8008ef8:	ab17      	add	r3, sp, #92	; 0x5c
 8008efa:	a915      	add	r1, sp, #84	; 0x54
 8008efc:	4620      	mov	r0, r4
 8008efe:	f001 fe65 	bl	800abcc <__gethex>
 8008f02:	f010 070f 	ands.w	r7, r0, #15
 8008f06:	4605      	mov	r5, r0
 8008f08:	d005      	beq.n	8008f16 <_strtod_l+0x76>
 8008f0a:	2f06      	cmp	r7, #6
 8008f0c:	d12a      	bne.n	8008f64 <_strtod_l+0xc4>
 8008f0e:	3601      	adds	r6, #1
 8008f10:	2300      	movs	r3, #0
 8008f12:	9615      	str	r6, [sp, #84]	; 0x54
 8008f14:	930a      	str	r3, [sp, #40]	; 0x28
 8008f16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f040 857f 	bne.w	8009a1c <_strtod_l+0xb7c>
 8008f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f20:	b1db      	cbz	r3, 8008f5a <_strtod_l+0xba>
 8008f22:	4642      	mov	r2, r8
 8008f24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f28:	ec43 2b10 	vmov	d0, r2, r3
 8008f2c:	b01b      	add	sp, #108	; 0x6c
 8008f2e:	ecbd 8b02 	vpop	{d8}
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f36:	2920      	cmp	r1, #32
 8008f38:	d1cc      	bne.n	8008ed4 <_strtod_l+0x34>
 8008f3a:	3201      	adds	r2, #1
 8008f3c:	e7bf      	b.n	8008ebe <_strtod_l+0x1e>
 8008f3e:	292d      	cmp	r1, #45	; 0x2d
 8008f40:	d1c8      	bne.n	8008ed4 <_strtod_l+0x34>
 8008f42:	2101      	movs	r1, #1
 8008f44:	910a      	str	r1, [sp, #40]	; 0x28
 8008f46:	1c51      	adds	r1, r2, #1
 8008f48:	9115      	str	r1, [sp, #84]	; 0x54
 8008f4a:	7852      	ldrb	r2, [r2, #1]
 8008f4c:	2a00      	cmp	r2, #0
 8008f4e:	d1c3      	bne.n	8008ed8 <_strtod_l+0x38>
 8008f50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f52:	9515      	str	r5, [sp, #84]	; 0x54
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 855f 	bne.w	8009a18 <_strtod_l+0xb78>
 8008f5a:	4642      	mov	r2, r8
 8008f5c:	464b      	mov	r3, r9
 8008f5e:	e7e3      	b.n	8008f28 <_strtod_l+0x88>
 8008f60:	2100      	movs	r1, #0
 8008f62:	e7ef      	b.n	8008f44 <_strtod_l+0xa4>
 8008f64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f66:	b13a      	cbz	r2, 8008f78 <_strtod_l+0xd8>
 8008f68:	2135      	movs	r1, #53	; 0x35
 8008f6a:	a818      	add	r0, sp, #96	; 0x60
 8008f6c:	f003 fbad 	bl	800c6ca <__copybits>
 8008f70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008f72:	4620      	mov	r0, r4
 8008f74:	f002 ff80 	bl	800be78 <_Bfree>
 8008f78:	3f01      	subs	r7, #1
 8008f7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f7c:	2f04      	cmp	r7, #4
 8008f7e:	d806      	bhi.n	8008f8e <_strtod_l+0xee>
 8008f80:	e8df f007 	tbb	[pc, r7]
 8008f84:	201d0314 	.word	0x201d0314
 8008f88:	14          	.byte	0x14
 8008f89:	00          	.byte	0x00
 8008f8a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008f8e:	05e9      	lsls	r1, r5, #23
 8008f90:	bf48      	it	mi
 8008f92:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008f96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f9a:	0d1b      	lsrs	r3, r3, #20
 8008f9c:	051b      	lsls	r3, r3, #20
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1b9      	bne.n	8008f16 <_strtod_l+0x76>
 8008fa2:	f000 fe8f 	bl	8009cc4 <__errno>
 8008fa6:	2322      	movs	r3, #34	; 0x22
 8008fa8:	6003      	str	r3, [r0, #0]
 8008faa:	e7b4      	b.n	8008f16 <_strtod_l+0x76>
 8008fac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008fb0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008fb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008fb8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008fbc:	e7e7      	b.n	8008f8e <_strtod_l+0xee>
 8008fbe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009138 <_strtod_l+0x298>
 8008fc2:	e7e4      	b.n	8008f8e <_strtod_l+0xee>
 8008fc4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008fc8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008fcc:	e7df      	b.n	8008f8e <_strtod_l+0xee>
 8008fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	9215      	str	r2, [sp, #84]	; 0x54
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	2b30      	cmp	r3, #48	; 0x30
 8008fd8:	d0f9      	beq.n	8008fce <_strtod_l+0x12e>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d09b      	beq.n	8008f16 <_strtod_l+0x76>
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f04f 0a00 	mov.w	sl, #0
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008fee:	46d3      	mov	fp, sl
 8008ff0:	220a      	movs	r2, #10
 8008ff2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008ff4:	7806      	ldrb	r6, [r0, #0]
 8008ff6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008ffa:	b2d9      	uxtb	r1, r3
 8008ffc:	2909      	cmp	r1, #9
 8008ffe:	d926      	bls.n	800904e <_strtod_l+0x1ae>
 8009000:	494c      	ldr	r1, [pc, #304]	; (8009134 <_strtod_l+0x294>)
 8009002:	2201      	movs	r2, #1
 8009004:	f000 fde4 	bl	8009bd0 <strncmp>
 8009008:	2800      	cmp	r0, #0
 800900a:	d030      	beq.n	800906e <_strtod_l+0x1ce>
 800900c:	2000      	movs	r0, #0
 800900e:	4632      	mov	r2, r6
 8009010:	9005      	str	r0, [sp, #20]
 8009012:	465e      	mov	r6, fp
 8009014:	4603      	mov	r3, r0
 8009016:	2a65      	cmp	r2, #101	; 0x65
 8009018:	d001      	beq.n	800901e <_strtod_l+0x17e>
 800901a:	2a45      	cmp	r2, #69	; 0x45
 800901c:	d113      	bne.n	8009046 <_strtod_l+0x1a6>
 800901e:	b91e      	cbnz	r6, 8009028 <_strtod_l+0x188>
 8009020:	9a04      	ldr	r2, [sp, #16]
 8009022:	4302      	orrs	r2, r0
 8009024:	d094      	beq.n	8008f50 <_strtod_l+0xb0>
 8009026:	2600      	movs	r6, #0
 8009028:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800902a:	1c6a      	adds	r2, r5, #1
 800902c:	9215      	str	r2, [sp, #84]	; 0x54
 800902e:	786a      	ldrb	r2, [r5, #1]
 8009030:	2a2b      	cmp	r2, #43	; 0x2b
 8009032:	d074      	beq.n	800911e <_strtod_l+0x27e>
 8009034:	2a2d      	cmp	r2, #45	; 0x2d
 8009036:	d078      	beq.n	800912a <_strtod_l+0x28a>
 8009038:	f04f 0c00 	mov.w	ip, #0
 800903c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009040:	2909      	cmp	r1, #9
 8009042:	d97f      	bls.n	8009144 <_strtod_l+0x2a4>
 8009044:	9515      	str	r5, [sp, #84]	; 0x54
 8009046:	2700      	movs	r7, #0
 8009048:	e09e      	b.n	8009188 <_strtod_l+0x2e8>
 800904a:	2300      	movs	r3, #0
 800904c:	e7c8      	b.n	8008fe0 <_strtod_l+0x140>
 800904e:	f1bb 0f08 	cmp.w	fp, #8
 8009052:	bfd8      	it	le
 8009054:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009056:	f100 0001 	add.w	r0, r0, #1
 800905a:	bfda      	itte	le
 800905c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009060:	9309      	strle	r3, [sp, #36]	; 0x24
 8009062:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009066:	f10b 0b01 	add.w	fp, fp, #1
 800906a:	9015      	str	r0, [sp, #84]	; 0x54
 800906c:	e7c1      	b.n	8008ff2 <_strtod_l+0x152>
 800906e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	9215      	str	r2, [sp, #84]	; 0x54
 8009074:	785a      	ldrb	r2, [r3, #1]
 8009076:	f1bb 0f00 	cmp.w	fp, #0
 800907a:	d037      	beq.n	80090ec <_strtod_l+0x24c>
 800907c:	9005      	str	r0, [sp, #20]
 800907e:	465e      	mov	r6, fp
 8009080:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009084:	2b09      	cmp	r3, #9
 8009086:	d912      	bls.n	80090ae <_strtod_l+0x20e>
 8009088:	2301      	movs	r3, #1
 800908a:	e7c4      	b.n	8009016 <_strtod_l+0x176>
 800908c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	9215      	str	r2, [sp, #84]	; 0x54
 8009092:	785a      	ldrb	r2, [r3, #1]
 8009094:	3001      	adds	r0, #1
 8009096:	2a30      	cmp	r2, #48	; 0x30
 8009098:	d0f8      	beq.n	800908c <_strtod_l+0x1ec>
 800909a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800909e:	2b08      	cmp	r3, #8
 80090a0:	f200 84c1 	bhi.w	8009a26 <_strtod_l+0xb86>
 80090a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090a6:	9005      	str	r0, [sp, #20]
 80090a8:	2000      	movs	r0, #0
 80090aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80090ac:	4606      	mov	r6, r0
 80090ae:	3a30      	subs	r2, #48	; 0x30
 80090b0:	f100 0301 	add.w	r3, r0, #1
 80090b4:	d014      	beq.n	80090e0 <_strtod_l+0x240>
 80090b6:	9905      	ldr	r1, [sp, #20]
 80090b8:	4419      	add	r1, r3
 80090ba:	9105      	str	r1, [sp, #20]
 80090bc:	4633      	mov	r3, r6
 80090be:	eb00 0c06 	add.w	ip, r0, r6
 80090c2:	210a      	movs	r1, #10
 80090c4:	4563      	cmp	r3, ip
 80090c6:	d113      	bne.n	80090f0 <_strtod_l+0x250>
 80090c8:	1833      	adds	r3, r6, r0
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	f106 0601 	add.w	r6, r6, #1
 80090d0:	4406      	add	r6, r0
 80090d2:	dc1a      	bgt.n	800910a <_strtod_l+0x26a>
 80090d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090d6:	230a      	movs	r3, #10
 80090d8:	fb03 2301 	mla	r3, r3, r1, r2
 80090dc:	9309      	str	r3, [sp, #36]	; 0x24
 80090de:	2300      	movs	r3, #0
 80090e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80090e2:	1c51      	adds	r1, r2, #1
 80090e4:	9115      	str	r1, [sp, #84]	; 0x54
 80090e6:	7852      	ldrb	r2, [r2, #1]
 80090e8:	4618      	mov	r0, r3
 80090ea:	e7c9      	b.n	8009080 <_strtod_l+0x1e0>
 80090ec:	4658      	mov	r0, fp
 80090ee:	e7d2      	b.n	8009096 <_strtod_l+0x1f6>
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	f103 0301 	add.w	r3, r3, #1
 80090f6:	dc03      	bgt.n	8009100 <_strtod_l+0x260>
 80090f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80090fa:	434f      	muls	r7, r1
 80090fc:	9709      	str	r7, [sp, #36]	; 0x24
 80090fe:	e7e1      	b.n	80090c4 <_strtod_l+0x224>
 8009100:	2b10      	cmp	r3, #16
 8009102:	bfd8      	it	le
 8009104:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009108:	e7dc      	b.n	80090c4 <_strtod_l+0x224>
 800910a:	2e10      	cmp	r6, #16
 800910c:	bfdc      	itt	le
 800910e:	230a      	movle	r3, #10
 8009110:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009114:	e7e3      	b.n	80090de <_strtod_l+0x23e>
 8009116:	2300      	movs	r3, #0
 8009118:	9305      	str	r3, [sp, #20]
 800911a:	2301      	movs	r3, #1
 800911c:	e780      	b.n	8009020 <_strtod_l+0x180>
 800911e:	f04f 0c00 	mov.w	ip, #0
 8009122:	1caa      	adds	r2, r5, #2
 8009124:	9215      	str	r2, [sp, #84]	; 0x54
 8009126:	78aa      	ldrb	r2, [r5, #2]
 8009128:	e788      	b.n	800903c <_strtod_l+0x19c>
 800912a:	f04f 0c01 	mov.w	ip, #1
 800912e:	e7f8      	b.n	8009122 <_strtod_l+0x282>
 8009130:	0800d148 	.word	0x0800d148
 8009134:	0800d143 	.word	0x0800d143
 8009138:	7ff00000 	.word	0x7ff00000
 800913c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800913e:	1c51      	adds	r1, r2, #1
 8009140:	9115      	str	r1, [sp, #84]	; 0x54
 8009142:	7852      	ldrb	r2, [r2, #1]
 8009144:	2a30      	cmp	r2, #48	; 0x30
 8009146:	d0f9      	beq.n	800913c <_strtod_l+0x29c>
 8009148:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800914c:	2908      	cmp	r1, #8
 800914e:	f63f af7a 	bhi.w	8009046 <_strtod_l+0x1a6>
 8009152:	3a30      	subs	r2, #48	; 0x30
 8009154:	9208      	str	r2, [sp, #32]
 8009156:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009158:	920c      	str	r2, [sp, #48]	; 0x30
 800915a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800915c:	1c57      	adds	r7, r2, #1
 800915e:	9715      	str	r7, [sp, #84]	; 0x54
 8009160:	7852      	ldrb	r2, [r2, #1]
 8009162:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009166:	f1be 0f09 	cmp.w	lr, #9
 800916a:	d938      	bls.n	80091de <_strtod_l+0x33e>
 800916c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800916e:	1a7f      	subs	r7, r7, r1
 8009170:	2f08      	cmp	r7, #8
 8009172:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009176:	dc03      	bgt.n	8009180 <_strtod_l+0x2e0>
 8009178:	9908      	ldr	r1, [sp, #32]
 800917a:	428f      	cmp	r7, r1
 800917c:	bfa8      	it	ge
 800917e:	460f      	movge	r7, r1
 8009180:	f1bc 0f00 	cmp.w	ip, #0
 8009184:	d000      	beq.n	8009188 <_strtod_l+0x2e8>
 8009186:	427f      	negs	r7, r7
 8009188:	2e00      	cmp	r6, #0
 800918a:	d14f      	bne.n	800922c <_strtod_l+0x38c>
 800918c:	9904      	ldr	r1, [sp, #16]
 800918e:	4301      	orrs	r1, r0
 8009190:	f47f aec1 	bne.w	8008f16 <_strtod_l+0x76>
 8009194:	2b00      	cmp	r3, #0
 8009196:	f47f aedb 	bne.w	8008f50 <_strtod_l+0xb0>
 800919a:	2a69      	cmp	r2, #105	; 0x69
 800919c:	d029      	beq.n	80091f2 <_strtod_l+0x352>
 800919e:	dc26      	bgt.n	80091ee <_strtod_l+0x34e>
 80091a0:	2a49      	cmp	r2, #73	; 0x49
 80091a2:	d026      	beq.n	80091f2 <_strtod_l+0x352>
 80091a4:	2a4e      	cmp	r2, #78	; 0x4e
 80091a6:	f47f aed3 	bne.w	8008f50 <_strtod_l+0xb0>
 80091aa:	499b      	ldr	r1, [pc, #620]	; (8009418 <_strtod_l+0x578>)
 80091ac:	a815      	add	r0, sp, #84	; 0x54
 80091ae:	f001 ff4d 	bl	800b04c <__match>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f43f aecc 	beq.w	8008f50 <_strtod_l+0xb0>
 80091b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b28      	cmp	r3, #40	; 0x28
 80091be:	d12f      	bne.n	8009220 <_strtod_l+0x380>
 80091c0:	4996      	ldr	r1, [pc, #600]	; (800941c <_strtod_l+0x57c>)
 80091c2:	aa18      	add	r2, sp, #96	; 0x60
 80091c4:	a815      	add	r0, sp, #84	; 0x54
 80091c6:	f001 ff55 	bl	800b074 <__hexnan>
 80091ca:	2805      	cmp	r0, #5
 80091cc:	d128      	bne.n	8009220 <_strtod_l+0x380>
 80091ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80091d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80091d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80091dc:	e69b      	b.n	8008f16 <_strtod_l+0x76>
 80091de:	9f08      	ldr	r7, [sp, #32]
 80091e0:	210a      	movs	r1, #10
 80091e2:	fb01 2107 	mla	r1, r1, r7, r2
 80091e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80091ea:	9208      	str	r2, [sp, #32]
 80091ec:	e7b5      	b.n	800915a <_strtod_l+0x2ba>
 80091ee:	2a6e      	cmp	r2, #110	; 0x6e
 80091f0:	e7d9      	b.n	80091a6 <_strtod_l+0x306>
 80091f2:	498b      	ldr	r1, [pc, #556]	; (8009420 <_strtod_l+0x580>)
 80091f4:	a815      	add	r0, sp, #84	; 0x54
 80091f6:	f001 ff29 	bl	800b04c <__match>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	f43f aea8 	beq.w	8008f50 <_strtod_l+0xb0>
 8009200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009202:	4988      	ldr	r1, [pc, #544]	; (8009424 <_strtod_l+0x584>)
 8009204:	3b01      	subs	r3, #1
 8009206:	a815      	add	r0, sp, #84	; 0x54
 8009208:	9315      	str	r3, [sp, #84]	; 0x54
 800920a:	f001 ff1f 	bl	800b04c <__match>
 800920e:	b910      	cbnz	r0, 8009216 <_strtod_l+0x376>
 8009210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009212:	3301      	adds	r3, #1
 8009214:	9315      	str	r3, [sp, #84]	; 0x54
 8009216:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009434 <_strtod_l+0x594>
 800921a:	f04f 0800 	mov.w	r8, #0
 800921e:	e67a      	b.n	8008f16 <_strtod_l+0x76>
 8009220:	4881      	ldr	r0, [pc, #516]	; (8009428 <_strtod_l+0x588>)
 8009222:	f000 fd95 	bl	8009d50 <nan>
 8009226:	ec59 8b10 	vmov	r8, r9, d0
 800922a:	e674      	b.n	8008f16 <_strtod_l+0x76>
 800922c:	9b05      	ldr	r3, [sp, #20]
 800922e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009230:	1afb      	subs	r3, r7, r3
 8009232:	f1bb 0f00 	cmp.w	fp, #0
 8009236:	bf08      	it	eq
 8009238:	46b3      	moveq	fp, r6
 800923a:	2e10      	cmp	r6, #16
 800923c:	9308      	str	r3, [sp, #32]
 800923e:	4635      	mov	r5, r6
 8009240:	bfa8      	it	ge
 8009242:	2510      	movge	r5, #16
 8009244:	f7f7 f95e 	bl	8000504 <__aeabi_ui2d>
 8009248:	2e09      	cmp	r6, #9
 800924a:	4680      	mov	r8, r0
 800924c:	4689      	mov	r9, r1
 800924e:	dd13      	ble.n	8009278 <_strtod_l+0x3d8>
 8009250:	4b76      	ldr	r3, [pc, #472]	; (800942c <_strtod_l+0x58c>)
 8009252:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009256:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800925a:	f7f7 f9cd 	bl	80005f8 <__aeabi_dmul>
 800925e:	4680      	mov	r8, r0
 8009260:	4650      	mov	r0, sl
 8009262:	4689      	mov	r9, r1
 8009264:	f7f7 f94e 	bl	8000504 <__aeabi_ui2d>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4640      	mov	r0, r8
 800926e:	4649      	mov	r1, r9
 8009270:	f7f7 f80c 	bl	800028c <__adddf3>
 8009274:	4680      	mov	r8, r0
 8009276:	4689      	mov	r9, r1
 8009278:	2e0f      	cmp	r6, #15
 800927a:	dc38      	bgt.n	80092ee <_strtod_l+0x44e>
 800927c:	9b08      	ldr	r3, [sp, #32]
 800927e:	2b00      	cmp	r3, #0
 8009280:	f43f ae49 	beq.w	8008f16 <_strtod_l+0x76>
 8009284:	dd24      	ble.n	80092d0 <_strtod_l+0x430>
 8009286:	2b16      	cmp	r3, #22
 8009288:	dc0b      	bgt.n	80092a2 <_strtod_l+0x402>
 800928a:	4968      	ldr	r1, [pc, #416]	; (800942c <_strtod_l+0x58c>)
 800928c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	f7f7 f9ae 	bl	80005f8 <__aeabi_dmul>
 800929c:	4680      	mov	r8, r0
 800929e:	4689      	mov	r9, r1
 80092a0:	e639      	b.n	8008f16 <_strtod_l+0x76>
 80092a2:	9a08      	ldr	r2, [sp, #32]
 80092a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80092a8:	4293      	cmp	r3, r2
 80092aa:	db20      	blt.n	80092ee <_strtod_l+0x44e>
 80092ac:	4c5f      	ldr	r4, [pc, #380]	; (800942c <_strtod_l+0x58c>)
 80092ae:	f1c6 060f 	rsb	r6, r6, #15
 80092b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80092b6:	4642      	mov	r2, r8
 80092b8:	464b      	mov	r3, r9
 80092ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092be:	f7f7 f99b 	bl	80005f8 <__aeabi_dmul>
 80092c2:	9b08      	ldr	r3, [sp, #32]
 80092c4:	1b9e      	subs	r6, r3, r6
 80092c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80092ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80092ce:	e7e3      	b.n	8009298 <_strtod_l+0x3f8>
 80092d0:	9b08      	ldr	r3, [sp, #32]
 80092d2:	3316      	adds	r3, #22
 80092d4:	db0b      	blt.n	80092ee <_strtod_l+0x44e>
 80092d6:	9b05      	ldr	r3, [sp, #20]
 80092d8:	1bdf      	subs	r7, r3, r7
 80092da:	4b54      	ldr	r3, [pc, #336]	; (800942c <_strtod_l+0x58c>)
 80092dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80092e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e4:	4640      	mov	r0, r8
 80092e6:	4649      	mov	r1, r9
 80092e8:	f7f7 fab0 	bl	800084c <__aeabi_ddiv>
 80092ec:	e7d6      	b.n	800929c <_strtod_l+0x3fc>
 80092ee:	9b08      	ldr	r3, [sp, #32]
 80092f0:	1b75      	subs	r5, r6, r5
 80092f2:	441d      	add	r5, r3
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	dd70      	ble.n	80093da <_strtod_l+0x53a>
 80092f8:	f015 030f 	ands.w	r3, r5, #15
 80092fc:	d00a      	beq.n	8009314 <_strtod_l+0x474>
 80092fe:	494b      	ldr	r1, [pc, #300]	; (800942c <_strtod_l+0x58c>)
 8009300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009304:	4642      	mov	r2, r8
 8009306:	464b      	mov	r3, r9
 8009308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800930c:	f7f7 f974 	bl	80005f8 <__aeabi_dmul>
 8009310:	4680      	mov	r8, r0
 8009312:	4689      	mov	r9, r1
 8009314:	f035 050f 	bics.w	r5, r5, #15
 8009318:	d04d      	beq.n	80093b6 <_strtod_l+0x516>
 800931a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800931e:	dd22      	ble.n	8009366 <_strtod_l+0x4c6>
 8009320:	2500      	movs	r5, #0
 8009322:	46ab      	mov	fp, r5
 8009324:	9509      	str	r5, [sp, #36]	; 0x24
 8009326:	9505      	str	r5, [sp, #20]
 8009328:	2322      	movs	r3, #34	; 0x22
 800932a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009434 <_strtod_l+0x594>
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	f04f 0800 	mov.w	r8, #0
 8009334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009336:	2b00      	cmp	r3, #0
 8009338:	f43f aded 	beq.w	8008f16 <_strtod_l+0x76>
 800933c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800933e:	4620      	mov	r0, r4
 8009340:	f002 fd9a 	bl	800be78 <_Bfree>
 8009344:	9905      	ldr	r1, [sp, #20]
 8009346:	4620      	mov	r0, r4
 8009348:	f002 fd96 	bl	800be78 <_Bfree>
 800934c:	4659      	mov	r1, fp
 800934e:	4620      	mov	r0, r4
 8009350:	f002 fd92 	bl	800be78 <_Bfree>
 8009354:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009356:	4620      	mov	r0, r4
 8009358:	f002 fd8e 	bl	800be78 <_Bfree>
 800935c:	4629      	mov	r1, r5
 800935e:	4620      	mov	r0, r4
 8009360:	f002 fd8a 	bl	800be78 <_Bfree>
 8009364:	e5d7      	b.n	8008f16 <_strtod_l+0x76>
 8009366:	4b32      	ldr	r3, [pc, #200]	; (8009430 <_strtod_l+0x590>)
 8009368:	9304      	str	r3, [sp, #16]
 800936a:	2300      	movs	r3, #0
 800936c:	112d      	asrs	r5, r5, #4
 800936e:	4640      	mov	r0, r8
 8009370:	4649      	mov	r1, r9
 8009372:	469a      	mov	sl, r3
 8009374:	2d01      	cmp	r5, #1
 8009376:	dc21      	bgt.n	80093bc <_strtod_l+0x51c>
 8009378:	b10b      	cbz	r3, 800937e <_strtod_l+0x4de>
 800937a:	4680      	mov	r8, r0
 800937c:	4689      	mov	r9, r1
 800937e:	492c      	ldr	r1, [pc, #176]	; (8009430 <_strtod_l+0x590>)
 8009380:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009384:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009388:	4642      	mov	r2, r8
 800938a:	464b      	mov	r3, r9
 800938c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009390:	f7f7 f932 	bl	80005f8 <__aeabi_dmul>
 8009394:	4b27      	ldr	r3, [pc, #156]	; (8009434 <_strtod_l+0x594>)
 8009396:	460a      	mov	r2, r1
 8009398:	400b      	ands	r3, r1
 800939a:	4927      	ldr	r1, [pc, #156]	; (8009438 <_strtod_l+0x598>)
 800939c:	428b      	cmp	r3, r1
 800939e:	4680      	mov	r8, r0
 80093a0:	d8be      	bhi.n	8009320 <_strtod_l+0x480>
 80093a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80093a6:	428b      	cmp	r3, r1
 80093a8:	bf86      	itte	hi
 80093aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800943c <_strtod_l+0x59c>
 80093ae:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80093b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80093b6:	2300      	movs	r3, #0
 80093b8:	9304      	str	r3, [sp, #16]
 80093ba:	e07b      	b.n	80094b4 <_strtod_l+0x614>
 80093bc:	07ea      	lsls	r2, r5, #31
 80093be:	d505      	bpl.n	80093cc <_strtod_l+0x52c>
 80093c0:	9b04      	ldr	r3, [sp, #16]
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f7 f917 	bl	80005f8 <__aeabi_dmul>
 80093ca:	2301      	movs	r3, #1
 80093cc:	9a04      	ldr	r2, [sp, #16]
 80093ce:	3208      	adds	r2, #8
 80093d0:	f10a 0a01 	add.w	sl, sl, #1
 80093d4:	106d      	asrs	r5, r5, #1
 80093d6:	9204      	str	r2, [sp, #16]
 80093d8:	e7cc      	b.n	8009374 <_strtod_l+0x4d4>
 80093da:	d0ec      	beq.n	80093b6 <_strtod_l+0x516>
 80093dc:	426d      	negs	r5, r5
 80093de:	f015 020f 	ands.w	r2, r5, #15
 80093e2:	d00a      	beq.n	80093fa <_strtod_l+0x55a>
 80093e4:	4b11      	ldr	r3, [pc, #68]	; (800942c <_strtod_l+0x58c>)
 80093e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ea:	4640      	mov	r0, r8
 80093ec:	4649      	mov	r1, r9
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	f7f7 fa2b 	bl	800084c <__aeabi_ddiv>
 80093f6:	4680      	mov	r8, r0
 80093f8:	4689      	mov	r9, r1
 80093fa:	112d      	asrs	r5, r5, #4
 80093fc:	d0db      	beq.n	80093b6 <_strtod_l+0x516>
 80093fe:	2d1f      	cmp	r5, #31
 8009400:	dd1e      	ble.n	8009440 <_strtod_l+0x5a0>
 8009402:	2500      	movs	r5, #0
 8009404:	46ab      	mov	fp, r5
 8009406:	9509      	str	r5, [sp, #36]	; 0x24
 8009408:	9505      	str	r5, [sp, #20]
 800940a:	2322      	movs	r3, #34	; 0x22
 800940c:	f04f 0800 	mov.w	r8, #0
 8009410:	f04f 0900 	mov.w	r9, #0
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	e78d      	b.n	8009334 <_strtod_l+0x494>
 8009418:	0800d119 	.word	0x0800d119
 800941c:	0800d15c 	.word	0x0800d15c
 8009420:	0800d111 	.word	0x0800d111
 8009424:	0800d2a4 	.word	0x0800d2a4
 8009428:	0800d54f 	.word	0x0800d54f
 800942c:	0800d440 	.word	0x0800d440
 8009430:	0800d418 	.word	0x0800d418
 8009434:	7ff00000 	.word	0x7ff00000
 8009438:	7ca00000 	.word	0x7ca00000
 800943c:	7fefffff 	.word	0x7fefffff
 8009440:	f015 0310 	ands.w	r3, r5, #16
 8009444:	bf18      	it	ne
 8009446:	236a      	movne	r3, #106	; 0x6a
 8009448:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80097ec <_strtod_l+0x94c>
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	4640      	mov	r0, r8
 8009450:	4649      	mov	r1, r9
 8009452:	2300      	movs	r3, #0
 8009454:	07ea      	lsls	r2, r5, #31
 8009456:	d504      	bpl.n	8009462 <_strtod_l+0x5c2>
 8009458:	e9da 2300 	ldrd	r2, r3, [sl]
 800945c:	f7f7 f8cc 	bl	80005f8 <__aeabi_dmul>
 8009460:	2301      	movs	r3, #1
 8009462:	106d      	asrs	r5, r5, #1
 8009464:	f10a 0a08 	add.w	sl, sl, #8
 8009468:	d1f4      	bne.n	8009454 <_strtod_l+0x5b4>
 800946a:	b10b      	cbz	r3, 8009470 <_strtod_l+0x5d0>
 800946c:	4680      	mov	r8, r0
 800946e:	4689      	mov	r9, r1
 8009470:	9b04      	ldr	r3, [sp, #16]
 8009472:	b1bb      	cbz	r3, 80094a4 <_strtod_l+0x604>
 8009474:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009478:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800947c:	2b00      	cmp	r3, #0
 800947e:	4649      	mov	r1, r9
 8009480:	dd10      	ble.n	80094a4 <_strtod_l+0x604>
 8009482:	2b1f      	cmp	r3, #31
 8009484:	f340 811e 	ble.w	80096c4 <_strtod_l+0x824>
 8009488:	2b34      	cmp	r3, #52	; 0x34
 800948a:	bfde      	ittt	le
 800948c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009490:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009494:	4093      	lslle	r3, r2
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	bfcc      	ite	gt
 800949c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80094a0:	ea03 0901 	andle.w	r9, r3, r1
 80094a4:	2200      	movs	r2, #0
 80094a6:	2300      	movs	r3, #0
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f7 fb0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d1a6      	bne.n	8009402 <_strtod_l+0x562>
 80094b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094ba:	4633      	mov	r3, r6
 80094bc:	465a      	mov	r2, fp
 80094be:	4620      	mov	r0, r4
 80094c0:	f002 fd42 	bl	800bf48 <__s2b>
 80094c4:	9009      	str	r0, [sp, #36]	; 0x24
 80094c6:	2800      	cmp	r0, #0
 80094c8:	f43f af2a 	beq.w	8009320 <_strtod_l+0x480>
 80094cc:	9a08      	ldr	r2, [sp, #32]
 80094ce:	9b05      	ldr	r3, [sp, #20]
 80094d0:	2a00      	cmp	r2, #0
 80094d2:	eba3 0307 	sub.w	r3, r3, r7
 80094d6:	bfa8      	it	ge
 80094d8:	2300      	movge	r3, #0
 80094da:	930c      	str	r3, [sp, #48]	; 0x30
 80094dc:	2500      	movs	r5, #0
 80094de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80094e2:	9312      	str	r3, [sp, #72]	; 0x48
 80094e4:	46ab      	mov	fp, r5
 80094e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e8:	4620      	mov	r0, r4
 80094ea:	6859      	ldr	r1, [r3, #4]
 80094ec:	f002 fc84 	bl	800bdf8 <_Balloc>
 80094f0:	9005      	str	r0, [sp, #20]
 80094f2:	2800      	cmp	r0, #0
 80094f4:	f43f af18 	beq.w	8009328 <_strtod_l+0x488>
 80094f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fa:	691a      	ldr	r2, [r3, #16]
 80094fc:	3202      	adds	r2, #2
 80094fe:	f103 010c 	add.w	r1, r3, #12
 8009502:	0092      	lsls	r2, r2, #2
 8009504:	300c      	adds	r0, #12
 8009506:	f000 fc0a 	bl	8009d1e <memcpy>
 800950a:	ec49 8b10 	vmov	d0, r8, r9
 800950e:	aa18      	add	r2, sp, #96	; 0x60
 8009510:	a917      	add	r1, sp, #92	; 0x5c
 8009512:	4620      	mov	r0, r4
 8009514:	f003 f84c 	bl	800c5b0 <__d2b>
 8009518:	ec49 8b18 	vmov	d8, r8, r9
 800951c:	9016      	str	r0, [sp, #88]	; 0x58
 800951e:	2800      	cmp	r0, #0
 8009520:	f43f af02 	beq.w	8009328 <_strtod_l+0x488>
 8009524:	2101      	movs	r1, #1
 8009526:	4620      	mov	r0, r4
 8009528:	f002 fda6 	bl	800c078 <__i2b>
 800952c:	4683      	mov	fp, r0
 800952e:	2800      	cmp	r0, #0
 8009530:	f43f aefa 	beq.w	8009328 <_strtod_l+0x488>
 8009534:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009536:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009538:	2e00      	cmp	r6, #0
 800953a:	bfab      	itete	ge
 800953c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800953e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009540:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009542:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009546:	bfac      	ite	ge
 8009548:	eb06 0a03 	addge.w	sl, r6, r3
 800954c:	1b9f      	sublt	r7, r3, r6
 800954e:	9b04      	ldr	r3, [sp, #16]
 8009550:	1af6      	subs	r6, r6, r3
 8009552:	4416      	add	r6, r2
 8009554:	4ba0      	ldr	r3, [pc, #640]	; (80097d8 <_strtod_l+0x938>)
 8009556:	3e01      	subs	r6, #1
 8009558:	429e      	cmp	r6, r3
 800955a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800955e:	f280 80c4 	bge.w	80096ea <_strtod_l+0x84a>
 8009562:	1b9b      	subs	r3, r3, r6
 8009564:	2b1f      	cmp	r3, #31
 8009566:	eba2 0203 	sub.w	r2, r2, r3
 800956a:	f04f 0101 	mov.w	r1, #1
 800956e:	f300 80b0 	bgt.w	80096d2 <_strtod_l+0x832>
 8009572:	fa01 f303 	lsl.w	r3, r1, r3
 8009576:	930e      	str	r3, [sp, #56]	; 0x38
 8009578:	2300      	movs	r3, #0
 800957a:	930d      	str	r3, [sp, #52]	; 0x34
 800957c:	eb0a 0602 	add.w	r6, sl, r2
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	45b2      	cmp	sl, r6
 8009584:	4417      	add	r7, r2
 8009586:	441f      	add	r7, r3
 8009588:	4653      	mov	r3, sl
 800958a:	bfa8      	it	ge
 800958c:	4633      	movge	r3, r6
 800958e:	42bb      	cmp	r3, r7
 8009590:	bfa8      	it	ge
 8009592:	463b      	movge	r3, r7
 8009594:	2b00      	cmp	r3, #0
 8009596:	bfc2      	ittt	gt
 8009598:	1af6      	subgt	r6, r6, r3
 800959a:	1aff      	subgt	r7, r7, r3
 800959c:	ebaa 0a03 	subgt.w	sl, sl, r3
 80095a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	dd17      	ble.n	80095d6 <_strtod_l+0x736>
 80095a6:	4659      	mov	r1, fp
 80095a8:	461a      	mov	r2, r3
 80095aa:	4620      	mov	r0, r4
 80095ac:	f002 fe24 	bl	800c1f8 <__pow5mult>
 80095b0:	4683      	mov	fp, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f43f aeb8 	beq.w	8009328 <_strtod_l+0x488>
 80095b8:	4601      	mov	r1, r0
 80095ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80095bc:	4620      	mov	r0, r4
 80095be:	f002 fd71 	bl	800c0a4 <__multiply>
 80095c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80095c4:	2800      	cmp	r0, #0
 80095c6:	f43f aeaf 	beq.w	8009328 <_strtod_l+0x488>
 80095ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095cc:	4620      	mov	r0, r4
 80095ce:	f002 fc53 	bl	800be78 <_Bfree>
 80095d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095d4:	9316      	str	r3, [sp, #88]	; 0x58
 80095d6:	2e00      	cmp	r6, #0
 80095d8:	f300 808c 	bgt.w	80096f4 <_strtod_l+0x854>
 80095dc:	9b08      	ldr	r3, [sp, #32]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	dd08      	ble.n	80095f4 <_strtod_l+0x754>
 80095e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80095e4:	9905      	ldr	r1, [sp, #20]
 80095e6:	4620      	mov	r0, r4
 80095e8:	f002 fe06 	bl	800c1f8 <__pow5mult>
 80095ec:	9005      	str	r0, [sp, #20]
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f43f ae9a 	beq.w	8009328 <_strtod_l+0x488>
 80095f4:	2f00      	cmp	r7, #0
 80095f6:	dd08      	ble.n	800960a <_strtod_l+0x76a>
 80095f8:	9905      	ldr	r1, [sp, #20]
 80095fa:	463a      	mov	r2, r7
 80095fc:	4620      	mov	r0, r4
 80095fe:	f002 fe55 	bl	800c2ac <__lshift>
 8009602:	9005      	str	r0, [sp, #20]
 8009604:	2800      	cmp	r0, #0
 8009606:	f43f ae8f 	beq.w	8009328 <_strtod_l+0x488>
 800960a:	f1ba 0f00 	cmp.w	sl, #0
 800960e:	dd08      	ble.n	8009622 <_strtod_l+0x782>
 8009610:	4659      	mov	r1, fp
 8009612:	4652      	mov	r2, sl
 8009614:	4620      	mov	r0, r4
 8009616:	f002 fe49 	bl	800c2ac <__lshift>
 800961a:	4683      	mov	fp, r0
 800961c:	2800      	cmp	r0, #0
 800961e:	f43f ae83 	beq.w	8009328 <_strtod_l+0x488>
 8009622:	9a05      	ldr	r2, [sp, #20]
 8009624:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009626:	4620      	mov	r0, r4
 8009628:	f002 fec8 	bl	800c3bc <__mdiff>
 800962c:	4605      	mov	r5, r0
 800962e:	2800      	cmp	r0, #0
 8009630:	f43f ae7a 	beq.w	8009328 <_strtod_l+0x488>
 8009634:	68c3      	ldr	r3, [r0, #12]
 8009636:	930b      	str	r3, [sp, #44]	; 0x2c
 8009638:	2300      	movs	r3, #0
 800963a:	60c3      	str	r3, [r0, #12]
 800963c:	4659      	mov	r1, fp
 800963e:	f002 fea1 	bl	800c384 <__mcmp>
 8009642:	2800      	cmp	r0, #0
 8009644:	da60      	bge.n	8009708 <_strtod_l+0x868>
 8009646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009648:	ea53 0308 	orrs.w	r3, r3, r8
 800964c:	f040 8084 	bne.w	8009758 <_strtod_l+0x8b8>
 8009650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009654:	2b00      	cmp	r3, #0
 8009656:	d17f      	bne.n	8009758 <_strtod_l+0x8b8>
 8009658:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800965c:	0d1b      	lsrs	r3, r3, #20
 800965e:	051b      	lsls	r3, r3, #20
 8009660:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009664:	d978      	bls.n	8009758 <_strtod_l+0x8b8>
 8009666:	696b      	ldr	r3, [r5, #20]
 8009668:	b913      	cbnz	r3, 8009670 <_strtod_l+0x7d0>
 800966a:	692b      	ldr	r3, [r5, #16]
 800966c:	2b01      	cmp	r3, #1
 800966e:	dd73      	ble.n	8009758 <_strtod_l+0x8b8>
 8009670:	4629      	mov	r1, r5
 8009672:	2201      	movs	r2, #1
 8009674:	4620      	mov	r0, r4
 8009676:	f002 fe19 	bl	800c2ac <__lshift>
 800967a:	4659      	mov	r1, fp
 800967c:	4605      	mov	r5, r0
 800967e:	f002 fe81 	bl	800c384 <__mcmp>
 8009682:	2800      	cmp	r0, #0
 8009684:	dd68      	ble.n	8009758 <_strtod_l+0x8b8>
 8009686:	9904      	ldr	r1, [sp, #16]
 8009688:	4a54      	ldr	r2, [pc, #336]	; (80097dc <_strtod_l+0x93c>)
 800968a:	464b      	mov	r3, r9
 800968c:	2900      	cmp	r1, #0
 800968e:	f000 8084 	beq.w	800979a <_strtod_l+0x8fa>
 8009692:	ea02 0109 	and.w	r1, r2, r9
 8009696:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800969a:	dc7e      	bgt.n	800979a <_strtod_l+0x8fa>
 800969c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80096a0:	f77f aeb3 	ble.w	800940a <_strtod_l+0x56a>
 80096a4:	4b4e      	ldr	r3, [pc, #312]	; (80097e0 <_strtod_l+0x940>)
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	2200      	movs	r2, #0
 80096ac:	f7f6 ffa4 	bl	80005f8 <__aeabi_dmul>
 80096b0:	4b4a      	ldr	r3, [pc, #296]	; (80097dc <_strtod_l+0x93c>)
 80096b2:	400b      	ands	r3, r1
 80096b4:	4680      	mov	r8, r0
 80096b6:	4689      	mov	r9, r1
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f47f ae3f 	bne.w	800933c <_strtod_l+0x49c>
 80096be:	2322      	movs	r3, #34	; 0x22
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	e63b      	b.n	800933c <_strtod_l+0x49c>
 80096c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096c8:	fa02 f303 	lsl.w	r3, r2, r3
 80096cc:	ea03 0808 	and.w	r8, r3, r8
 80096d0:	e6e8      	b.n	80094a4 <_strtod_l+0x604>
 80096d2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80096d6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80096da:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80096de:	36e2      	adds	r6, #226	; 0xe2
 80096e0:	fa01 f306 	lsl.w	r3, r1, r6
 80096e4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80096e8:	e748      	b.n	800957c <_strtod_l+0x6dc>
 80096ea:	2100      	movs	r1, #0
 80096ec:	2301      	movs	r3, #1
 80096ee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80096f2:	e743      	b.n	800957c <_strtod_l+0x6dc>
 80096f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80096f6:	4632      	mov	r2, r6
 80096f8:	4620      	mov	r0, r4
 80096fa:	f002 fdd7 	bl	800c2ac <__lshift>
 80096fe:	9016      	str	r0, [sp, #88]	; 0x58
 8009700:	2800      	cmp	r0, #0
 8009702:	f47f af6b 	bne.w	80095dc <_strtod_l+0x73c>
 8009706:	e60f      	b.n	8009328 <_strtod_l+0x488>
 8009708:	46ca      	mov	sl, r9
 800970a:	d171      	bne.n	80097f0 <_strtod_l+0x950>
 800970c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800970e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009712:	b352      	cbz	r2, 800976a <_strtod_l+0x8ca>
 8009714:	4a33      	ldr	r2, [pc, #204]	; (80097e4 <_strtod_l+0x944>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d12a      	bne.n	8009770 <_strtod_l+0x8d0>
 800971a:	9b04      	ldr	r3, [sp, #16]
 800971c:	4641      	mov	r1, r8
 800971e:	b1fb      	cbz	r3, 8009760 <_strtod_l+0x8c0>
 8009720:	4b2e      	ldr	r3, [pc, #184]	; (80097dc <_strtod_l+0x93c>)
 8009722:	ea09 0303 	and.w	r3, r9, r3
 8009726:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800972a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800972e:	d81a      	bhi.n	8009766 <_strtod_l+0x8c6>
 8009730:	0d1b      	lsrs	r3, r3, #20
 8009732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009736:	fa02 f303 	lsl.w	r3, r2, r3
 800973a:	4299      	cmp	r1, r3
 800973c:	d118      	bne.n	8009770 <_strtod_l+0x8d0>
 800973e:	4b2a      	ldr	r3, [pc, #168]	; (80097e8 <_strtod_l+0x948>)
 8009740:	459a      	cmp	sl, r3
 8009742:	d102      	bne.n	800974a <_strtod_l+0x8aa>
 8009744:	3101      	adds	r1, #1
 8009746:	f43f adef 	beq.w	8009328 <_strtod_l+0x488>
 800974a:	4b24      	ldr	r3, [pc, #144]	; (80097dc <_strtod_l+0x93c>)
 800974c:	ea0a 0303 	and.w	r3, sl, r3
 8009750:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009754:	f04f 0800 	mov.w	r8, #0
 8009758:	9b04      	ldr	r3, [sp, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1a2      	bne.n	80096a4 <_strtod_l+0x804>
 800975e:	e5ed      	b.n	800933c <_strtod_l+0x49c>
 8009760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009764:	e7e9      	b.n	800973a <_strtod_l+0x89a>
 8009766:	4613      	mov	r3, r2
 8009768:	e7e7      	b.n	800973a <_strtod_l+0x89a>
 800976a:	ea53 0308 	orrs.w	r3, r3, r8
 800976e:	d08a      	beq.n	8009686 <_strtod_l+0x7e6>
 8009770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009772:	b1e3      	cbz	r3, 80097ae <_strtod_l+0x90e>
 8009774:	ea13 0f0a 	tst.w	r3, sl
 8009778:	d0ee      	beq.n	8009758 <_strtod_l+0x8b8>
 800977a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977c:	9a04      	ldr	r2, [sp, #16]
 800977e:	4640      	mov	r0, r8
 8009780:	4649      	mov	r1, r9
 8009782:	b1c3      	cbz	r3, 80097b6 <_strtod_l+0x916>
 8009784:	f7ff fb6e 	bl	8008e64 <sulp>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	ec51 0b18 	vmov	r0, r1, d8
 8009790:	f7f6 fd7c 	bl	800028c <__adddf3>
 8009794:	4680      	mov	r8, r0
 8009796:	4689      	mov	r9, r1
 8009798:	e7de      	b.n	8009758 <_strtod_l+0x8b8>
 800979a:	4013      	ands	r3, r2
 800979c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80097a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80097a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80097a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80097ac:	e7d4      	b.n	8009758 <_strtod_l+0x8b8>
 80097ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097b0:	ea13 0f08 	tst.w	r3, r8
 80097b4:	e7e0      	b.n	8009778 <_strtod_l+0x8d8>
 80097b6:	f7ff fb55 	bl	8008e64 <sulp>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	ec51 0b18 	vmov	r0, r1, d8
 80097c2:	f7f6 fd61 	bl	8000288 <__aeabi_dsub>
 80097c6:	2200      	movs	r2, #0
 80097c8:	2300      	movs	r3, #0
 80097ca:	4680      	mov	r8, r0
 80097cc:	4689      	mov	r9, r1
 80097ce:	f7f7 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d0c0      	beq.n	8009758 <_strtod_l+0x8b8>
 80097d6:	e618      	b.n	800940a <_strtod_l+0x56a>
 80097d8:	fffffc02 	.word	0xfffffc02
 80097dc:	7ff00000 	.word	0x7ff00000
 80097e0:	39500000 	.word	0x39500000
 80097e4:	000fffff 	.word	0x000fffff
 80097e8:	7fefffff 	.word	0x7fefffff
 80097ec:	0800d170 	.word	0x0800d170
 80097f0:	4659      	mov	r1, fp
 80097f2:	4628      	mov	r0, r5
 80097f4:	f002 ff36 	bl	800c664 <__ratio>
 80097f8:	ec57 6b10 	vmov	r6, r7, d0
 80097fc:	ee10 0a10 	vmov	r0, s0
 8009800:	2200      	movs	r2, #0
 8009802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009806:	4639      	mov	r1, r7
 8009808:	f7f7 f972 	bl	8000af0 <__aeabi_dcmple>
 800980c:	2800      	cmp	r0, #0
 800980e:	d071      	beq.n	80098f4 <_strtod_l+0xa54>
 8009810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d17c      	bne.n	8009910 <_strtod_l+0xa70>
 8009816:	f1b8 0f00 	cmp.w	r8, #0
 800981a:	d15a      	bne.n	80098d2 <_strtod_l+0xa32>
 800981c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009820:	2b00      	cmp	r3, #0
 8009822:	d15d      	bne.n	80098e0 <_strtod_l+0xa40>
 8009824:	4b90      	ldr	r3, [pc, #576]	; (8009a68 <_strtod_l+0xbc8>)
 8009826:	2200      	movs	r2, #0
 8009828:	4630      	mov	r0, r6
 800982a:	4639      	mov	r1, r7
 800982c:	f7f7 f956 	bl	8000adc <__aeabi_dcmplt>
 8009830:	2800      	cmp	r0, #0
 8009832:	d15c      	bne.n	80098ee <_strtod_l+0xa4e>
 8009834:	4630      	mov	r0, r6
 8009836:	4639      	mov	r1, r7
 8009838:	4b8c      	ldr	r3, [pc, #560]	; (8009a6c <_strtod_l+0xbcc>)
 800983a:	2200      	movs	r2, #0
 800983c:	f7f6 fedc 	bl	80005f8 <__aeabi_dmul>
 8009840:	4606      	mov	r6, r0
 8009842:	460f      	mov	r7, r1
 8009844:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009848:	9606      	str	r6, [sp, #24]
 800984a:	9307      	str	r3, [sp, #28]
 800984c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009850:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009854:	4b86      	ldr	r3, [pc, #536]	; (8009a70 <_strtod_l+0xbd0>)
 8009856:	ea0a 0303 	and.w	r3, sl, r3
 800985a:	930d      	str	r3, [sp, #52]	; 0x34
 800985c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800985e:	4b85      	ldr	r3, [pc, #532]	; (8009a74 <_strtod_l+0xbd4>)
 8009860:	429a      	cmp	r2, r3
 8009862:	f040 8090 	bne.w	8009986 <_strtod_l+0xae6>
 8009866:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800986a:	ec49 8b10 	vmov	d0, r8, r9
 800986e:	f002 fe2f 	bl	800c4d0 <__ulp>
 8009872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009876:	ec51 0b10 	vmov	r0, r1, d0
 800987a:	f7f6 febd 	bl	80005f8 <__aeabi_dmul>
 800987e:	4642      	mov	r2, r8
 8009880:	464b      	mov	r3, r9
 8009882:	f7f6 fd03 	bl	800028c <__adddf3>
 8009886:	460b      	mov	r3, r1
 8009888:	4979      	ldr	r1, [pc, #484]	; (8009a70 <_strtod_l+0xbd0>)
 800988a:	4a7b      	ldr	r2, [pc, #492]	; (8009a78 <_strtod_l+0xbd8>)
 800988c:	4019      	ands	r1, r3
 800988e:	4291      	cmp	r1, r2
 8009890:	4680      	mov	r8, r0
 8009892:	d944      	bls.n	800991e <_strtod_l+0xa7e>
 8009894:	ee18 2a90 	vmov	r2, s17
 8009898:	4b78      	ldr	r3, [pc, #480]	; (8009a7c <_strtod_l+0xbdc>)
 800989a:	429a      	cmp	r2, r3
 800989c:	d104      	bne.n	80098a8 <_strtod_l+0xa08>
 800989e:	ee18 3a10 	vmov	r3, s16
 80098a2:	3301      	adds	r3, #1
 80098a4:	f43f ad40 	beq.w	8009328 <_strtod_l+0x488>
 80098a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009a7c <_strtod_l+0xbdc>
 80098ac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80098b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098b2:	4620      	mov	r0, r4
 80098b4:	f002 fae0 	bl	800be78 <_Bfree>
 80098b8:	9905      	ldr	r1, [sp, #20]
 80098ba:	4620      	mov	r0, r4
 80098bc:	f002 fadc 	bl	800be78 <_Bfree>
 80098c0:	4659      	mov	r1, fp
 80098c2:	4620      	mov	r0, r4
 80098c4:	f002 fad8 	bl	800be78 <_Bfree>
 80098c8:	4629      	mov	r1, r5
 80098ca:	4620      	mov	r0, r4
 80098cc:	f002 fad4 	bl	800be78 <_Bfree>
 80098d0:	e609      	b.n	80094e6 <_strtod_l+0x646>
 80098d2:	f1b8 0f01 	cmp.w	r8, #1
 80098d6:	d103      	bne.n	80098e0 <_strtod_l+0xa40>
 80098d8:	f1b9 0f00 	cmp.w	r9, #0
 80098dc:	f43f ad95 	beq.w	800940a <_strtod_l+0x56a>
 80098e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009a38 <_strtod_l+0xb98>
 80098e4:	4f60      	ldr	r7, [pc, #384]	; (8009a68 <_strtod_l+0xbc8>)
 80098e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098ea:	2600      	movs	r6, #0
 80098ec:	e7ae      	b.n	800984c <_strtod_l+0x9ac>
 80098ee:	4f5f      	ldr	r7, [pc, #380]	; (8009a6c <_strtod_l+0xbcc>)
 80098f0:	2600      	movs	r6, #0
 80098f2:	e7a7      	b.n	8009844 <_strtod_l+0x9a4>
 80098f4:	4b5d      	ldr	r3, [pc, #372]	; (8009a6c <_strtod_l+0xbcc>)
 80098f6:	4630      	mov	r0, r6
 80098f8:	4639      	mov	r1, r7
 80098fa:	2200      	movs	r2, #0
 80098fc:	f7f6 fe7c 	bl	80005f8 <__aeabi_dmul>
 8009900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009902:	4606      	mov	r6, r0
 8009904:	460f      	mov	r7, r1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d09c      	beq.n	8009844 <_strtod_l+0x9a4>
 800990a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800990e:	e79d      	b.n	800984c <_strtod_l+0x9ac>
 8009910:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009a40 <_strtod_l+0xba0>
 8009914:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009918:	ec57 6b17 	vmov	r6, r7, d7
 800991c:	e796      	b.n	800984c <_strtod_l+0x9ac>
 800991e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009922:	9b04      	ldr	r3, [sp, #16]
 8009924:	46ca      	mov	sl, r9
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1c2      	bne.n	80098b0 <_strtod_l+0xa10>
 800992a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800992e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009930:	0d1b      	lsrs	r3, r3, #20
 8009932:	051b      	lsls	r3, r3, #20
 8009934:	429a      	cmp	r2, r3
 8009936:	d1bb      	bne.n	80098b0 <_strtod_l+0xa10>
 8009938:	4630      	mov	r0, r6
 800993a:	4639      	mov	r1, r7
 800993c:	f7f7 f9bc 	bl	8000cb8 <__aeabi_d2lz>
 8009940:	f7f6 fe2c 	bl	800059c <__aeabi_l2d>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4630      	mov	r0, r6
 800994a:	4639      	mov	r1, r7
 800994c:	f7f6 fc9c 	bl	8000288 <__aeabi_dsub>
 8009950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009952:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009956:	ea43 0308 	orr.w	r3, r3, r8
 800995a:	4313      	orrs	r3, r2
 800995c:	4606      	mov	r6, r0
 800995e:	460f      	mov	r7, r1
 8009960:	d054      	beq.n	8009a0c <_strtod_l+0xb6c>
 8009962:	a339      	add	r3, pc, #228	; (adr r3, 8009a48 <_strtod_l+0xba8>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f7f7 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	f47f ace5 	bne.w	800933c <_strtod_l+0x49c>
 8009972:	a337      	add	r3, pc, #220	; (adr r3, 8009a50 <_strtod_l+0xbb0>)
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f7 f8cc 	bl	8000b18 <__aeabi_dcmpgt>
 8009980:	2800      	cmp	r0, #0
 8009982:	d095      	beq.n	80098b0 <_strtod_l+0xa10>
 8009984:	e4da      	b.n	800933c <_strtod_l+0x49c>
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	b333      	cbz	r3, 80099d8 <_strtod_l+0xb38>
 800998a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800998c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009990:	d822      	bhi.n	80099d8 <_strtod_l+0xb38>
 8009992:	a331      	add	r3, pc, #196	; (adr r3, 8009a58 <_strtod_l+0xbb8>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	4630      	mov	r0, r6
 800999a:	4639      	mov	r1, r7
 800999c:	f7f7 f8a8 	bl	8000af0 <__aeabi_dcmple>
 80099a0:	b1a0      	cbz	r0, 80099cc <_strtod_l+0xb2c>
 80099a2:	4639      	mov	r1, r7
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7f7 f8ff 	bl	8000ba8 <__aeabi_d2uiz>
 80099aa:	2801      	cmp	r0, #1
 80099ac:	bf38      	it	cc
 80099ae:	2001      	movcc	r0, #1
 80099b0:	f7f6 fda8 	bl	8000504 <__aeabi_ui2d>
 80099b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	bb23      	cbnz	r3, 8009a06 <_strtod_l+0xb66>
 80099bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099c0:	9010      	str	r0, [sp, #64]	; 0x40
 80099c2:	9311      	str	r3, [sp, #68]	; 0x44
 80099c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80099cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80099d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80099dc:	eeb0 0a48 	vmov.f32	s0, s16
 80099e0:	eef0 0a68 	vmov.f32	s1, s17
 80099e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80099e8:	f002 fd72 	bl	800c4d0 <__ulp>
 80099ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80099f0:	ec53 2b10 	vmov	r2, r3, d0
 80099f4:	f7f6 fe00 	bl	80005f8 <__aeabi_dmul>
 80099f8:	ec53 2b18 	vmov	r2, r3, d8
 80099fc:	f7f6 fc46 	bl	800028c <__adddf3>
 8009a00:	4680      	mov	r8, r0
 8009a02:	4689      	mov	r9, r1
 8009a04:	e78d      	b.n	8009922 <_strtod_l+0xa82>
 8009a06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009a0a:	e7db      	b.n	80099c4 <_strtod_l+0xb24>
 8009a0c:	a314      	add	r3, pc, #80	; (adr r3, 8009a60 <_strtod_l+0xbc0>)
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f7f7 f863 	bl	8000adc <__aeabi_dcmplt>
 8009a16:	e7b3      	b.n	8009980 <_strtod_l+0xae0>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a20:	6013      	str	r3, [r2, #0]
 8009a22:	f7ff ba7c 	b.w	8008f1e <_strtod_l+0x7e>
 8009a26:	2a65      	cmp	r2, #101	; 0x65
 8009a28:	f43f ab75 	beq.w	8009116 <_strtod_l+0x276>
 8009a2c:	2a45      	cmp	r2, #69	; 0x45
 8009a2e:	f43f ab72 	beq.w	8009116 <_strtod_l+0x276>
 8009a32:	2301      	movs	r3, #1
 8009a34:	f7ff bbaa 	b.w	800918c <_strtod_l+0x2ec>
 8009a38:	00000000 	.word	0x00000000
 8009a3c:	bff00000 	.word	0xbff00000
 8009a40:	00000000 	.word	0x00000000
 8009a44:	3ff00000 	.word	0x3ff00000
 8009a48:	94a03595 	.word	0x94a03595
 8009a4c:	3fdfffff 	.word	0x3fdfffff
 8009a50:	35afe535 	.word	0x35afe535
 8009a54:	3fe00000 	.word	0x3fe00000
 8009a58:	ffc00000 	.word	0xffc00000
 8009a5c:	41dfffff 	.word	0x41dfffff
 8009a60:	94a03595 	.word	0x94a03595
 8009a64:	3fcfffff 	.word	0x3fcfffff
 8009a68:	3ff00000 	.word	0x3ff00000
 8009a6c:	3fe00000 	.word	0x3fe00000
 8009a70:	7ff00000 	.word	0x7ff00000
 8009a74:	7fe00000 	.word	0x7fe00000
 8009a78:	7c9fffff 	.word	0x7c9fffff
 8009a7c:	7fefffff 	.word	0x7fefffff

08009a80 <_strtod_r>:
 8009a80:	4b01      	ldr	r3, [pc, #4]	; (8009a88 <_strtod_r+0x8>)
 8009a82:	f7ff ba0d 	b.w	8008ea0 <_strtod_l>
 8009a86:	bf00      	nop
 8009a88:	2000001c 	.word	0x2000001c

08009a8c <_strtol_l.constprop.0>:
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a92:	d001      	beq.n	8009a98 <_strtol_l.constprop.0+0xc>
 8009a94:	2b24      	cmp	r3, #36	; 0x24
 8009a96:	d906      	bls.n	8009aa6 <_strtol_l.constprop.0+0x1a>
 8009a98:	f000 f914 	bl	8009cc4 <__errno>
 8009a9c:	2316      	movs	r3, #22
 8009a9e:	6003      	str	r3, [r0, #0]
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009b8c <_strtol_l.constprop.0+0x100>
 8009aaa:	460d      	mov	r5, r1
 8009aac:	462e      	mov	r6, r5
 8009aae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ab2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009ab6:	f017 0708 	ands.w	r7, r7, #8
 8009aba:	d1f7      	bne.n	8009aac <_strtol_l.constprop.0+0x20>
 8009abc:	2c2d      	cmp	r4, #45	; 0x2d
 8009abe:	d132      	bne.n	8009b26 <_strtol_l.constprop.0+0x9a>
 8009ac0:	782c      	ldrb	r4, [r5, #0]
 8009ac2:	2701      	movs	r7, #1
 8009ac4:	1cb5      	adds	r5, r6, #2
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d05b      	beq.n	8009b82 <_strtol_l.constprop.0+0xf6>
 8009aca:	2b10      	cmp	r3, #16
 8009acc:	d109      	bne.n	8009ae2 <_strtol_l.constprop.0+0x56>
 8009ace:	2c30      	cmp	r4, #48	; 0x30
 8009ad0:	d107      	bne.n	8009ae2 <_strtol_l.constprop.0+0x56>
 8009ad2:	782c      	ldrb	r4, [r5, #0]
 8009ad4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ad8:	2c58      	cmp	r4, #88	; 0x58
 8009ada:	d14d      	bne.n	8009b78 <_strtol_l.constprop.0+0xec>
 8009adc:	786c      	ldrb	r4, [r5, #1]
 8009ade:	2310      	movs	r3, #16
 8009ae0:	3502      	adds	r5, #2
 8009ae2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009ae6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009aea:	f04f 0e00 	mov.w	lr, #0
 8009aee:	fbb8 f9f3 	udiv	r9, r8, r3
 8009af2:	4676      	mov	r6, lr
 8009af4:	fb03 8a19 	mls	sl, r3, r9, r8
 8009af8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009afc:	f1bc 0f09 	cmp.w	ip, #9
 8009b00:	d816      	bhi.n	8009b30 <_strtol_l.constprop.0+0xa4>
 8009b02:	4664      	mov	r4, ip
 8009b04:	42a3      	cmp	r3, r4
 8009b06:	dd24      	ble.n	8009b52 <_strtol_l.constprop.0+0xc6>
 8009b08:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009b0c:	d008      	beq.n	8009b20 <_strtol_l.constprop.0+0x94>
 8009b0e:	45b1      	cmp	r9, r6
 8009b10:	d31c      	bcc.n	8009b4c <_strtol_l.constprop.0+0xc0>
 8009b12:	d101      	bne.n	8009b18 <_strtol_l.constprop.0+0x8c>
 8009b14:	45a2      	cmp	sl, r4
 8009b16:	db19      	blt.n	8009b4c <_strtol_l.constprop.0+0xc0>
 8009b18:	fb06 4603 	mla	r6, r6, r3, r4
 8009b1c:	f04f 0e01 	mov.w	lr, #1
 8009b20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b24:	e7e8      	b.n	8009af8 <_strtol_l.constprop.0+0x6c>
 8009b26:	2c2b      	cmp	r4, #43	; 0x2b
 8009b28:	bf04      	itt	eq
 8009b2a:	782c      	ldrbeq	r4, [r5, #0]
 8009b2c:	1cb5      	addeq	r5, r6, #2
 8009b2e:	e7ca      	b.n	8009ac6 <_strtol_l.constprop.0+0x3a>
 8009b30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009b34:	f1bc 0f19 	cmp.w	ip, #25
 8009b38:	d801      	bhi.n	8009b3e <_strtol_l.constprop.0+0xb2>
 8009b3a:	3c37      	subs	r4, #55	; 0x37
 8009b3c:	e7e2      	b.n	8009b04 <_strtol_l.constprop.0+0x78>
 8009b3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009b42:	f1bc 0f19 	cmp.w	ip, #25
 8009b46:	d804      	bhi.n	8009b52 <_strtol_l.constprop.0+0xc6>
 8009b48:	3c57      	subs	r4, #87	; 0x57
 8009b4a:	e7db      	b.n	8009b04 <_strtol_l.constprop.0+0x78>
 8009b4c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8009b50:	e7e6      	b.n	8009b20 <_strtol_l.constprop.0+0x94>
 8009b52:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009b56:	d105      	bne.n	8009b64 <_strtol_l.constprop.0+0xd8>
 8009b58:	2322      	movs	r3, #34	; 0x22
 8009b5a:	6003      	str	r3, [r0, #0]
 8009b5c:	4646      	mov	r6, r8
 8009b5e:	b942      	cbnz	r2, 8009b72 <_strtol_l.constprop.0+0xe6>
 8009b60:	4630      	mov	r0, r6
 8009b62:	e79e      	b.n	8009aa2 <_strtol_l.constprop.0+0x16>
 8009b64:	b107      	cbz	r7, 8009b68 <_strtol_l.constprop.0+0xdc>
 8009b66:	4276      	negs	r6, r6
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	d0f9      	beq.n	8009b60 <_strtol_l.constprop.0+0xd4>
 8009b6c:	f1be 0f00 	cmp.w	lr, #0
 8009b70:	d000      	beq.n	8009b74 <_strtol_l.constprop.0+0xe8>
 8009b72:	1e69      	subs	r1, r5, #1
 8009b74:	6011      	str	r1, [r2, #0]
 8009b76:	e7f3      	b.n	8009b60 <_strtol_l.constprop.0+0xd4>
 8009b78:	2430      	movs	r4, #48	; 0x30
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1b1      	bne.n	8009ae2 <_strtol_l.constprop.0+0x56>
 8009b7e:	2308      	movs	r3, #8
 8009b80:	e7af      	b.n	8009ae2 <_strtol_l.constprop.0+0x56>
 8009b82:	2c30      	cmp	r4, #48	; 0x30
 8009b84:	d0a5      	beq.n	8009ad2 <_strtol_l.constprop.0+0x46>
 8009b86:	230a      	movs	r3, #10
 8009b88:	e7ab      	b.n	8009ae2 <_strtol_l.constprop.0+0x56>
 8009b8a:	bf00      	nop
 8009b8c:	0800d1a1 	.word	0x0800d1a1

08009b90 <_strtol_r>:
 8009b90:	f7ff bf7c 	b.w	8009a8c <_strtol_l.constprop.0>

08009b94 <_fwalk_sglue>:
 8009b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b98:	4607      	mov	r7, r0
 8009b9a:	4688      	mov	r8, r1
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ba8:	d505      	bpl.n	8009bb6 <_fwalk_sglue+0x22>
 8009baa:	6824      	ldr	r4, [r4, #0]
 8009bac:	2c00      	cmp	r4, #0
 8009bae:	d1f7      	bne.n	8009ba0 <_fwalk_sglue+0xc>
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb6:	89ab      	ldrh	r3, [r5, #12]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d907      	bls.n	8009bcc <_fwalk_sglue+0x38>
 8009bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	d003      	beq.n	8009bcc <_fwalk_sglue+0x38>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	47c0      	blx	r8
 8009bca:	4306      	orrs	r6, r0
 8009bcc:	3568      	adds	r5, #104	; 0x68
 8009bce:	e7e9      	b.n	8009ba4 <_fwalk_sglue+0x10>

08009bd0 <strncmp>:
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	b16a      	cbz	r2, 8009bf0 <strncmp+0x20>
 8009bd4:	3901      	subs	r1, #1
 8009bd6:	1884      	adds	r4, r0, r2
 8009bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bdc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d103      	bne.n	8009bec <strncmp+0x1c>
 8009be4:	42a0      	cmp	r0, r4
 8009be6:	d001      	beq.n	8009bec <strncmp+0x1c>
 8009be8:	2a00      	cmp	r2, #0
 8009bea:	d1f5      	bne.n	8009bd8 <strncmp+0x8>
 8009bec:	1ad0      	subs	r0, r2, r3
 8009bee:	bd10      	pop	{r4, pc}
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	e7fc      	b.n	8009bee <strncmp+0x1e>

08009bf4 <strstr>:
 8009bf4:	780a      	ldrb	r2, [r1, #0]
 8009bf6:	b570      	push	{r4, r5, r6, lr}
 8009bf8:	b96a      	cbnz	r2, 8009c16 <strstr+0x22>
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d109      	bne.n	8009c14 <strstr+0x20>
 8009c00:	460c      	mov	r4, r1
 8009c02:	4605      	mov	r5, r0
 8009c04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0f6      	beq.n	8009bfa <strstr+0x6>
 8009c0c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c10:	429e      	cmp	r6, r3
 8009c12:	d0f7      	beq.n	8009c04 <strstr+0x10>
 8009c14:	3001      	adds	r0, #1
 8009c16:	7803      	ldrb	r3, [r0, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1ef      	bne.n	8009bfc <strstr+0x8>
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	e7ec      	b.n	8009bfa <strstr+0x6>

08009c20 <memset>:
 8009c20:	4402      	add	r2, r0
 8009c22:	4603      	mov	r3, r0
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d100      	bne.n	8009c2a <memset+0xa>
 8009c28:	4770      	bx	lr
 8009c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c2e:	e7f9      	b.n	8009c24 <memset+0x4>

08009c30 <_localeconv_r>:
 8009c30:	4800      	ldr	r0, [pc, #0]	; (8009c34 <_localeconv_r+0x4>)
 8009c32:	4770      	bx	lr
 8009c34:	2000010c 	.word	0x2000010c

08009c38 <_close_r>:
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4d06      	ldr	r5, [pc, #24]	; (8009c54 <_close_r+0x1c>)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4604      	mov	r4, r0
 8009c40:	4608      	mov	r0, r1
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	f7f8 fd8f 	bl	8002766 <_close>
 8009c48:	1c43      	adds	r3, r0, #1
 8009c4a:	d102      	bne.n	8009c52 <_close_r+0x1a>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	b103      	cbz	r3, 8009c52 <_close_r+0x1a>
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	20007918 	.word	0x20007918

08009c58 <_lseek_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4d07      	ldr	r5, [pc, #28]	; (8009c78 <_lseek_r+0x20>)
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	4608      	mov	r0, r1
 8009c60:	4611      	mov	r1, r2
 8009c62:	2200      	movs	r2, #0
 8009c64:	602a      	str	r2, [r5, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	f7f8 fda4 	bl	80027b4 <_lseek>
 8009c6c:	1c43      	adds	r3, r0, #1
 8009c6e:	d102      	bne.n	8009c76 <_lseek_r+0x1e>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	b103      	cbz	r3, 8009c76 <_lseek_r+0x1e>
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	bd38      	pop	{r3, r4, r5, pc}
 8009c78:	20007918 	.word	0x20007918

08009c7c <_read_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d07      	ldr	r5, [pc, #28]	; (8009c9c <_read_r+0x20>)
 8009c80:	4604      	mov	r4, r0
 8009c82:	4608      	mov	r0, r1
 8009c84:	4611      	mov	r1, r2
 8009c86:	2200      	movs	r2, #0
 8009c88:	602a      	str	r2, [r5, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f7f8 fd32 	bl	80026f4 <_read>
 8009c90:	1c43      	adds	r3, r0, #1
 8009c92:	d102      	bne.n	8009c9a <_read_r+0x1e>
 8009c94:	682b      	ldr	r3, [r5, #0]
 8009c96:	b103      	cbz	r3, 8009c9a <_read_r+0x1e>
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	bd38      	pop	{r3, r4, r5, pc}
 8009c9c:	20007918 	.word	0x20007918

08009ca0 <_write_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	4d07      	ldr	r5, [pc, #28]	; (8009cc0 <_write_r+0x20>)
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	4608      	mov	r0, r1
 8009ca8:	4611      	mov	r1, r2
 8009caa:	2200      	movs	r2, #0
 8009cac:	602a      	str	r2, [r5, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f7f8 fd3d 	bl	800272e <_write>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d102      	bne.n	8009cbe <_write_r+0x1e>
 8009cb8:	682b      	ldr	r3, [r5, #0]
 8009cba:	b103      	cbz	r3, 8009cbe <_write_r+0x1e>
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	20007918 	.word	0x20007918

08009cc4 <__errno>:
 8009cc4:	4b01      	ldr	r3, [pc, #4]	; (8009ccc <__errno+0x8>)
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	200001d4 	.word	0x200001d4

08009cd0 <__libc_init_array>:
 8009cd0:	b570      	push	{r4, r5, r6, lr}
 8009cd2:	4d0d      	ldr	r5, [pc, #52]	; (8009d08 <__libc_init_array+0x38>)
 8009cd4:	4c0d      	ldr	r4, [pc, #52]	; (8009d0c <__libc_init_array+0x3c>)
 8009cd6:	1b64      	subs	r4, r4, r5
 8009cd8:	10a4      	asrs	r4, r4, #2
 8009cda:	2600      	movs	r6, #0
 8009cdc:	42a6      	cmp	r6, r4
 8009cde:	d109      	bne.n	8009cf4 <__libc_init_array+0x24>
 8009ce0:	4d0b      	ldr	r5, [pc, #44]	; (8009d10 <__libc_init_array+0x40>)
 8009ce2:	4c0c      	ldr	r4, [pc, #48]	; (8009d14 <__libc_init_array+0x44>)
 8009ce4:	f003 f940 	bl	800cf68 <_init>
 8009ce8:	1b64      	subs	r4, r4, r5
 8009cea:	10a4      	asrs	r4, r4, #2
 8009cec:	2600      	movs	r6, #0
 8009cee:	42a6      	cmp	r6, r4
 8009cf0:	d105      	bne.n	8009cfe <__libc_init_array+0x2e>
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf8:	4798      	blx	r3
 8009cfa:	3601      	adds	r6, #1
 8009cfc:	e7ee      	b.n	8009cdc <__libc_init_array+0xc>
 8009cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d02:	4798      	blx	r3
 8009d04:	3601      	adds	r6, #1
 8009d06:	e7f2      	b.n	8009cee <__libc_init_array+0x1e>
 8009d08:	0800d558 	.word	0x0800d558
 8009d0c:	0800d558 	.word	0x0800d558
 8009d10:	0800d558 	.word	0x0800d558
 8009d14:	0800d55c 	.word	0x0800d55c

08009d18 <__retarget_lock_init_recursive>:
 8009d18:	4770      	bx	lr

08009d1a <__retarget_lock_acquire_recursive>:
 8009d1a:	4770      	bx	lr

08009d1c <__retarget_lock_release_recursive>:
 8009d1c:	4770      	bx	lr

08009d1e <memcpy>:
 8009d1e:	440a      	add	r2, r1
 8009d20:	4291      	cmp	r1, r2
 8009d22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d26:	d100      	bne.n	8009d2a <memcpy+0xc>
 8009d28:	4770      	bx	lr
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d34:	4291      	cmp	r1, r2
 8009d36:	d1f9      	bne.n	8009d2c <memcpy+0xe>
 8009d38:	bd10      	pop	{r4, pc}

08009d3a <strcpy>:
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d40:	f803 2b01 	strb.w	r2, [r3], #1
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	d1f9      	bne.n	8009d3c <strcpy+0x2>
 8009d48:	4770      	bx	lr
 8009d4a:	0000      	movs	r0, r0
 8009d4c:	0000      	movs	r0, r0
	...

08009d50 <nan>:
 8009d50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009d58 <nan+0x8>
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	00000000 	.word	0x00000000
 8009d5c:	7ff80000 	.word	0x7ff80000

08009d60 <nanf>:
 8009d60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d68 <nanf+0x8>
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	7fc00000 	.word	0x7fc00000

08009d6c <quorem>:
 8009d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d70:	6903      	ldr	r3, [r0, #16]
 8009d72:	690c      	ldr	r4, [r1, #16]
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	4607      	mov	r7, r0
 8009d78:	db7e      	blt.n	8009e78 <quorem+0x10c>
 8009d7a:	3c01      	subs	r4, #1
 8009d7c:	f101 0814 	add.w	r8, r1, #20
 8009d80:	f100 0514 	add.w	r5, r0, #20
 8009d84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d92:	3301      	adds	r3, #1
 8009d94:	429a      	cmp	r2, r3
 8009d96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009da2:	d331      	bcc.n	8009e08 <quorem+0x9c>
 8009da4:	f04f 0e00 	mov.w	lr, #0
 8009da8:	4640      	mov	r0, r8
 8009daa:	46ac      	mov	ip, r5
 8009dac:	46f2      	mov	sl, lr
 8009dae:	f850 2b04 	ldr.w	r2, [r0], #4
 8009db2:	b293      	uxth	r3, r2
 8009db4:	fb06 e303 	mla	r3, r6, r3, lr
 8009db8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dbc:	0c1a      	lsrs	r2, r3, #16
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	ebaa 0303 	sub.w	r3, sl, r3
 8009dc4:	f8dc a000 	ldr.w	sl, [ip]
 8009dc8:	fa13 f38a 	uxtah	r3, r3, sl
 8009dcc:	fb06 220e 	mla	r2, r6, lr, r2
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	9b00      	ldr	r3, [sp, #0]
 8009dd4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dd8:	b292      	uxth	r2, r2
 8009dda:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009dde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009de2:	f8bd 3000 	ldrh.w	r3, [sp]
 8009de6:	4581      	cmp	r9, r0
 8009de8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dec:	f84c 3b04 	str.w	r3, [ip], #4
 8009df0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009df4:	d2db      	bcs.n	8009dae <quorem+0x42>
 8009df6:	f855 300b 	ldr.w	r3, [r5, fp]
 8009dfa:	b92b      	cbnz	r3, 8009e08 <quorem+0x9c>
 8009dfc:	9b01      	ldr	r3, [sp, #4]
 8009dfe:	3b04      	subs	r3, #4
 8009e00:	429d      	cmp	r5, r3
 8009e02:	461a      	mov	r2, r3
 8009e04:	d32c      	bcc.n	8009e60 <quorem+0xf4>
 8009e06:	613c      	str	r4, [r7, #16]
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f002 fabb 	bl	800c384 <__mcmp>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	db22      	blt.n	8009e58 <quorem+0xec>
 8009e12:	3601      	adds	r6, #1
 8009e14:	4629      	mov	r1, r5
 8009e16:	2000      	movs	r0, #0
 8009e18:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e1c:	f8d1 c000 	ldr.w	ip, [r1]
 8009e20:	b293      	uxth	r3, r2
 8009e22:	1ac3      	subs	r3, r0, r3
 8009e24:	0c12      	lsrs	r2, r2, #16
 8009e26:	fa13 f38c 	uxtah	r3, r3, ip
 8009e2a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e38:	45c1      	cmp	r9, r8
 8009e3a:	f841 3b04 	str.w	r3, [r1], #4
 8009e3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e42:	d2e9      	bcs.n	8009e18 <quorem+0xac>
 8009e44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e4c:	b922      	cbnz	r2, 8009e58 <quorem+0xec>
 8009e4e:	3b04      	subs	r3, #4
 8009e50:	429d      	cmp	r5, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	d30a      	bcc.n	8009e6c <quorem+0x100>
 8009e56:	613c      	str	r4, [r7, #16]
 8009e58:	4630      	mov	r0, r6
 8009e5a:	b003      	add	sp, #12
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	3b04      	subs	r3, #4
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	d1ce      	bne.n	8009e06 <quorem+0x9a>
 8009e68:	3c01      	subs	r4, #1
 8009e6a:	e7c9      	b.n	8009e00 <quorem+0x94>
 8009e6c:	6812      	ldr	r2, [r2, #0]
 8009e6e:	3b04      	subs	r3, #4
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	d1f0      	bne.n	8009e56 <quorem+0xea>
 8009e74:	3c01      	subs	r4, #1
 8009e76:	e7eb      	b.n	8009e50 <quorem+0xe4>
 8009e78:	2000      	movs	r0, #0
 8009e7a:	e7ee      	b.n	8009e5a <quorem+0xee>
 8009e7c:	0000      	movs	r0, r0
	...

08009e80 <_dtoa_r>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	ed2d 8b04 	vpush	{d8-d9}
 8009e88:	69c5      	ldr	r5, [r0, #28]
 8009e8a:	b093      	sub	sp, #76	; 0x4c
 8009e8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e90:	ec57 6b10 	vmov	r6, r7, d0
 8009e94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e98:	9107      	str	r1, [sp, #28]
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	920a      	str	r2, [sp, #40]	; 0x28
 8009e9e:	930d      	str	r3, [sp, #52]	; 0x34
 8009ea0:	b975      	cbnz	r5, 8009ec0 <_dtoa_r+0x40>
 8009ea2:	2010      	movs	r0, #16
 8009ea4:	f001 fcac 	bl	800b800 <malloc>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	61e0      	str	r0, [r4, #28]
 8009eac:	b920      	cbnz	r0, 8009eb8 <_dtoa_r+0x38>
 8009eae:	4bae      	ldr	r3, [pc, #696]	; (800a168 <_dtoa_r+0x2e8>)
 8009eb0:	21ef      	movs	r1, #239	; 0xef
 8009eb2:	48ae      	ldr	r0, [pc, #696]	; (800a16c <_dtoa_r+0x2ec>)
 8009eb4:	f002 fd62 	bl	800c97c <__assert_func>
 8009eb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ebc:	6005      	str	r5, [r0, #0]
 8009ebe:	60c5      	str	r5, [r0, #12]
 8009ec0:	69e3      	ldr	r3, [r4, #28]
 8009ec2:	6819      	ldr	r1, [r3, #0]
 8009ec4:	b151      	cbz	r1, 8009edc <_dtoa_r+0x5c>
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	604a      	str	r2, [r1, #4]
 8009eca:	2301      	movs	r3, #1
 8009ecc:	4093      	lsls	r3, r2
 8009ece:	608b      	str	r3, [r1, #8]
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f001 ffd1 	bl	800be78 <_Bfree>
 8009ed6:	69e3      	ldr	r3, [r4, #28]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	1e3b      	subs	r3, r7, #0
 8009ede:	bfbb      	ittet	lt
 8009ee0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ee4:	9303      	strlt	r3, [sp, #12]
 8009ee6:	2300      	movge	r3, #0
 8009ee8:	2201      	movlt	r2, #1
 8009eea:	bfac      	ite	ge
 8009eec:	f8c8 3000 	strge.w	r3, [r8]
 8009ef0:	f8c8 2000 	strlt.w	r2, [r8]
 8009ef4:	4b9e      	ldr	r3, [pc, #632]	; (800a170 <_dtoa_r+0x2f0>)
 8009ef6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009efa:	ea33 0308 	bics.w	r3, r3, r8
 8009efe:	d11b      	bne.n	8009f38 <_dtoa_r+0xb8>
 8009f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f02:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f0c:	4333      	orrs	r3, r6
 8009f0e:	f000 8593 	beq.w	800aa38 <_dtoa_r+0xbb8>
 8009f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f14:	b963      	cbnz	r3, 8009f30 <_dtoa_r+0xb0>
 8009f16:	4b97      	ldr	r3, [pc, #604]	; (800a174 <_dtoa_r+0x2f4>)
 8009f18:	e027      	b.n	8009f6a <_dtoa_r+0xea>
 8009f1a:	4b97      	ldr	r3, [pc, #604]	; (800a178 <_dtoa_r+0x2f8>)
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	9800      	ldr	r0, [sp, #0]
 8009f26:	b013      	add	sp, #76	; 0x4c
 8009f28:	ecbd 8b04 	vpop	{d8-d9}
 8009f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f30:	4b90      	ldr	r3, [pc, #576]	; (800a174 <_dtoa_r+0x2f4>)
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	3303      	adds	r3, #3
 8009f36:	e7f3      	b.n	8009f20 <_dtoa_r+0xa0>
 8009f38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	ec51 0b17 	vmov	r0, r1, d7
 8009f42:	eeb0 8a47 	vmov.f32	s16, s14
 8009f46:	eef0 8a67 	vmov.f32	s17, s15
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f7f6 fdbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f50:	4681      	mov	r9, r0
 8009f52:	b160      	cbz	r0, 8009f6e <_dtoa_r+0xee>
 8009f54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f56:	2301      	movs	r3, #1
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 8568 	beq.w	800aa32 <_dtoa_r+0xbb2>
 8009f62:	4b86      	ldr	r3, [pc, #536]	; (800a17c <_dtoa_r+0x2fc>)
 8009f64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	e7da      	b.n	8009f24 <_dtoa_r+0xa4>
 8009f6e:	aa10      	add	r2, sp, #64	; 0x40
 8009f70:	a911      	add	r1, sp, #68	; 0x44
 8009f72:	4620      	mov	r0, r4
 8009f74:	eeb0 0a48 	vmov.f32	s0, s16
 8009f78:	eef0 0a68 	vmov.f32	s1, s17
 8009f7c:	f002 fb18 	bl	800c5b0 <__d2b>
 8009f80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009f84:	4682      	mov	sl, r0
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	d07f      	beq.n	800a08a <_dtoa_r+0x20a>
 8009f8a:	ee18 3a90 	vmov	r3, s17
 8009f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f92:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009f96:	ec51 0b18 	vmov	r0, r1, d8
 8009f9a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009f9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fa2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	2200      	movs	r2, #0
 8009faa:	4b75      	ldr	r3, [pc, #468]	; (800a180 <_dtoa_r+0x300>)
 8009fac:	f7f6 f96c 	bl	8000288 <__aeabi_dsub>
 8009fb0:	a367      	add	r3, pc, #412	; (adr r3, 800a150 <_dtoa_r+0x2d0>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	f7f6 fb1f 	bl	80005f8 <__aeabi_dmul>
 8009fba:	a367      	add	r3, pc, #412	; (adr r3, 800a158 <_dtoa_r+0x2d8>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 f964 	bl	800028c <__adddf3>
 8009fc4:	4606      	mov	r6, r0
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	460f      	mov	r7, r1
 8009fca:	f7f6 faab 	bl	8000524 <__aeabi_i2d>
 8009fce:	a364      	add	r3, pc, #400	; (adr r3, 800a160 <_dtoa_r+0x2e0>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 fb10 	bl	80005f8 <__aeabi_dmul>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4630      	mov	r0, r6
 8009fde:	4639      	mov	r1, r7
 8009fe0:	f7f6 f954 	bl	800028c <__adddf3>
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	460f      	mov	r7, r1
 8009fe8:	f7f6 fdb6 	bl	8000b58 <__aeabi_d2iz>
 8009fec:	2200      	movs	r2, #0
 8009fee:	4683      	mov	fp, r0
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	f7f6 fd71 	bl	8000adc <__aeabi_dcmplt>
 8009ffa:	b148      	cbz	r0, 800a010 <_dtoa_r+0x190>
 8009ffc:	4658      	mov	r0, fp
 8009ffe:	f7f6 fa91 	bl	8000524 <__aeabi_i2d>
 800a002:	4632      	mov	r2, r6
 800a004:	463b      	mov	r3, r7
 800a006:	f7f6 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a00a:	b908      	cbnz	r0, 800a010 <_dtoa_r+0x190>
 800a00c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a010:	f1bb 0f16 	cmp.w	fp, #22
 800a014:	d857      	bhi.n	800a0c6 <_dtoa_r+0x246>
 800a016:	4b5b      	ldr	r3, [pc, #364]	; (800a184 <_dtoa_r+0x304>)
 800a018:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	ec51 0b18 	vmov	r0, r1, d8
 800a024:	f7f6 fd5a 	bl	8000adc <__aeabi_dcmplt>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d04e      	beq.n	800a0ca <_dtoa_r+0x24a>
 800a02c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a030:	2300      	movs	r3, #0
 800a032:	930c      	str	r3, [sp, #48]	; 0x30
 800a034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a036:	1b5b      	subs	r3, r3, r5
 800a038:	1e5a      	subs	r2, r3, #1
 800a03a:	bf45      	ittet	mi
 800a03c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a040:	9305      	strmi	r3, [sp, #20]
 800a042:	2300      	movpl	r3, #0
 800a044:	2300      	movmi	r3, #0
 800a046:	9206      	str	r2, [sp, #24]
 800a048:	bf54      	ite	pl
 800a04a:	9305      	strpl	r3, [sp, #20]
 800a04c:	9306      	strmi	r3, [sp, #24]
 800a04e:	f1bb 0f00 	cmp.w	fp, #0
 800a052:	db3c      	blt.n	800a0ce <_dtoa_r+0x24e>
 800a054:	9b06      	ldr	r3, [sp, #24]
 800a056:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a05a:	445b      	add	r3, fp
 800a05c:	9306      	str	r3, [sp, #24]
 800a05e:	2300      	movs	r3, #0
 800a060:	9308      	str	r3, [sp, #32]
 800a062:	9b07      	ldr	r3, [sp, #28]
 800a064:	2b09      	cmp	r3, #9
 800a066:	d868      	bhi.n	800a13a <_dtoa_r+0x2ba>
 800a068:	2b05      	cmp	r3, #5
 800a06a:	bfc4      	itt	gt
 800a06c:	3b04      	subgt	r3, #4
 800a06e:	9307      	strgt	r3, [sp, #28]
 800a070:	9b07      	ldr	r3, [sp, #28]
 800a072:	f1a3 0302 	sub.w	r3, r3, #2
 800a076:	bfcc      	ite	gt
 800a078:	2500      	movgt	r5, #0
 800a07a:	2501      	movle	r5, #1
 800a07c:	2b03      	cmp	r3, #3
 800a07e:	f200 8085 	bhi.w	800a18c <_dtoa_r+0x30c>
 800a082:	e8df f003 	tbb	[pc, r3]
 800a086:	3b2e      	.short	0x3b2e
 800a088:	5839      	.short	0x5839
 800a08a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a08e:	441d      	add	r5, r3
 800a090:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a094:	2b20      	cmp	r3, #32
 800a096:	bfc1      	itttt	gt
 800a098:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a09c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a0a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a0a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0a8:	bfd6      	itet	le
 800a0aa:	f1c3 0320 	rsble	r3, r3, #32
 800a0ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800a0b2:	fa06 f003 	lslle.w	r0, r6, r3
 800a0b6:	f7f6 fa25 	bl	8000504 <__aeabi_ui2d>
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0c0:	3d01      	subs	r5, #1
 800a0c2:	920e      	str	r2, [sp, #56]	; 0x38
 800a0c4:	e76f      	b.n	8009fa6 <_dtoa_r+0x126>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e7b3      	b.n	800a032 <_dtoa_r+0x1b2>
 800a0ca:	900c      	str	r0, [sp, #48]	; 0x30
 800a0cc:	e7b2      	b.n	800a034 <_dtoa_r+0x1b4>
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	eba3 030b 	sub.w	r3, r3, fp
 800a0d4:	9305      	str	r3, [sp, #20]
 800a0d6:	f1cb 0300 	rsb	r3, fp, #0
 800a0da:	9308      	str	r3, [sp, #32]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e0:	e7bf      	b.n	800a062 <_dtoa_r+0x1e2>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dc52      	bgt.n	800a192 <_dtoa_r+0x312>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	920a      	str	r2, [sp, #40]	; 0x28
 800a0f6:	e00b      	b.n	800a110 <_dtoa_r+0x290>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e7f3      	b.n	800a0e4 <_dtoa_r+0x264>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a102:	445b      	add	r3, fp
 800a104:	9301      	str	r3, [sp, #4]
 800a106:	3301      	adds	r3, #1
 800a108:	2b01      	cmp	r3, #1
 800a10a:	9304      	str	r3, [sp, #16]
 800a10c:	bfb8      	it	lt
 800a10e:	2301      	movlt	r3, #1
 800a110:	69e0      	ldr	r0, [r4, #28]
 800a112:	2100      	movs	r1, #0
 800a114:	2204      	movs	r2, #4
 800a116:	f102 0614 	add.w	r6, r2, #20
 800a11a:	429e      	cmp	r6, r3
 800a11c:	d93d      	bls.n	800a19a <_dtoa_r+0x31a>
 800a11e:	6041      	str	r1, [r0, #4]
 800a120:	4620      	mov	r0, r4
 800a122:	f001 fe69 	bl	800bdf8 <_Balloc>
 800a126:	9000      	str	r0, [sp, #0]
 800a128:	2800      	cmp	r0, #0
 800a12a:	d139      	bne.n	800a1a0 <_dtoa_r+0x320>
 800a12c:	4b16      	ldr	r3, [pc, #88]	; (800a188 <_dtoa_r+0x308>)
 800a12e:	4602      	mov	r2, r0
 800a130:	f240 11af 	movw	r1, #431	; 0x1af
 800a134:	e6bd      	b.n	8009eb2 <_dtoa_r+0x32>
 800a136:	2301      	movs	r3, #1
 800a138:	e7e1      	b.n	800a0fe <_dtoa_r+0x27e>
 800a13a:	2501      	movs	r5, #1
 800a13c:	2300      	movs	r3, #0
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	9509      	str	r5, [sp, #36]	; 0x24
 800a142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a146:	9301      	str	r3, [sp, #4]
 800a148:	9304      	str	r3, [sp, #16]
 800a14a:	2200      	movs	r2, #0
 800a14c:	2312      	movs	r3, #18
 800a14e:	e7d1      	b.n	800a0f4 <_dtoa_r+0x274>
 800a150:	636f4361 	.word	0x636f4361
 800a154:	3fd287a7 	.word	0x3fd287a7
 800a158:	8b60c8b3 	.word	0x8b60c8b3
 800a15c:	3fc68a28 	.word	0x3fc68a28
 800a160:	509f79fb 	.word	0x509f79fb
 800a164:	3fd34413 	.word	0x3fd34413
 800a168:	0800d2ae 	.word	0x0800d2ae
 800a16c:	0800d2c5 	.word	0x0800d2c5
 800a170:	7ff00000 	.word	0x7ff00000
 800a174:	0800d2aa 	.word	0x0800d2aa
 800a178:	0800d2a1 	.word	0x0800d2a1
 800a17c:	0800d3b6 	.word	0x0800d3b6
 800a180:	3ff80000 	.word	0x3ff80000
 800a184:	0800d440 	.word	0x0800d440
 800a188:	0800d31d 	.word	0x0800d31d
 800a18c:	2301      	movs	r3, #1
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	e7d7      	b.n	800a142 <_dtoa_r+0x2c2>
 800a192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a194:	9301      	str	r3, [sp, #4]
 800a196:	9304      	str	r3, [sp, #16]
 800a198:	e7ba      	b.n	800a110 <_dtoa_r+0x290>
 800a19a:	3101      	adds	r1, #1
 800a19c:	0052      	lsls	r2, r2, #1
 800a19e:	e7ba      	b.n	800a116 <_dtoa_r+0x296>
 800a1a0:	69e3      	ldr	r3, [r4, #28]
 800a1a2:	9a00      	ldr	r2, [sp, #0]
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	9b04      	ldr	r3, [sp, #16]
 800a1a8:	2b0e      	cmp	r3, #14
 800a1aa:	f200 80a8 	bhi.w	800a2fe <_dtoa_r+0x47e>
 800a1ae:	2d00      	cmp	r5, #0
 800a1b0:	f000 80a5 	beq.w	800a2fe <_dtoa_r+0x47e>
 800a1b4:	f1bb 0f00 	cmp.w	fp, #0
 800a1b8:	dd38      	ble.n	800a22c <_dtoa_r+0x3ac>
 800a1ba:	4bc0      	ldr	r3, [pc, #768]	; (800a4bc <_dtoa_r+0x63c>)
 800a1bc:	f00b 020f 	and.w	r2, fp, #15
 800a1c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a1d0:	d019      	beq.n	800a206 <_dtoa_r+0x386>
 800a1d2:	4bbb      	ldr	r3, [pc, #748]	; (800a4c0 <_dtoa_r+0x640>)
 800a1d4:	ec51 0b18 	vmov	r0, r1, d8
 800a1d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1dc:	f7f6 fb36 	bl	800084c <__aeabi_ddiv>
 800a1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1e4:	f008 080f 	and.w	r8, r8, #15
 800a1e8:	2503      	movs	r5, #3
 800a1ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a4c0 <_dtoa_r+0x640>
 800a1ee:	f1b8 0f00 	cmp.w	r8, #0
 800a1f2:	d10a      	bne.n	800a20a <_dtoa_r+0x38a>
 800a1f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	463b      	mov	r3, r7
 800a1fc:	f7f6 fb26 	bl	800084c <__aeabi_ddiv>
 800a200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a204:	e02b      	b.n	800a25e <_dtoa_r+0x3de>
 800a206:	2502      	movs	r5, #2
 800a208:	e7ef      	b.n	800a1ea <_dtoa_r+0x36a>
 800a20a:	f018 0f01 	tst.w	r8, #1
 800a20e:	d008      	beq.n	800a222 <_dtoa_r+0x3a2>
 800a210:	4630      	mov	r0, r6
 800a212:	4639      	mov	r1, r7
 800a214:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	3501      	adds	r5, #1
 800a21e:	4606      	mov	r6, r0
 800a220:	460f      	mov	r7, r1
 800a222:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a226:	f109 0908 	add.w	r9, r9, #8
 800a22a:	e7e0      	b.n	800a1ee <_dtoa_r+0x36e>
 800a22c:	f000 809f 	beq.w	800a36e <_dtoa_r+0x4ee>
 800a230:	f1cb 0600 	rsb	r6, fp, #0
 800a234:	4ba1      	ldr	r3, [pc, #644]	; (800a4bc <_dtoa_r+0x63c>)
 800a236:	4fa2      	ldr	r7, [pc, #648]	; (800a4c0 <_dtoa_r+0x640>)
 800a238:	f006 020f 	and.w	r2, r6, #15
 800a23c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	ec51 0b18 	vmov	r0, r1, d8
 800a248:	f7f6 f9d6 	bl	80005f8 <__aeabi_dmul>
 800a24c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a250:	1136      	asrs	r6, r6, #4
 800a252:	2300      	movs	r3, #0
 800a254:	2502      	movs	r5, #2
 800a256:	2e00      	cmp	r6, #0
 800a258:	d17e      	bne.n	800a358 <_dtoa_r+0x4d8>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1d0      	bne.n	800a200 <_dtoa_r+0x380>
 800a25e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a260:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 8084 	beq.w	800a372 <_dtoa_r+0x4f2>
 800a26a:	4b96      	ldr	r3, [pc, #600]	; (800a4c4 <_dtoa_r+0x644>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	4640      	mov	r0, r8
 800a270:	4649      	mov	r1, r9
 800a272:	f7f6 fc33 	bl	8000adc <__aeabi_dcmplt>
 800a276:	2800      	cmp	r0, #0
 800a278:	d07b      	beq.n	800a372 <_dtoa_r+0x4f2>
 800a27a:	9b04      	ldr	r3, [sp, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d078      	beq.n	800a372 <_dtoa_r+0x4f2>
 800a280:	9b01      	ldr	r3, [sp, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	dd39      	ble.n	800a2fa <_dtoa_r+0x47a>
 800a286:	4b90      	ldr	r3, [pc, #576]	; (800a4c8 <_dtoa_r+0x648>)
 800a288:	2200      	movs	r2, #0
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	f7f6 f9b3 	bl	80005f8 <__aeabi_dmul>
 800a292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a296:	9e01      	ldr	r6, [sp, #4]
 800a298:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a29c:	3501      	adds	r5, #1
 800a29e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f7f6 f93e 	bl	8000524 <__aeabi_i2d>
 800a2a8:	4642      	mov	r2, r8
 800a2aa:	464b      	mov	r3, r9
 800a2ac:	f7f6 f9a4 	bl	80005f8 <__aeabi_dmul>
 800a2b0:	4b86      	ldr	r3, [pc, #536]	; (800a4cc <_dtoa_r+0x64c>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f7f5 ffea 	bl	800028c <__adddf3>
 800a2b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2c0:	9303      	str	r3, [sp, #12]
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d158      	bne.n	800a378 <_dtoa_r+0x4f8>
 800a2c6:	4b82      	ldr	r3, [pc, #520]	; (800a4d0 <_dtoa_r+0x650>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	4649      	mov	r1, r9
 800a2ce:	f7f5 ffdb 	bl	8000288 <__aeabi_dsub>
 800a2d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2d6:	4680      	mov	r8, r0
 800a2d8:	4689      	mov	r9, r1
 800a2da:	f7f6 fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	f040 8296 	bne.w	800a810 <_dtoa_r+0x990>
 800a2e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	f7f6 fbf4 	bl	8000adc <__aeabi_dcmplt>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f040 8289 	bne.w	800a80c <_dtoa_r+0x98c>
 800a2fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a2fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a300:	2b00      	cmp	r3, #0
 800a302:	f2c0 814e 	blt.w	800a5a2 <_dtoa_r+0x722>
 800a306:	f1bb 0f0e 	cmp.w	fp, #14
 800a30a:	f300 814a 	bgt.w	800a5a2 <_dtoa_r+0x722>
 800a30e:	4b6b      	ldr	r3, [pc, #428]	; (800a4bc <_dtoa_r+0x63c>)
 800a310:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a314:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f280 80dc 	bge.w	800a4d8 <_dtoa_r+0x658>
 800a320:	9b04      	ldr	r3, [sp, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	f300 80d8 	bgt.w	800a4d8 <_dtoa_r+0x658>
 800a328:	f040 826f 	bne.w	800a80a <_dtoa_r+0x98a>
 800a32c:	4b68      	ldr	r3, [pc, #416]	; (800a4d0 <_dtoa_r+0x650>)
 800a32e:	2200      	movs	r2, #0
 800a330:	4640      	mov	r0, r8
 800a332:	4649      	mov	r1, r9
 800a334:	f7f6 f960 	bl	80005f8 <__aeabi_dmul>
 800a338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a33c:	f7f6 fbe2 	bl	8000b04 <__aeabi_dcmpge>
 800a340:	9e04      	ldr	r6, [sp, #16]
 800a342:	4637      	mov	r7, r6
 800a344:	2800      	cmp	r0, #0
 800a346:	f040 8245 	bne.w	800a7d4 <_dtoa_r+0x954>
 800a34a:	9d00      	ldr	r5, [sp, #0]
 800a34c:	2331      	movs	r3, #49	; 0x31
 800a34e:	f805 3b01 	strb.w	r3, [r5], #1
 800a352:	f10b 0b01 	add.w	fp, fp, #1
 800a356:	e241      	b.n	800a7dc <_dtoa_r+0x95c>
 800a358:	07f2      	lsls	r2, r6, #31
 800a35a:	d505      	bpl.n	800a368 <_dtoa_r+0x4e8>
 800a35c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a360:	f7f6 f94a 	bl	80005f8 <__aeabi_dmul>
 800a364:	3501      	adds	r5, #1
 800a366:	2301      	movs	r3, #1
 800a368:	1076      	asrs	r6, r6, #1
 800a36a:	3708      	adds	r7, #8
 800a36c:	e773      	b.n	800a256 <_dtoa_r+0x3d6>
 800a36e:	2502      	movs	r5, #2
 800a370:	e775      	b.n	800a25e <_dtoa_r+0x3de>
 800a372:	9e04      	ldr	r6, [sp, #16]
 800a374:	465f      	mov	r7, fp
 800a376:	e792      	b.n	800a29e <_dtoa_r+0x41e>
 800a378:	9900      	ldr	r1, [sp, #0]
 800a37a:	4b50      	ldr	r3, [pc, #320]	; (800a4bc <_dtoa_r+0x63c>)
 800a37c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a380:	4431      	add	r1, r6
 800a382:	9102      	str	r1, [sp, #8]
 800a384:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a386:	eeb0 9a47 	vmov.f32	s18, s14
 800a38a:	eef0 9a67 	vmov.f32	s19, s15
 800a38e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a396:	2900      	cmp	r1, #0
 800a398:	d044      	beq.n	800a424 <_dtoa_r+0x5a4>
 800a39a:	494e      	ldr	r1, [pc, #312]	; (800a4d4 <_dtoa_r+0x654>)
 800a39c:	2000      	movs	r0, #0
 800a39e:	f7f6 fa55 	bl	800084c <__aeabi_ddiv>
 800a3a2:	ec53 2b19 	vmov	r2, r3, d9
 800a3a6:	f7f5 ff6f 	bl	8000288 <__aeabi_dsub>
 800a3aa:	9d00      	ldr	r5, [sp, #0]
 800a3ac:	ec41 0b19 	vmov	d9, r0, r1
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	f7f6 fbd0 	bl	8000b58 <__aeabi_d2iz>
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	f7f6 f8b3 	bl	8000524 <__aeabi_i2d>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	4649      	mov	r1, r9
 800a3c6:	f7f5 ff5f 	bl	8000288 <__aeabi_dsub>
 800a3ca:	3630      	adds	r6, #48	; 0x30
 800a3cc:	f805 6b01 	strb.w	r6, [r5], #1
 800a3d0:	ec53 2b19 	vmov	r2, r3, d9
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	4689      	mov	r9, r1
 800a3d8:	f7f6 fb80 	bl	8000adc <__aeabi_dcmplt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d164      	bne.n	800a4aa <_dtoa_r+0x62a>
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	4937      	ldr	r1, [pc, #220]	; (800a4c4 <_dtoa_r+0x644>)
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f7f5 ff4e 	bl	8000288 <__aeabi_dsub>
 800a3ec:	ec53 2b19 	vmov	r2, r3, d9
 800a3f0:	f7f6 fb74 	bl	8000adc <__aeabi_dcmplt>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f040 80b6 	bne.w	800a566 <_dtoa_r+0x6e6>
 800a3fa:	9b02      	ldr	r3, [sp, #8]
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	f43f af7c 	beq.w	800a2fa <_dtoa_r+0x47a>
 800a402:	4b31      	ldr	r3, [pc, #196]	; (800a4c8 <_dtoa_r+0x648>)
 800a404:	ec51 0b19 	vmov	r0, r1, d9
 800a408:	2200      	movs	r2, #0
 800a40a:	f7f6 f8f5 	bl	80005f8 <__aeabi_dmul>
 800a40e:	4b2e      	ldr	r3, [pc, #184]	; (800a4c8 <_dtoa_r+0x648>)
 800a410:	ec41 0b19 	vmov	d9, r0, r1
 800a414:	2200      	movs	r2, #0
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f6 f8ed 	bl	80005f8 <__aeabi_dmul>
 800a41e:	4680      	mov	r8, r0
 800a420:	4689      	mov	r9, r1
 800a422:	e7c5      	b.n	800a3b0 <_dtoa_r+0x530>
 800a424:	ec51 0b17 	vmov	r0, r1, d7
 800a428:	f7f6 f8e6 	bl	80005f8 <__aeabi_dmul>
 800a42c:	9b02      	ldr	r3, [sp, #8]
 800a42e:	9d00      	ldr	r5, [sp, #0]
 800a430:	930f      	str	r3, [sp, #60]	; 0x3c
 800a432:	ec41 0b19 	vmov	d9, r0, r1
 800a436:	4649      	mov	r1, r9
 800a438:	4640      	mov	r0, r8
 800a43a:	f7f6 fb8d 	bl	8000b58 <__aeabi_d2iz>
 800a43e:	4606      	mov	r6, r0
 800a440:	f7f6 f870 	bl	8000524 <__aeabi_i2d>
 800a444:	3630      	adds	r6, #48	; 0x30
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4640      	mov	r0, r8
 800a44c:	4649      	mov	r1, r9
 800a44e:	f7f5 ff1b 	bl	8000288 <__aeabi_dsub>
 800a452:	f805 6b01 	strb.w	r6, [r5], #1
 800a456:	9b02      	ldr	r3, [sp, #8]
 800a458:	429d      	cmp	r5, r3
 800a45a:	4680      	mov	r8, r0
 800a45c:	4689      	mov	r9, r1
 800a45e:	f04f 0200 	mov.w	r2, #0
 800a462:	d124      	bne.n	800a4ae <_dtoa_r+0x62e>
 800a464:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <_dtoa_r+0x654>)
 800a466:	ec51 0b19 	vmov	r0, r1, d9
 800a46a:	f7f5 ff0f 	bl	800028c <__adddf3>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	f7f6 fb4f 	bl	8000b18 <__aeabi_dcmpgt>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d173      	bne.n	800a566 <_dtoa_r+0x6e6>
 800a47e:	ec53 2b19 	vmov	r2, r3, d9
 800a482:	4914      	ldr	r1, [pc, #80]	; (800a4d4 <_dtoa_r+0x654>)
 800a484:	2000      	movs	r0, #0
 800a486:	f7f5 feff 	bl	8000288 <__aeabi_dsub>
 800a48a:	4602      	mov	r2, r0
 800a48c:	460b      	mov	r3, r1
 800a48e:	4640      	mov	r0, r8
 800a490:	4649      	mov	r1, r9
 800a492:	f7f6 fb23 	bl	8000adc <__aeabi_dcmplt>
 800a496:	2800      	cmp	r0, #0
 800a498:	f43f af2f 	beq.w	800a2fa <_dtoa_r+0x47a>
 800a49c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a49e:	1e6b      	subs	r3, r5, #1
 800a4a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4a6:	2b30      	cmp	r3, #48	; 0x30
 800a4a8:	d0f8      	beq.n	800a49c <_dtoa_r+0x61c>
 800a4aa:	46bb      	mov	fp, r7
 800a4ac:	e04a      	b.n	800a544 <_dtoa_r+0x6c4>
 800a4ae:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <_dtoa_r+0x648>)
 800a4b0:	f7f6 f8a2 	bl	80005f8 <__aeabi_dmul>
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	4689      	mov	r9, r1
 800a4b8:	e7bd      	b.n	800a436 <_dtoa_r+0x5b6>
 800a4ba:	bf00      	nop
 800a4bc:	0800d440 	.word	0x0800d440
 800a4c0:	0800d418 	.word	0x0800d418
 800a4c4:	3ff00000 	.word	0x3ff00000
 800a4c8:	40240000 	.word	0x40240000
 800a4cc:	401c0000 	.word	0x401c0000
 800a4d0:	40140000 	.word	0x40140000
 800a4d4:	3fe00000 	.word	0x3fe00000
 800a4d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4dc:	9d00      	ldr	r5, [sp, #0]
 800a4de:	4642      	mov	r2, r8
 800a4e0:	464b      	mov	r3, r9
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	f7f6 f9b1 	bl	800084c <__aeabi_ddiv>
 800a4ea:	f7f6 fb35 	bl	8000b58 <__aeabi_d2iz>
 800a4ee:	9001      	str	r0, [sp, #4]
 800a4f0:	f7f6 f818 	bl	8000524 <__aeabi_i2d>
 800a4f4:	4642      	mov	r2, r8
 800a4f6:	464b      	mov	r3, r9
 800a4f8:	f7f6 f87e 	bl	80005f8 <__aeabi_dmul>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4630      	mov	r0, r6
 800a502:	4639      	mov	r1, r7
 800a504:	f7f5 fec0 	bl	8000288 <__aeabi_dsub>
 800a508:	9e01      	ldr	r6, [sp, #4]
 800a50a:	9f04      	ldr	r7, [sp, #16]
 800a50c:	3630      	adds	r6, #48	; 0x30
 800a50e:	f805 6b01 	strb.w	r6, [r5], #1
 800a512:	9e00      	ldr	r6, [sp, #0]
 800a514:	1bae      	subs	r6, r5, r6
 800a516:	42b7      	cmp	r7, r6
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	d134      	bne.n	800a588 <_dtoa_r+0x708>
 800a51e:	f7f5 feb5 	bl	800028c <__adddf3>
 800a522:	4642      	mov	r2, r8
 800a524:	464b      	mov	r3, r9
 800a526:	4606      	mov	r6, r0
 800a528:	460f      	mov	r7, r1
 800a52a:	f7f6 faf5 	bl	8000b18 <__aeabi_dcmpgt>
 800a52e:	b9c8      	cbnz	r0, 800a564 <_dtoa_r+0x6e4>
 800a530:	4642      	mov	r2, r8
 800a532:	464b      	mov	r3, r9
 800a534:	4630      	mov	r0, r6
 800a536:	4639      	mov	r1, r7
 800a538:	f7f6 fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a53c:	b110      	cbz	r0, 800a544 <_dtoa_r+0x6c4>
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	07db      	lsls	r3, r3, #31
 800a542:	d40f      	bmi.n	800a564 <_dtoa_r+0x6e4>
 800a544:	4651      	mov	r1, sl
 800a546:	4620      	mov	r0, r4
 800a548:	f001 fc96 	bl	800be78 <_Bfree>
 800a54c:	2300      	movs	r3, #0
 800a54e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a550:	702b      	strb	r3, [r5, #0]
 800a552:	f10b 0301 	add.w	r3, fp, #1
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f43f ace2 	beq.w	8009f24 <_dtoa_r+0xa4>
 800a560:	601d      	str	r5, [r3, #0]
 800a562:	e4df      	b.n	8009f24 <_dtoa_r+0xa4>
 800a564:	465f      	mov	r7, fp
 800a566:	462b      	mov	r3, r5
 800a568:	461d      	mov	r5, r3
 800a56a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a56e:	2a39      	cmp	r2, #57	; 0x39
 800a570:	d106      	bne.n	800a580 <_dtoa_r+0x700>
 800a572:	9a00      	ldr	r2, [sp, #0]
 800a574:	429a      	cmp	r2, r3
 800a576:	d1f7      	bne.n	800a568 <_dtoa_r+0x6e8>
 800a578:	9900      	ldr	r1, [sp, #0]
 800a57a:	2230      	movs	r2, #48	; 0x30
 800a57c:	3701      	adds	r7, #1
 800a57e:	700a      	strb	r2, [r1, #0]
 800a580:	781a      	ldrb	r2, [r3, #0]
 800a582:	3201      	adds	r2, #1
 800a584:	701a      	strb	r2, [r3, #0]
 800a586:	e790      	b.n	800a4aa <_dtoa_r+0x62a>
 800a588:	4ba3      	ldr	r3, [pc, #652]	; (800a818 <_dtoa_r+0x998>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	f7f6 f834 	bl	80005f8 <__aeabi_dmul>
 800a590:	2200      	movs	r2, #0
 800a592:	2300      	movs	r3, #0
 800a594:	4606      	mov	r6, r0
 800a596:	460f      	mov	r7, r1
 800a598:	f7f6 fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d09e      	beq.n	800a4de <_dtoa_r+0x65e>
 800a5a0:	e7d0      	b.n	800a544 <_dtoa_r+0x6c4>
 800a5a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5a4:	2a00      	cmp	r2, #0
 800a5a6:	f000 80ca 	beq.w	800a73e <_dtoa_r+0x8be>
 800a5aa:	9a07      	ldr	r2, [sp, #28]
 800a5ac:	2a01      	cmp	r2, #1
 800a5ae:	f300 80ad 	bgt.w	800a70c <_dtoa_r+0x88c>
 800a5b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	f000 80a5 	beq.w	800a704 <_dtoa_r+0x884>
 800a5ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5be:	9e08      	ldr	r6, [sp, #32]
 800a5c0:	9d05      	ldr	r5, [sp, #20]
 800a5c2:	9a05      	ldr	r2, [sp, #20]
 800a5c4:	441a      	add	r2, r3
 800a5c6:	9205      	str	r2, [sp, #20]
 800a5c8:	9a06      	ldr	r2, [sp, #24]
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	441a      	add	r2, r3
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	9206      	str	r2, [sp, #24]
 800a5d2:	f001 fd51 	bl	800c078 <__i2b>
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	b165      	cbz	r5, 800a5f4 <_dtoa_r+0x774>
 800a5da:	9b06      	ldr	r3, [sp, #24]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	dd09      	ble.n	800a5f4 <_dtoa_r+0x774>
 800a5e0:	42ab      	cmp	r3, r5
 800a5e2:	9a05      	ldr	r2, [sp, #20]
 800a5e4:	bfa8      	it	ge
 800a5e6:	462b      	movge	r3, r5
 800a5e8:	1ad2      	subs	r2, r2, r3
 800a5ea:	9205      	str	r2, [sp, #20]
 800a5ec:	9a06      	ldr	r2, [sp, #24]
 800a5ee:	1aed      	subs	r5, r5, r3
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	9306      	str	r3, [sp, #24]
 800a5f4:	9b08      	ldr	r3, [sp, #32]
 800a5f6:	b1f3      	cbz	r3, 800a636 <_dtoa_r+0x7b6>
 800a5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 80a3 	beq.w	800a746 <_dtoa_r+0x8c6>
 800a600:	2e00      	cmp	r6, #0
 800a602:	dd10      	ble.n	800a626 <_dtoa_r+0x7a6>
 800a604:	4639      	mov	r1, r7
 800a606:	4632      	mov	r2, r6
 800a608:	4620      	mov	r0, r4
 800a60a:	f001 fdf5 	bl	800c1f8 <__pow5mult>
 800a60e:	4652      	mov	r2, sl
 800a610:	4601      	mov	r1, r0
 800a612:	4607      	mov	r7, r0
 800a614:	4620      	mov	r0, r4
 800a616:	f001 fd45 	bl	800c0a4 <__multiply>
 800a61a:	4651      	mov	r1, sl
 800a61c:	4680      	mov	r8, r0
 800a61e:	4620      	mov	r0, r4
 800a620:	f001 fc2a 	bl	800be78 <_Bfree>
 800a624:	46c2      	mov	sl, r8
 800a626:	9b08      	ldr	r3, [sp, #32]
 800a628:	1b9a      	subs	r2, r3, r6
 800a62a:	d004      	beq.n	800a636 <_dtoa_r+0x7b6>
 800a62c:	4651      	mov	r1, sl
 800a62e:	4620      	mov	r0, r4
 800a630:	f001 fde2 	bl	800c1f8 <__pow5mult>
 800a634:	4682      	mov	sl, r0
 800a636:	2101      	movs	r1, #1
 800a638:	4620      	mov	r0, r4
 800a63a:	f001 fd1d 	bl	800c078 <__i2b>
 800a63e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a640:	2b00      	cmp	r3, #0
 800a642:	4606      	mov	r6, r0
 800a644:	f340 8081 	ble.w	800a74a <_dtoa_r+0x8ca>
 800a648:	461a      	mov	r2, r3
 800a64a:	4601      	mov	r1, r0
 800a64c:	4620      	mov	r0, r4
 800a64e:	f001 fdd3 	bl	800c1f8 <__pow5mult>
 800a652:	9b07      	ldr	r3, [sp, #28]
 800a654:	2b01      	cmp	r3, #1
 800a656:	4606      	mov	r6, r0
 800a658:	dd7a      	ble.n	800a750 <_dtoa_r+0x8d0>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	6933      	ldr	r3, [r6, #16]
 800a660:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a664:	6918      	ldr	r0, [r3, #16]
 800a666:	f001 fcb9 	bl	800bfdc <__hi0bits>
 800a66a:	f1c0 0020 	rsb	r0, r0, #32
 800a66e:	9b06      	ldr	r3, [sp, #24]
 800a670:	4418      	add	r0, r3
 800a672:	f010 001f 	ands.w	r0, r0, #31
 800a676:	f000 8094 	beq.w	800a7a2 <_dtoa_r+0x922>
 800a67a:	f1c0 0320 	rsb	r3, r0, #32
 800a67e:	2b04      	cmp	r3, #4
 800a680:	f340 8085 	ble.w	800a78e <_dtoa_r+0x90e>
 800a684:	9b05      	ldr	r3, [sp, #20]
 800a686:	f1c0 001c 	rsb	r0, r0, #28
 800a68a:	4403      	add	r3, r0
 800a68c:	9305      	str	r3, [sp, #20]
 800a68e:	9b06      	ldr	r3, [sp, #24]
 800a690:	4403      	add	r3, r0
 800a692:	4405      	add	r5, r0
 800a694:	9306      	str	r3, [sp, #24]
 800a696:	9b05      	ldr	r3, [sp, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dd05      	ble.n	800a6a8 <_dtoa_r+0x828>
 800a69c:	4651      	mov	r1, sl
 800a69e:	461a      	mov	r2, r3
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f001 fe03 	bl	800c2ac <__lshift>
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	9b06      	ldr	r3, [sp, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dd05      	ble.n	800a6ba <_dtoa_r+0x83a>
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f001 fdfa 	bl	800c2ac <__lshift>
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d072      	beq.n	800a7a6 <_dtoa_r+0x926>
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	f001 fe5e 	bl	800c384 <__mcmp>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	da6c      	bge.n	800a7a6 <_dtoa_r+0x926>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4651      	mov	r1, sl
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f001 fbf2 	bl	800bebc <__multadd>
 800a6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a6de:	4682      	mov	sl, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 81b0 	beq.w	800aa46 <_dtoa_r+0xbc6>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	220a      	movs	r2, #10
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f001 fbe5 	bl	800bebc <__multadd>
 800a6f2:	9b01      	ldr	r3, [sp, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	f300 8096 	bgt.w	800a828 <_dtoa_r+0x9a8>
 800a6fc:	9b07      	ldr	r3, [sp, #28]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	dc59      	bgt.n	800a7b6 <_dtoa_r+0x936>
 800a702:	e091      	b.n	800a828 <_dtoa_r+0x9a8>
 800a704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a70a:	e758      	b.n	800a5be <_dtoa_r+0x73e>
 800a70c:	9b04      	ldr	r3, [sp, #16]
 800a70e:	1e5e      	subs	r6, r3, #1
 800a710:	9b08      	ldr	r3, [sp, #32]
 800a712:	42b3      	cmp	r3, r6
 800a714:	bfbf      	itttt	lt
 800a716:	9b08      	ldrlt	r3, [sp, #32]
 800a718:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a71a:	9608      	strlt	r6, [sp, #32]
 800a71c:	1af3      	sublt	r3, r6, r3
 800a71e:	bfb4      	ite	lt
 800a720:	18d2      	addlt	r2, r2, r3
 800a722:	1b9e      	subge	r6, r3, r6
 800a724:	9b04      	ldr	r3, [sp, #16]
 800a726:	bfbc      	itt	lt
 800a728:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a72a:	2600      	movlt	r6, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfb7      	itett	lt
 800a730:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a734:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a738:	1a9d      	sublt	r5, r3, r2
 800a73a:	2300      	movlt	r3, #0
 800a73c:	e741      	b.n	800a5c2 <_dtoa_r+0x742>
 800a73e:	9e08      	ldr	r6, [sp, #32]
 800a740:	9d05      	ldr	r5, [sp, #20]
 800a742:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a744:	e748      	b.n	800a5d8 <_dtoa_r+0x758>
 800a746:	9a08      	ldr	r2, [sp, #32]
 800a748:	e770      	b.n	800a62c <_dtoa_r+0x7ac>
 800a74a:	9b07      	ldr	r3, [sp, #28]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	dc19      	bgt.n	800a784 <_dtoa_r+0x904>
 800a750:	9b02      	ldr	r3, [sp, #8]
 800a752:	b9bb      	cbnz	r3, 800a784 <_dtoa_r+0x904>
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a75a:	b99b      	cbnz	r3, 800a784 <_dtoa_r+0x904>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a762:	0d1b      	lsrs	r3, r3, #20
 800a764:	051b      	lsls	r3, r3, #20
 800a766:	b183      	cbz	r3, 800a78a <_dtoa_r+0x90a>
 800a768:	9b05      	ldr	r3, [sp, #20]
 800a76a:	3301      	adds	r3, #1
 800a76c:	9305      	str	r3, [sp, #20]
 800a76e:	9b06      	ldr	r3, [sp, #24]
 800a770:	3301      	adds	r3, #1
 800a772:	9306      	str	r3, [sp, #24]
 800a774:	f04f 0801 	mov.w	r8, #1
 800a778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f47f af6f 	bne.w	800a65e <_dtoa_r+0x7de>
 800a780:	2001      	movs	r0, #1
 800a782:	e774      	b.n	800a66e <_dtoa_r+0x7ee>
 800a784:	f04f 0800 	mov.w	r8, #0
 800a788:	e7f6      	b.n	800a778 <_dtoa_r+0x8f8>
 800a78a:	4698      	mov	r8, r3
 800a78c:	e7f4      	b.n	800a778 <_dtoa_r+0x8f8>
 800a78e:	d082      	beq.n	800a696 <_dtoa_r+0x816>
 800a790:	9a05      	ldr	r2, [sp, #20]
 800a792:	331c      	adds	r3, #28
 800a794:	441a      	add	r2, r3
 800a796:	9205      	str	r2, [sp, #20]
 800a798:	9a06      	ldr	r2, [sp, #24]
 800a79a:	441a      	add	r2, r3
 800a79c:	441d      	add	r5, r3
 800a79e:	9206      	str	r2, [sp, #24]
 800a7a0:	e779      	b.n	800a696 <_dtoa_r+0x816>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	e7f4      	b.n	800a790 <_dtoa_r+0x910>
 800a7a6:	9b04      	ldr	r3, [sp, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dc37      	bgt.n	800a81c <_dtoa_r+0x99c>
 800a7ac:	9b07      	ldr	r3, [sp, #28]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	dd34      	ble.n	800a81c <_dtoa_r+0x99c>
 800a7b2:	9b04      	ldr	r3, [sp, #16]
 800a7b4:	9301      	str	r3, [sp, #4]
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	b963      	cbnz	r3, 800a7d4 <_dtoa_r+0x954>
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	2205      	movs	r2, #5
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f001 fb7c 	bl	800bebc <__multadd>
 800a7c4:	4601      	mov	r1, r0
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	f001 fddb 	bl	800c384 <__mcmp>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f73f adbb 	bgt.w	800a34a <_dtoa_r+0x4ca>
 800a7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d6:	9d00      	ldr	r5, [sp, #0]
 800a7d8:	ea6f 0b03 	mvn.w	fp, r3
 800a7dc:	f04f 0800 	mov.w	r8, #0
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f001 fb48 	bl	800be78 <_Bfree>
 800a7e8:	2f00      	cmp	r7, #0
 800a7ea:	f43f aeab 	beq.w	800a544 <_dtoa_r+0x6c4>
 800a7ee:	f1b8 0f00 	cmp.w	r8, #0
 800a7f2:	d005      	beq.n	800a800 <_dtoa_r+0x980>
 800a7f4:	45b8      	cmp	r8, r7
 800a7f6:	d003      	beq.n	800a800 <_dtoa_r+0x980>
 800a7f8:	4641      	mov	r1, r8
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f001 fb3c 	bl	800be78 <_Bfree>
 800a800:	4639      	mov	r1, r7
 800a802:	4620      	mov	r0, r4
 800a804:	f001 fb38 	bl	800be78 <_Bfree>
 800a808:	e69c      	b.n	800a544 <_dtoa_r+0x6c4>
 800a80a:	2600      	movs	r6, #0
 800a80c:	4637      	mov	r7, r6
 800a80e:	e7e1      	b.n	800a7d4 <_dtoa_r+0x954>
 800a810:	46bb      	mov	fp, r7
 800a812:	4637      	mov	r7, r6
 800a814:	e599      	b.n	800a34a <_dtoa_r+0x4ca>
 800a816:	bf00      	nop
 800a818:	40240000 	.word	0x40240000
 800a81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 80c8 	beq.w	800a9b4 <_dtoa_r+0xb34>
 800a824:	9b04      	ldr	r3, [sp, #16]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	2d00      	cmp	r5, #0
 800a82a:	dd05      	ble.n	800a838 <_dtoa_r+0x9b8>
 800a82c:	4639      	mov	r1, r7
 800a82e:	462a      	mov	r2, r5
 800a830:	4620      	mov	r0, r4
 800a832:	f001 fd3b 	bl	800c2ac <__lshift>
 800a836:	4607      	mov	r7, r0
 800a838:	f1b8 0f00 	cmp.w	r8, #0
 800a83c:	d05b      	beq.n	800a8f6 <_dtoa_r+0xa76>
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	4620      	mov	r0, r4
 800a842:	f001 fad9 	bl	800bdf8 <_Balloc>
 800a846:	4605      	mov	r5, r0
 800a848:	b928      	cbnz	r0, 800a856 <_dtoa_r+0x9d6>
 800a84a:	4b83      	ldr	r3, [pc, #524]	; (800aa58 <_dtoa_r+0xbd8>)
 800a84c:	4602      	mov	r2, r0
 800a84e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a852:	f7ff bb2e 	b.w	8009eb2 <_dtoa_r+0x32>
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	3202      	adds	r2, #2
 800a85a:	0092      	lsls	r2, r2, #2
 800a85c:	f107 010c 	add.w	r1, r7, #12
 800a860:	300c      	adds	r0, #12
 800a862:	f7ff fa5c 	bl	8009d1e <memcpy>
 800a866:	2201      	movs	r2, #1
 800a868:	4629      	mov	r1, r5
 800a86a:	4620      	mov	r0, r4
 800a86c:	f001 fd1e 	bl	800c2ac <__lshift>
 800a870:	9b00      	ldr	r3, [sp, #0]
 800a872:	3301      	adds	r3, #1
 800a874:	9304      	str	r3, [sp, #16]
 800a876:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a87a:	4413      	add	r3, r2
 800a87c:	9308      	str	r3, [sp, #32]
 800a87e:	9b02      	ldr	r3, [sp, #8]
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	46b8      	mov	r8, r7
 800a886:	9306      	str	r3, [sp, #24]
 800a888:	4607      	mov	r7, r0
 800a88a:	9b04      	ldr	r3, [sp, #16]
 800a88c:	4631      	mov	r1, r6
 800a88e:	3b01      	subs	r3, #1
 800a890:	4650      	mov	r0, sl
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	f7ff fa6a 	bl	8009d6c <quorem>
 800a898:	4641      	mov	r1, r8
 800a89a:	9002      	str	r0, [sp, #8]
 800a89c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8a0:	4650      	mov	r0, sl
 800a8a2:	f001 fd6f 	bl	800c384 <__mcmp>
 800a8a6:	463a      	mov	r2, r7
 800a8a8:	9005      	str	r0, [sp, #20]
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f001 fd85 	bl	800c3bc <__mdiff>
 800a8b2:	68c2      	ldr	r2, [r0, #12]
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	bb02      	cbnz	r2, 800a8fa <_dtoa_r+0xa7a>
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	4650      	mov	r0, sl
 800a8bc:	f001 fd62 	bl	800c384 <__mcmp>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c8:	f001 fad6 	bl	800be78 <_Bfree>
 800a8cc:	9b07      	ldr	r3, [sp, #28]
 800a8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8d0:	9d04      	ldr	r5, [sp, #16]
 800a8d2:	ea43 0102 	orr.w	r1, r3, r2
 800a8d6:	9b06      	ldr	r3, [sp, #24]
 800a8d8:	4319      	orrs	r1, r3
 800a8da:	d110      	bne.n	800a8fe <_dtoa_r+0xa7e>
 800a8dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8e0:	d029      	beq.n	800a936 <_dtoa_r+0xab6>
 800a8e2:	9b05      	ldr	r3, [sp, #20]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dd02      	ble.n	800a8ee <_dtoa_r+0xa6e>
 800a8e8:	9b02      	ldr	r3, [sp, #8]
 800a8ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	f883 9000 	strb.w	r9, [r3]
 800a8f4:	e774      	b.n	800a7e0 <_dtoa_r+0x960>
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	e7ba      	b.n	800a870 <_dtoa_r+0x9f0>
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	e7e1      	b.n	800a8c2 <_dtoa_r+0xa42>
 800a8fe:	9b05      	ldr	r3, [sp, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	db04      	blt.n	800a90e <_dtoa_r+0xa8e>
 800a904:	9907      	ldr	r1, [sp, #28]
 800a906:	430b      	orrs	r3, r1
 800a908:	9906      	ldr	r1, [sp, #24]
 800a90a:	430b      	orrs	r3, r1
 800a90c:	d120      	bne.n	800a950 <_dtoa_r+0xad0>
 800a90e:	2a00      	cmp	r2, #0
 800a910:	dded      	ble.n	800a8ee <_dtoa_r+0xa6e>
 800a912:	4651      	mov	r1, sl
 800a914:	2201      	movs	r2, #1
 800a916:	4620      	mov	r0, r4
 800a918:	f001 fcc8 	bl	800c2ac <__lshift>
 800a91c:	4631      	mov	r1, r6
 800a91e:	4682      	mov	sl, r0
 800a920:	f001 fd30 	bl	800c384 <__mcmp>
 800a924:	2800      	cmp	r0, #0
 800a926:	dc03      	bgt.n	800a930 <_dtoa_r+0xab0>
 800a928:	d1e1      	bne.n	800a8ee <_dtoa_r+0xa6e>
 800a92a:	f019 0f01 	tst.w	r9, #1
 800a92e:	d0de      	beq.n	800a8ee <_dtoa_r+0xa6e>
 800a930:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a934:	d1d8      	bne.n	800a8e8 <_dtoa_r+0xa68>
 800a936:	9a01      	ldr	r2, [sp, #4]
 800a938:	2339      	movs	r3, #57	; 0x39
 800a93a:	7013      	strb	r3, [r2, #0]
 800a93c:	462b      	mov	r3, r5
 800a93e:	461d      	mov	r5, r3
 800a940:	3b01      	subs	r3, #1
 800a942:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a946:	2a39      	cmp	r2, #57	; 0x39
 800a948:	d06c      	beq.n	800aa24 <_dtoa_r+0xba4>
 800a94a:	3201      	adds	r2, #1
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	e747      	b.n	800a7e0 <_dtoa_r+0x960>
 800a950:	2a00      	cmp	r2, #0
 800a952:	dd07      	ble.n	800a964 <_dtoa_r+0xae4>
 800a954:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a958:	d0ed      	beq.n	800a936 <_dtoa_r+0xab6>
 800a95a:	9a01      	ldr	r2, [sp, #4]
 800a95c:	f109 0301 	add.w	r3, r9, #1
 800a960:	7013      	strb	r3, [r2, #0]
 800a962:	e73d      	b.n	800a7e0 <_dtoa_r+0x960>
 800a964:	9b04      	ldr	r3, [sp, #16]
 800a966:	9a08      	ldr	r2, [sp, #32]
 800a968:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d043      	beq.n	800a9f8 <_dtoa_r+0xb78>
 800a970:	4651      	mov	r1, sl
 800a972:	2300      	movs	r3, #0
 800a974:	220a      	movs	r2, #10
 800a976:	4620      	mov	r0, r4
 800a978:	f001 faa0 	bl	800bebc <__multadd>
 800a97c:	45b8      	cmp	r8, r7
 800a97e:	4682      	mov	sl, r0
 800a980:	f04f 0300 	mov.w	r3, #0
 800a984:	f04f 020a 	mov.w	r2, #10
 800a988:	4641      	mov	r1, r8
 800a98a:	4620      	mov	r0, r4
 800a98c:	d107      	bne.n	800a99e <_dtoa_r+0xb1e>
 800a98e:	f001 fa95 	bl	800bebc <__multadd>
 800a992:	4680      	mov	r8, r0
 800a994:	4607      	mov	r7, r0
 800a996:	9b04      	ldr	r3, [sp, #16]
 800a998:	3301      	adds	r3, #1
 800a99a:	9304      	str	r3, [sp, #16]
 800a99c:	e775      	b.n	800a88a <_dtoa_r+0xa0a>
 800a99e:	f001 fa8d 	bl	800bebc <__multadd>
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	4680      	mov	r8, r0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	220a      	movs	r2, #10
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f001 fa86 	bl	800bebc <__multadd>
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	e7f0      	b.n	800a996 <_dtoa_r+0xb16>
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	9d00      	ldr	r5, [sp, #0]
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	4650      	mov	r0, sl
 800a9be:	f7ff f9d5 	bl	8009d6c <quorem>
 800a9c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9c6:	9b00      	ldr	r3, [sp, #0]
 800a9c8:	f805 9b01 	strb.w	r9, [r5], #1
 800a9cc:	1aea      	subs	r2, r5, r3
 800a9ce:	9b01      	ldr	r3, [sp, #4]
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	dd07      	ble.n	800a9e4 <_dtoa_r+0xb64>
 800a9d4:	4651      	mov	r1, sl
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	220a      	movs	r2, #10
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f001 fa6e 	bl	800bebc <__multadd>
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	e7ea      	b.n	800a9ba <_dtoa_r+0xb3a>
 800a9e4:	9b01      	ldr	r3, [sp, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfc8      	it	gt
 800a9ea:	461d      	movgt	r5, r3
 800a9ec:	9b00      	ldr	r3, [sp, #0]
 800a9ee:	bfd8      	it	le
 800a9f0:	2501      	movle	r5, #1
 800a9f2:	441d      	add	r5, r3
 800a9f4:	f04f 0800 	mov.w	r8, #0
 800a9f8:	4651      	mov	r1, sl
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f001 fc55 	bl	800c2ac <__lshift>
 800aa02:	4631      	mov	r1, r6
 800aa04:	4682      	mov	sl, r0
 800aa06:	f001 fcbd 	bl	800c384 <__mcmp>
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	dc96      	bgt.n	800a93c <_dtoa_r+0xabc>
 800aa0e:	d102      	bne.n	800aa16 <_dtoa_r+0xb96>
 800aa10:	f019 0f01 	tst.w	r9, #1
 800aa14:	d192      	bne.n	800a93c <_dtoa_r+0xabc>
 800aa16:	462b      	mov	r3, r5
 800aa18:	461d      	mov	r5, r3
 800aa1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa1e:	2a30      	cmp	r2, #48	; 0x30
 800aa20:	d0fa      	beq.n	800aa18 <_dtoa_r+0xb98>
 800aa22:	e6dd      	b.n	800a7e0 <_dtoa_r+0x960>
 800aa24:	9a00      	ldr	r2, [sp, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d189      	bne.n	800a93e <_dtoa_r+0xabe>
 800aa2a:	f10b 0b01 	add.w	fp, fp, #1
 800aa2e:	2331      	movs	r3, #49	; 0x31
 800aa30:	e796      	b.n	800a960 <_dtoa_r+0xae0>
 800aa32:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <_dtoa_r+0xbdc>)
 800aa34:	f7ff ba99 	b.w	8009f6a <_dtoa_r+0xea>
 800aa38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f47f aa6d 	bne.w	8009f1a <_dtoa_r+0x9a>
 800aa40:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <_dtoa_r+0xbe0>)
 800aa42:	f7ff ba92 	b.w	8009f6a <_dtoa_r+0xea>
 800aa46:	9b01      	ldr	r3, [sp, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dcb5      	bgt.n	800a9b8 <_dtoa_r+0xb38>
 800aa4c:	9b07      	ldr	r3, [sp, #28]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	f73f aeb1 	bgt.w	800a7b6 <_dtoa_r+0x936>
 800aa54:	e7b0      	b.n	800a9b8 <_dtoa_r+0xb38>
 800aa56:	bf00      	nop
 800aa58:	0800d31d 	.word	0x0800d31d
 800aa5c:	0800d3b5 	.word	0x0800d3b5
 800aa60:	0800d2a1 	.word	0x0800d2a1

0800aa64 <_free_r>:
 800aa64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa66:	2900      	cmp	r1, #0
 800aa68:	d044      	beq.n	800aaf4 <_free_r+0x90>
 800aa6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa6e:	9001      	str	r0, [sp, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f1a1 0404 	sub.w	r4, r1, #4
 800aa76:	bfb8      	it	lt
 800aa78:	18e4      	addlt	r4, r4, r3
 800aa7a:	f001 f9b1 	bl	800bde0 <__malloc_lock>
 800aa7e:	4a1e      	ldr	r2, [pc, #120]	; (800aaf8 <_free_r+0x94>)
 800aa80:	9801      	ldr	r0, [sp, #4]
 800aa82:	6813      	ldr	r3, [r2, #0]
 800aa84:	b933      	cbnz	r3, 800aa94 <_free_r+0x30>
 800aa86:	6063      	str	r3, [r4, #4]
 800aa88:	6014      	str	r4, [r2, #0]
 800aa8a:	b003      	add	sp, #12
 800aa8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa90:	f001 b9ac 	b.w	800bdec <__malloc_unlock>
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	d908      	bls.n	800aaaa <_free_r+0x46>
 800aa98:	6825      	ldr	r5, [r4, #0]
 800aa9a:	1961      	adds	r1, r4, r5
 800aa9c:	428b      	cmp	r3, r1
 800aa9e:	bf01      	itttt	eq
 800aaa0:	6819      	ldreq	r1, [r3, #0]
 800aaa2:	685b      	ldreq	r3, [r3, #4]
 800aaa4:	1949      	addeq	r1, r1, r5
 800aaa6:	6021      	streq	r1, [r4, #0]
 800aaa8:	e7ed      	b.n	800aa86 <_free_r+0x22>
 800aaaa:	461a      	mov	r2, r3
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	b10b      	cbz	r3, 800aab4 <_free_r+0x50>
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	d9fa      	bls.n	800aaaa <_free_r+0x46>
 800aab4:	6811      	ldr	r1, [r2, #0]
 800aab6:	1855      	adds	r5, r2, r1
 800aab8:	42a5      	cmp	r5, r4
 800aaba:	d10b      	bne.n	800aad4 <_free_r+0x70>
 800aabc:	6824      	ldr	r4, [r4, #0]
 800aabe:	4421      	add	r1, r4
 800aac0:	1854      	adds	r4, r2, r1
 800aac2:	42a3      	cmp	r3, r4
 800aac4:	6011      	str	r1, [r2, #0]
 800aac6:	d1e0      	bne.n	800aa8a <_free_r+0x26>
 800aac8:	681c      	ldr	r4, [r3, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	6053      	str	r3, [r2, #4]
 800aace:	440c      	add	r4, r1
 800aad0:	6014      	str	r4, [r2, #0]
 800aad2:	e7da      	b.n	800aa8a <_free_r+0x26>
 800aad4:	d902      	bls.n	800aadc <_free_r+0x78>
 800aad6:	230c      	movs	r3, #12
 800aad8:	6003      	str	r3, [r0, #0]
 800aada:	e7d6      	b.n	800aa8a <_free_r+0x26>
 800aadc:	6825      	ldr	r5, [r4, #0]
 800aade:	1961      	adds	r1, r4, r5
 800aae0:	428b      	cmp	r3, r1
 800aae2:	bf04      	itt	eq
 800aae4:	6819      	ldreq	r1, [r3, #0]
 800aae6:	685b      	ldreq	r3, [r3, #4]
 800aae8:	6063      	str	r3, [r4, #4]
 800aaea:	bf04      	itt	eq
 800aaec:	1949      	addeq	r1, r1, r5
 800aaee:	6021      	streq	r1, [r4, #0]
 800aaf0:	6054      	str	r4, [r2, #4]
 800aaf2:	e7ca      	b.n	800aa8a <_free_r+0x26>
 800aaf4:	b003      	add	sp, #12
 800aaf6:	bd30      	pop	{r4, r5, pc}
 800aaf8:	20007920 	.word	0x20007920

0800aafc <rshift>:
 800aafc:	6903      	ldr	r3, [r0, #16]
 800aafe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab0a:	f100 0414 	add.w	r4, r0, #20
 800ab0e:	dd45      	ble.n	800ab9c <rshift+0xa0>
 800ab10:	f011 011f 	ands.w	r1, r1, #31
 800ab14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab1c:	d10c      	bne.n	800ab38 <rshift+0x3c>
 800ab1e:	f100 0710 	add.w	r7, r0, #16
 800ab22:	4629      	mov	r1, r5
 800ab24:	42b1      	cmp	r1, r6
 800ab26:	d334      	bcc.n	800ab92 <rshift+0x96>
 800ab28:	1a9b      	subs	r3, r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	1eea      	subs	r2, r5, #3
 800ab2e:	4296      	cmp	r6, r2
 800ab30:	bf38      	it	cc
 800ab32:	2300      	movcc	r3, #0
 800ab34:	4423      	add	r3, r4
 800ab36:	e015      	b.n	800ab64 <rshift+0x68>
 800ab38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab3c:	f1c1 0820 	rsb	r8, r1, #32
 800ab40:	40cf      	lsrs	r7, r1
 800ab42:	f105 0e04 	add.w	lr, r5, #4
 800ab46:	46a1      	mov	r9, r4
 800ab48:	4576      	cmp	r6, lr
 800ab4a:	46f4      	mov	ip, lr
 800ab4c:	d815      	bhi.n	800ab7a <rshift+0x7e>
 800ab4e:	1a9a      	subs	r2, r3, r2
 800ab50:	0092      	lsls	r2, r2, #2
 800ab52:	3a04      	subs	r2, #4
 800ab54:	3501      	adds	r5, #1
 800ab56:	42ae      	cmp	r6, r5
 800ab58:	bf38      	it	cc
 800ab5a:	2200      	movcc	r2, #0
 800ab5c:	18a3      	adds	r3, r4, r2
 800ab5e:	50a7      	str	r7, [r4, r2]
 800ab60:	b107      	cbz	r7, 800ab64 <rshift+0x68>
 800ab62:	3304      	adds	r3, #4
 800ab64:	1b1a      	subs	r2, r3, r4
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab6c:	bf08      	it	eq
 800ab6e:	2300      	moveq	r3, #0
 800ab70:	6102      	str	r2, [r0, #16]
 800ab72:	bf08      	it	eq
 800ab74:	6143      	streq	r3, [r0, #20]
 800ab76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab7a:	f8dc c000 	ldr.w	ip, [ip]
 800ab7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab82:	ea4c 0707 	orr.w	r7, ip, r7
 800ab86:	f849 7b04 	str.w	r7, [r9], #4
 800ab8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab8e:	40cf      	lsrs	r7, r1
 800ab90:	e7da      	b.n	800ab48 <rshift+0x4c>
 800ab92:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab96:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab9a:	e7c3      	b.n	800ab24 <rshift+0x28>
 800ab9c:	4623      	mov	r3, r4
 800ab9e:	e7e1      	b.n	800ab64 <rshift+0x68>

0800aba0 <__hexdig_fun>:
 800aba0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aba4:	2b09      	cmp	r3, #9
 800aba6:	d802      	bhi.n	800abae <__hexdig_fun+0xe>
 800aba8:	3820      	subs	r0, #32
 800abaa:	b2c0      	uxtb	r0, r0
 800abac:	4770      	bx	lr
 800abae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800abb2:	2b05      	cmp	r3, #5
 800abb4:	d801      	bhi.n	800abba <__hexdig_fun+0x1a>
 800abb6:	3847      	subs	r0, #71	; 0x47
 800abb8:	e7f7      	b.n	800abaa <__hexdig_fun+0xa>
 800abba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800abbe:	2b05      	cmp	r3, #5
 800abc0:	d801      	bhi.n	800abc6 <__hexdig_fun+0x26>
 800abc2:	3827      	subs	r0, #39	; 0x27
 800abc4:	e7f1      	b.n	800abaa <__hexdig_fun+0xa>
 800abc6:	2000      	movs	r0, #0
 800abc8:	4770      	bx	lr
	...

0800abcc <__gethex>:
 800abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd0:	4617      	mov	r7, r2
 800abd2:	680a      	ldr	r2, [r1, #0]
 800abd4:	b085      	sub	sp, #20
 800abd6:	f102 0b02 	add.w	fp, r2, #2
 800abda:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800abde:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800abe2:	4681      	mov	r9, r0
 800abe4:	468a      	mov	sl, r1
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	32fe      	adds	r2, #254	; 0xfe
 800abea:	eb02 030b 	add.w	r3, r2, fp
 800abee:	46d8      	mov	r8, fp
 800abf0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	2830      	cmp	r0, #48	; 0x30
 800abf8:	d0f7      	beq.n	800abea <__gethex+0x1e>
 800abfa:	f7ff ffd1 	bl	800aba0 <__hexdig_fun>
 800abfe:	4604      	mov	r4, r0
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d138      	bne.n	800ac76 <__gethex+0xaa>
 800ac04:	49a7      	ldr	r1, [pc, #668]	; (800aea4 <__gethex+0x2d8>)
 800ac06:	2201      	movs	r2, #1
 800ac08:	4640      	mov	r0, r8
 800ac0a:	f7fe ffe1 	bl	8009bd0 <strncmp>
 800ac0e:	4606      	mov	r6, r0
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d169      	bne.n	800ace8 <__gethex+0x11c>
 800ac14:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ac18:	465d      	mov	r5, fp
 800ac1a:	f7ff ffc1 	bl	800aba0 <__hexdig_fun>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d064      	beq.n	800acec <__gethex+0x120>
 800ac22:	465a      	mov	r2, fp
 800ac24:	7810      	ldrb	r0, [r2, #0]
 800ac26:	2830      	cmp	r0, #48	; 0x30
 800ac28:	4690      	mov	r8, r2
 800ac2a:	f102 0201 	add.w	r2, r2, #1
 800ac2e:	d0f9      	beq.n	800ac24 <__gethex+0x58>
 800ac30:	f7ff ffb6 	bl	800aba0 <__hexdig_fun>
 800ac34:	2301      	movs	r3, #1
 800ac36:	fab0 f480 	clz	r4, r0
 800ac3a:	0964      	lsrs	r4, r4, #5
 800ac3c:	465e      	mov	r6, fp
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	4642      	mov	r2, r8
 800ac42:	4615      	mov	r5, r2
 800ac44:	3201      	adds	r2, #1
 800ac46:	7828      	ldrb	r0, [r5, #0]
 800ac48:	f7ff ffaa 	bl	800aba0 <__hexdig_fun>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d1f8      	bne.n	800ac42 <__gethex+0x76>
 800ac50:	4994      	ldr	r1, [pc, #592]	; (800aea4 <__gethex+0x2d8>)
 800ac52:	2201      	movs	r2, #1
 800ac54:	4628      	mov	r0, r5
 800ac56:	f7fe ffbb 	bl	8009bd0 <strncmp>
 800ac5a:	b978      	cbnz	r0, 800ac7c <__gethex+0xb0>
 800ac5c:	b946      	cbnz	r6, 800ac70 <__gethex+0xa4>
 800ac5e:	1c6e      	adds	r6, r5, #1
 800ac60:	4632      	mov	r2, r6
 800ac62:	4615      	mov	r5, r2
 800ac64:	3201      	adds	r2, #1
 800ac66:	7828      	ldrb	r0, [r5, #0]
 800ac68:	f7ff ff9a 	bl	800aba0 <__hexdig_fun>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d1f8      	bne.n	800ac62 <__gethex+0x96>
 800ac70:	1b73      	subs	r3, r6, r5
 800ac72:	009e      	lsls	r6, r3, #2
 800ac74:	e004      	b.n	800ac80 <__gethex+0xb4>
 800ac76:	2400      	movs	r4, #0
 800ac78:	4626      	mov	r6, r4
 800ac7a:	e7e1      	b.n	800ac40 <__gethex+0x74>
 800ac7c:	2e00      	cmp	r6, #0
 800ac7e:	d1f7      	bne.n	800ac70 <__gethex+0xa4>
 800ac80:	782b      	ldrb	r3, [r5, #0]
 800ac82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac86:	2b50      	cmp	r3, #80	; 0x50
 800ac88:	d13d      	bne.n	800ad06 <__gethex+0x13a>
 800ac8a:	786b      	ldrb	r3, [r5, #1]
 800ac8c:	2b2b      	cmp	r3, #43	; 0x2b
 800ac8e:	d02f      	beq.n	800acf0 <__gethex+0x124>
 800ac90:	2b2d      	cmp	r3, #45	; 0x2d
 800ac92:	d031      	beq.n	800acf8 <__gethex+0x12c>
 800ac94:	1c69      	adds	r1, r5, #1
 800ac96:	f04f 0b00 	mov.w	fp, #0
 800ac9a:	7808      	ldrb	r0, [r1, #0]
 800ac9c:	f7ff ff80 	bl	800aba0 <__hexdig_fun>
 800aca0:	1e42      	subs	r2, r0, #1
 800aca2:	b2d2      	uxtb	r2, r2
 800aca4:	2a18      	cmp	r2, #24
 800aca6:	d82e      	bhi.n	800ad06 <__gethex+0x13a>
 800aca8:	f1a0 0210 	sub.w	r2, r0, #16
 800acac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800acb0:	f7ff ff76 	bl	800aba0 <__hexdig_fun>
 800acb4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800acb8:	fa5f fc8c 	uxtb.w	ip, ip
 800acbc:	f1bc 0f18 	cmp.w	ip, #24
 800acc0:	d91d      	bls.n	800acfe <__gethex+0x132>
 800acc2:	f1bb 0f00 	cmp.w	fp, #0
 800acc6:	d000      	beq.n	800acca <__gethex+0xfe>
 800acc8:	4252      	negs	r2, r2
 800acca:	4416      	add	r6, r2
 800accc:	f8ca 1000 	str.w	r1, [sl]
 800acd0:	b1dc      	cbz	r4, 800ad0a <__gethex+0x13e>
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bf14      	ite	ne
 800acd8:	f04f 0800 	movne.w	r8, #0
 800acdc:	f04f 0806 	moveq.w	r8, #6
 800ace0:	4640      	mov	r0, r8
 800ace2:	b005      	add	sp, #20
 800ace4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace8:	4645      	mov	r5, r8
 800acea:	4626      	mov	r6, r4
 800acec:	2401      	movs	r4, #1
 800acee:	e7c7      	b.n	800ac80 <__gethex+0xb4>
 800acf0:	f04f 0b00 	mov.w	fp, #0
 800acf4:	1ca9      	adds	r1, r5, #2
 800acf6:	e7d0      	b.n	800ac9a <__gethex+0xce>
 800acf8:	f04f 0b01 	mov.w	fp, #1
 800acfc:	e7fa      	b.n	800acf4 <__gethex+0x128>
 800acfe:	230a      	movs	r3, #10
 800ad00:	fb03 0002 	mla	r0, r3, r2, r0
 800ad04:	e7d0      	b.n	800aca8 <__gethex+0xdc>
 800ad06:	4629      	mov	r1, r5
 800ad08:	e7e0      	b.n	800accc <__gethex+0x100>
 800ad0a:	eba5 0308 	sub.w	r3, r5, r8
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	4621      	mov	r1, r4
 800ad12:	2b07      	cmp	r3, #7
 800ad14:	dc0a      	bgt.n	800ad2c <__gethex+0x160>
 800ad16:	4648      	mov	r0, r9
 800ad18:	f001 f86e 	bl	800bdf8 <_Balloc>
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	b940      	cbnz	r0, 800ad32 <__gethex+0x166>
 800ad20:	4b61      	ldr	r3, [pc, #388]	; (800aea8 <__gethex+0x2dc>)
 800ad22:	4602      	mov	r2, r0
 800ad24:	21e4      	movs	r1, #228	; 0xe4
 800ad26:	4861      	ldr	r0, [pc, #388]	; (800aeac <__gethex+0x2e0>)
 800ad28:	f001 fe28 	bl	800c97c <__assert_func>
 800ad2c:	3101      	adds	r1, #1
 800ad2e:	105b      	asrs	r3, r3, #1
 800ad30:	e7ef      	b.n	800ad12 <__gethex+0x146>
 800ad32:	f100 0a14 	add.w	sl, r0, #20
 800ad36:	2300      	movs	r3, #0
 800ad38:	495a      	ldr	r1, [pc, #360]	; (800aea4 <__gethex+0x2d8>)
 800ad3a:	f8cd a004 	str.w	sl, [sp, #4]
 800ad3e:	469b      	mov	fp, r3
 800ad40:	45a8      	cmp	r8, r5
 800ad42:	d342      	bcc.n	800adca <__gethex+0x1fe>
 800ad44:	9801      	ldr	r0, [sp, #4]
 800ad46:	f840 bb04 	str.w	fp, [r0], #4
 800ad4a:	eba0 000a 	sub.w	r0, r0, sl
 800ad4e:	1080      	asrs	r0, r0, #2
 800ad50:	6120      	str	r0, [r4, #16]
 800ad52:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ad56:	4658      	mov	r0, fp
 800ad58:	f001 f940 	bl	800bfdc <__hi0bits>
 800ad5c:	683d      	ldr	r5, [r7, #0]
 800ad5e:	eba8 0000 	sub.w	r0, r8, r0
 800ad62:	42a8      	cmp	r0, r5
 800ad64:	dd59      	ble.n	800ae1a <__gethex+0x24e>
 800ad66:	eba0 0805 	sub.w	r8, r0, r5
 800ad6a:	4641      	mov	r1, r8
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f001 fccf 	bl	800c710 <__any_on>
 800ad72:	4683      	mov	fp, r0
 800ad74:	b1b8      	cbz	r0, 800ada6 <__gethex+0x1da>
 800ad76:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800ad7a:	1159      	asrs	r1, r3, #5
 800ad7c:	f003 021f 	and.w	r2, r3, #31
 800ad80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ad84:	f04f 0b01 	mov.w	fp, #1
 800ad88:	fa0b f202 	lsl.w	r2, fp, r2
 800ad8c:	420a      	tst	r2, r1
 800ad8e:	d00a      	beq.n	800ada6 <__gethex+0x1da>
 800ad90:	455b      	cmp	r3, fp
 800ad92:	dd06      	ble.n	800ada2 <__gethex+0x1d6>
 800ad94:	f1a8 0102 	sub.w	r1, r8, #2
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f001 fcb9 	bl	800c710 <__any_on>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d138      	bne.n	800ae14 <__gethex+0x248>
 800ada2:	f04f 0b02 	mov.w	fp, #2
 800ada6:	4641      	mov	r1, r8
 800ada8:	4620      	mov	r0, r4
 800adaa:	f7ff fea7 	bl	800aafc <rshift>
 800adae:	4446      	add	r6, r8
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	42b3      	cmp	r3, r6
 800adb4:	da41      	bge.n	800ae3a <__gethex+0x26e>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4648      	mov	r0, r9
 800adba:	f001 f85d 	bl	800be78 <_Bfree>
 800adbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adc0:	2300      	movs	r3, #0
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800adc8:	e78a      	b.n	800ace0 <__gethex+0x114>
 800adca:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800adce:	2a2e      	cmp	r2, #46	; 0x2e
 800add0:	d014      	beq.n	800adfc <__gethex+0x230>
 800add2:	2b20      	cmp	r3, #32
 800add4:	d106      	bne.n	800ade4 <__gethex+0x218>
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	f843 bb04 	str.w	fp, [r3], #4
 800addc:	f04f 0b00 	mov.w	fp, #0
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	465b      	mov	r3, fp
 800ade4:	7828      	ldrb	r0, [r5, #0]
 800ade6:	9303      	str	r3, [sp, #12]
 800ade8:	f7ff feda 	bl	800aba0 <__hexdig_fun>
 800adec:	9b03      	ldr	r3, [sp, #12]
 800adee:	f000 000f 	and.w	r0, r0, #15
 800adf2:	4098      	lsls	r0, r3
 800adf4:	ea4b 0b00 	orr.w	fp, fp, r0
 800adf8:	3304      	adds	r3, #4
 800adfa:	e7a1      	b.n	800ad40 <__gethex+0x174>
 800adfc:	45a8      	cmp	r8, r5
 800adfe:	d8e8      	bhi.n	800add2 <__gethex+0x206>
 800ae00:	2201      	movs	r2, #1
 800ae02:	4628      	mov	r0, r5
 800ae04:	9303      	str	r3, [sp, #12]
 800ae06:	f7fe fee3 	bl	8009bd0 <strncmp>
 800ae0a:	4926      	ldr	r1, [pc, #152]	; (800aea4 <__gethex+0x2d8>)
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d1df      	bne.n	800add2 <__gethex+0x206>
 800ae12:	e795      	b.n	800ad40 <__gethex+0x174>
 800ae14:	f04f 0b03 	mov.w	fp, #3
 800ae18:	e7c5      	b.n	800ada6 <__gethex+0x1da>
 800ae1a:	da0b      	bge.n	800ae34 <__gethex+0x268>
 800ae1c:	eba5 0800 	sub.w	r8, r5, r0
 800ae20:	4621      	mov	r1, r4
 800ae22:	4642      	mov	r2, r8
 800ae24:	4648      	mov	r0, r9
 800ae26:	f001 fa41 	bl	800c2ac <__lshift>
 800ae2a:	eba6 0608 	sub.w	r6, r6, r8
 800ae2e:	4604      	mov	r4, r0
 800ae30:	f100 0a14 	add.w	sl, r0, #20
 800ae34:	f04f 0b00 	mov.w	fp, #0
 800ae38:	e7ba      	b.n	800adb0 <__gethex+0x1e4>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	42b3      	cmp	r3, r6
 800ae3e:	dd73      	ble.n	800af28 <__gethex+0x35c>
 800ae40:	1b9e      	subs	r6, r3, r6
 800ae42:	42b5      	cmp	r5, r6
 800ae44:	dc34      	bgt.n	800aeb0 <__gethex+0x2e4>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d023      	beq.n	800ae94 <__gethex+0x2c8>
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	d025      	beq.n	800ae9c <__gethex+0x2d0>
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d115      	bne.n	800ae80 <__gethex+0x2b4>
 800ae54:	42b5      	cmp	r5, r6
 800ae56:	d113      	bne.n	800ae80 <__gethex+0x2b4>
 800ae58:	2d01      	cmp	r5, #1
 800ae5a:	d10b      	bne.n	800ae74 <__gethex+0x2a8>
 800ae5c:	9a02      	ldr	r2, [sp, #8]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	2301      	movs	r3, #1
 800ae64:	6123      	str	r3, [r4, #16]
 800ae66:	f8ca 3000 	str.w	r3, [sl]
 800ae6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae6c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ae70:	601c      	str	r4, [r3, #0]
 800ae72:	e735      	b.n	800ace0 <__gethex+0x114>
 800ae74:	1e69      	subs	r1, r5, #1
 800ae76:	4620      	mov	r0, r4
 800ae78:	f001 fc4a 	bl	800c710 <__any_on>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d1ed      	bne.n	800ae5c <__gethex+0x290>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4648      	mov	r0, r9
 800ae84:	f000 fff8 	bl	800be78 <_Bfree>
 800ae88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	6013      	str	r3, [r2, #0]
 800ae8e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ae92:	e725      	b.n	800ace0 <__gethex+0x114>
 800ae94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1f2      	bne.n	800ae80 <__gethex+0x2b4>
 800ae9a:	e7df      	b.n	800ae5c <__gethex+0x290>
 800ae9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1dc      	bne.n	800ae5c <__gethex+0x290>
 800aea2:	e7ed      	b.n	800ae80 <__gethex+0x2b4>
 800aea4:	0800d143 	.word	0x0800d143
 800aea8:	0800d31d 	.word	0x0800d31d
 800aeac:	0800d32e 	.word	0x0800d32e
 800aeb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800aeb4:	f1bb 0f00 	cmp.w	fp, #0
 800aeb8:	d133      	bne.n	800af22 <__gethex+0x356>
 800aeba:	f1b8 0f00 	cmp.w	r8, #0
 800aebe:	d004      	beq.n	800aeca <__gethex+0x2fe>
 800aec0:	4641      	mov	r1, r8
 800aec2:	4620      	mov	r0, r4
 800aec4:	f001 fc24 	bl	800c710 <__any_on>
 800aec8:	4683      	mov	fp, r0
 800aeca:	ea4f 1268 	mov.w	r2, r8, asr #5
 800aece:	2301      	movs	r3, #1
 800aed0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aed4:	f008 081f 	and.w	r8, r8, #31
 800aed8:	fa03 f308 	lsl.w	r3, r3, r8
 800aedc:	4213      	tst	r3, r2
 800aede:	4631      	mov	r1, r6
 800aee0:	4620      	mov	r0, r4
 800aee2:	bf18      	it	ne
 800aee4:	f04b 0b02 	orrne.w	fp, fp, #2
 800aee8:	1bad      	subs	r5, r5, r6
 800aeea:	f7ff fe07 	bl	800aafc <rshift>
 800aeee:	687e      	ldr	r6, [r7, #4]
 800aef0:	f04f 0802 	mov.w	r8, #2
 800aef4:	f1bb 0f00 	cmp.w	fp, #0
 800aef8:	d04a      	beq.n	800af90 <__gethex+0x3c4>
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d016      	beq.n	800af2e <__gethex+0x362>
 800af00:	2b03      	cmp	r3, #3
 800af02:	d018      	beq.n	800af36 <__gethex+0x36a>
 800af04:	2b01      	cmp	r3, #1
 800af06:	d109      	bne.n	800af1c <__gethex+0x350>
 800af08:	f01b 0f02 	tst.w	fp, #2
 800af0c:	d006      	beq.n	800af1c <__gethex+0x350>
 800af0e:	f8da 3000 	ldr.w	r3, [sl]
 800af12:	ea4b 0b03 	orr.w	fp, fp, r3
 800af16:	f01b 0f01 	tst.w	fp, #1
 800af1a:	d10f      	bne.n	800af3c <__gethex+0x370>
 800af1c:	f048 0810 	orr.w	r8, r8, #16
 800af20:	e036      	b.n	800af90 <__gethex+0x3c4>
 800af22:	f04f 0b01 	mov.w	fp, #1
 800af26:	e7d0      	b.n	800aeca <__gethex+0x2fe>
 800af28:	f04f 0801 	mov.w	r8, #1
 800af2c:	e7e2      	b.n	800aef4 <__gethex+0x328>
 800af2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af30:	f1c3 0301 	rsb	r3, r3, #1
 800af34:	930f      	str	r3, [sp, #60]	; 0x3c
 800af36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0ef      	beq.n	800af1c <__gethex+0x350>
 800af3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af40:	f104 0214 	add.w	r2, r4, #20
 800af44:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800af4e:	2300      	movs	r3, #0
 800af50:	4694      	mov	ip, r2
 800af52:	f852 1b04 	ldr.w	r1, [r2], #4
 800af56:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800af5a:	d01e      	beq.n	800af9a <__gethex+0x3ce>
 800af5c:	3101      	adds	r1, #1
 800af5e:	f8cc 1000 	str.w	r1, [ip]
 800af62:	f1b8 0f02 	cmp.w	r8, #2
 800af66:	f104 0214 	add.w	r2, r4, #20
 800af6a:	d13d      	bne.n	800afe8 <__gethex+0x41c>
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	3b01      	subs	r3, #1
 800af70:	42ab      	cmp	r3, r5
 800af72:	d10b      	bne.n	800af8c <__gethex+0x3c0>
 800af74:	1169      	asrs	r1, r5, #5
 800af76:	2301      	movs	r3, #1
 800af78:	f005 051f 	and.w	r5, r5, #31
 800af7c:	fa03 f505 	lsl.w	r5, r3, r5
 800af80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af84:	421d      	tst	r5, r3
 800af86:	bf18      	it	ne
 800af88:	f04f 0801 	movne.w	r8, #1
 800af8c:	f048 0820 	orr.w	r8, r8, #32
 800af90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af92:	601c      	str	r4, [r3, #0]
 800af94:	9b02      	ldr	r3, [sp, #8]
 800af96:	601e      	str	r6, [r3, #0]
 800af98:	e6a2      	b.n	800ace0 <__gethex+0x114>
 800af9a:	4290      	cmp	r0, r2
 800af9c:	f842 3c04 	str.w	r3, [r2, #-4]
 800afa0:	d8d6      	bhi.n	800af50 <__gethex+0x384>
 800afa2:	68a2      	ldr	r2, [r4, #8]
 800afa4:	4593      	cmp	fp, r2
 800afa6:	db17      	blt.n	800afd8 <__gethex+0x40c>
 800afa8:	6861      	ldr	r1, [r4, #4]
 800afaa:	4648      	mov	r0, r9
 800afac:	3101      	adds	r1, #1
 800afae:	f000 ff23 	bl	800bdf8 <_Balloc>
 800afb2:	4682      	mov	sl, r0
 800afb4:	b918      	cbnz	r0, 800afbe <__gethex+0x3f2>
 800afb6:	4b1b      	ldr	r3, [pc, #108]	; (800b024 <__gethex+0x458>)
 800afb8:	4602      	mov	r2, r0
 800afba:	2184      	movs	r1, #132	; 0x84
 800afbc:	e6b3      	b.n	800ad26 <__gethex+0x15a>
 800afbe:	6922      	ldr	r2, [r4, #16]
 800afc0:	3202      	adds	r2, #2
 800afc2:	f104 010c 	add.w	r1, r4, #12
 800afc6:	0092      	lsls	r2, r2, #2
 800afc8:	300c      	adds	r0, #12
 800afca:	f7fe fea8 	bl	8009d1e <memcpy>
 800afce:	4621      	mov	r1, r4
 800afd0:	4648      	mov	r0, r9
 800afd2:	f000 ff51 	bl	800be78 <_Bfree>
 800afd6:	4654      	mov	r4, sl
 800afd8:	6922      	ldr	r2, [r4, #16]
 800afda:	1c51      	adds	r1, r2, #1
 800afdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800afe0:	6121      	str	r1, [r4, #16]
 800afe2:	2101      	movs	r1, #1
 800afe4:	6151      	str	r1, [r2, #20]
 800afe6:	e7bc      	b.n	800af62 <__gethex+0x396>
 800afe8:	6921      	ldr	r1, [r4, #16]
 800afea:	4559      	cmp	r1, fp
 800afec:	dd0b      	ble.n	800b006 <__gethex+0x43a>
 800afee:	2101      	movs	r1, #1
 800aff0:	4620      	mov	r0, r4
 800aff2:	f7ff fd83 	bl	800aafc <rshift>
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	3601      	adds	r6, #1
 800affa:	42b3      	cmp	r3, r6
 800affc:	f6ff aedb 	blt.w	800adb6 <__gethex+0x1ea>
 800b000:	f04f 0801 	mov.w	r8, #1
 800b004:	e7c2      	b.n	800af8c <__gethex+0x3c0>
 800b006:	f015 051f 	ands.w	r5, r5, #31
 800b00a:	d0f9      	beq.n	800b000 <__gethex+0x434>
 800b00c:	9b01      	ldr	r3, [sp, #4]
 800b00e:	441a      	add	r2, r3
 800b010:	f1c5 0520 	rsb	r5, r5, #32
 800b014:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b018:	f000 ffe0 	bl	800bfdc <__hi0bits>
 800b01c:	42a8      	cmp	r0, r5
 800b01e:	dbe6      	blt.n	800afee <__gethex+0x422>
 800b020:	e7ee      	b.n	800b000 <__gethex+0x434>
 800b022:	bf00      	nop
 800b024:	0800d31d 	.word	0x0800d31d

0800b028 <L_shift>:
 800b028:	f1c2 0208 	rsb	r2, r2, #8
 800b02c:	0092      	lsls	r2, r2, #2
 800b02e:	b570      	push	{r4, r5, r6, lr}
 800b030:	f1c2 0620 	rsb	r6, r2, #32
 800b034:	6843      	ldr	r3, [r0, #4]
 800b036:	6804      	ldr	r4, [r0, #0]
 800b038:	fa03 f506 	lsl.w	r5, r3, r6
 800b03c:	432c      	orrs	r4, r5
 800b03e:	40d3      	lsrs	r3, r2
 800b040:	6004      	str	r4, [r0, #0]
 800b042:	f840 3f04 	str.w	r3, [r0, #4]!
 800b046:	4288      	cmp	r0, r1
 800b048:	d3f4      	bcc.n	800b034 <L_shift+0xc>
 800b04a:	bd70      	pop	{r4, r5, r6, pc}

0800b04c <__match>:
 800b04c:	b530      	push	{r4, r5, lr}
 800b04e:	6803      	ldr	r3, [r0, #0]
 800b050:	3301      	adds	r3, #1
 800b052:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b056:	b914      	cbnz	r4, 800b05e <__match+0x12>
 800b058:	6003      	str	r3, [r0, #0]
 800b05a:	2001      	movs	r0, #1
 800b05c:	bd30      	pop	{r4, r5, pc}
 800b05e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b062:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b066:	2d19      	cmp	r5, #25
 800b068:	bf98      	it	ls
 800b06a:	3220      	addls	r2, #32
 800b06c:	42a2      	cmp	r2, r4
 800b06e:	d0f0      	beq.n	800b052 <__match+0x6>
 800b070:	2000      	movs	r0, #0
 800b072:	e7f3      	b.n	800b05c <__match+0x10>

0800b074 <__hexnan>:
 800b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	680b      	ldr	r3, [r1, #0]
 800b07a:	6801      	ldr	r1, [r0, #0]
 800b07c:	115e      	asrs	r6, r3, #5
 800b07e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b082:	f013 031f 	ands.w	r3, r3, #31
 800b086:	b087      	sub	sp, #28
 800b088:	bf18      	it	ne
 800b08a:	3604      	addne	r6, #4
 800b08c:	2500      	movs	r5, #0
 800b08e:	1f37      	subs	r7, r6, #4
 800b090:	4682      	mov	sl, r0
 800b092:	4690      	mov	r8, r2
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	f846 5c04 	str.w	r5, [r6, #-4]
 800b09a:	46b9      	mov	r9, r7
 800b09c:	463c      	mov	r4, r7
 800b09e:	9502      	str	r5, [sp, #8]
 800b0a0:	46ab      	mov	fp, r5
 800b0a2:	784a      	ldrb	r2, [r1, #1]
 800b0a4:	1c4b      	adds	r3, r1, #1
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	b342      	cbz	r2, 800b0fc <__hexnan+0x88>
 800b0aa:	4610      	mov	r0, r2
 800b0ac:	9105      	str	r1, [sp, #20]
 800b0ae:	9204      	str	r2, [sp, #16]
 800b0b0:	f7ff fd76 	bl	800aba0 <__hexdig_fun>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d14f      	bne.n	800b158 <__hexnan+0xe4>
 800b0b8:	9a04      	ldr	r2, [sp, #16]
 800b0ba:	9905      	ldr	r1, [sp, #20]
 800b0bc:	2a20      	cmp	r2, #32
 800b0be:	d818      	bhi.n	800b0f2 <__hexnan+0x7e>
 800b0c0:	9b02      	ldr	r3, [sp, #8]
 800b0c2:	459b      	cmp	fp, r3
 800b0c4:	dd13      	ble.n	800b0ee <__hexnan+0x7a>
 800b0c6:	454c      	cmp	r4, r9
 800b0c8:	d206      	bcs.n	800b0d8 <__hexnan+0x64>
 800b0ca:	2d07      	cmp	r5, #7
 800b0cc:	dc04      	bgt.n	800b0d8 <__hexnan+0x64>
 800b0ce:	462a      	mov	r2, r5
 800b0d0:	4649      	mov	r1, r9
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7ff ffa8 	bl	800b028 <L_shift>
 800b0d8:	4544      	cmp	r4, r8
 800b0da:	d950      	bls.n	800b17e <__hexnan+0x10a>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f1a4 0904 	sub.w	r9, r4, #4
 800b0e2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0e6:	f8cd b008 	str.w	fp, [sp, #8]
 800b0ea:	464c      	mov	r4, r9
 800b0ec:	461d      	mov	r5, r3
 800b0ee:	9903      	ldr	r1, [sp, #12]
 800b0f0:	e7d7      	b.n	800b0a2 <__hexnan+0x2e>
 800b0f2:	2a29      	cmp	r2, #41	; 0x29
 800b0f4:	d155      	bne.n	800b1a2 <__hexnan+0x12e>
 800b0f6:	3102      	adds	r1, #2
 800b0f8:	f8ca 1000 	str.w	r1, [sl]
 800b0fc:	f1bb 0f00 	cmp.w	fp, #0
 800b100:	d04f      	beq.n	800b1a2 <__hexnan+0x12e>
 800b102:	454c      	cmp	r4, r9
 800b104:	d206      	bcs.n	800b114 <__hexnan+0xa0>
 800b106:	2d07      	cmp	r5, #7
 800b108:	dc04      	bgt.n	800b114 <__hexnan+0xa0>
 800b10a:	462a      	mov	r2, r5
 800b10c:	4649      	mov	r1, r9
 800b10e:	4620      	mov	r0, r4
 800b110:	f7ff ff8a 	bl	800b028 <L_shift>
 800b114:	4544      	cmp	r4, r8
 800b116:	d934      	bls.n	800b182 <__hexnan+0x10e>
 800b118:	f1a8 0204 	sub.w	r2, r8, #4
 800b11c:	4623      	mov	r3, r4
 800b11e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b122:	f842 1f04 	str.w	r1, [r2, #4]!
 800b126:	429f      	cmp	r7, r3
 800b128:	d2f9      	bcs.n	800b11e <__hexnan+0xaa>
 800b12a:	1b3b      	subs	r3, r7, r4
 800b12c:	f023 0303 	bic.w	r3, r3, #3
 800b130:	3304      	adds	r3, #4
 800b132:	3e03      	subs	r6, #3
 800b134:	3401      	adds	r4, #1
 800b136:	42a6      	cmp	r6, r4
 800b138:	bf38      	it	cc
 800b13a:	2304      	movcc	r3, #4
 800b13c:	4443      	add	r3, r8
 800b13e:	2200      	movs	r2, #0
 800b140:	f843 2b04 	str.w	r2, [r3], #4
 800b144:	429f      	cmp	r7, r3
 800b146:	d2fb      	bcs.n	800b140 <__hexnan+0xcc>
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	b91b      	cbnz	r3, 800b154 <__hexnan+0xe0>
 800b14c:	4547      	cmp	r7, r8
 800b14e:	d126      	bne.n	800b19e <__hexnan+0x12a>
 800b150:	2301      	movs	r3, #1
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	2005      	movs	r0, #5
 800b156:	e025      	b.n	800b1a4 <__hexnan+0x130>
 800b158:	3501      	adds	r5, #1
 800b15a:	2d08      	cmp	r5, #8
 800b15c:	f10b 0b01 	add.w	fp, fp, #1
 800b160:	dd06      	ble.n	800b170 <__hexnan+0xfc>
 800b162:	4544      	cmp	r4, r8
 800b164:	d9c3      	bls.n	800b0ee <__hexnan+0x7a>
 800b166:	2300      	movs	r3, #0
 800b168:	f844 3c04 	str.w	r3, [r4, #-4]
 800b16c:	2501      	movs	r5, #1
 800b16e:	3c04      	subs	r4, #4
 800b170:	6822      	ldr	r2, [r4, #0]
 800b172:	f000 000f 	and.w	r0, r0, #15
 800b176:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b17a:	6020      	str	r0, [r4, #0]
 800b17c:	e7b7      	b.n	800b0ee <__hexnan+0x7a>
 800b17e:	2508      	movs	r5, #8
 800b180:	e7b5      	b.n	800b0ee <__hexnan+0x7a>
 800b182:	9b01      	ldr	r3, [sp, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0df      	beq.n	800b148 <__hexnan+0xd4>
 800b188:	f1c3 0320 	rsb	r3, r3, #32
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b190:	40da      	lsrs	r2, r3
 800b192:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b196:	4013      	ands	r3, r2
 800b198:	f846 3c04 	str.w	r3, [r6, #-4]
 800b19c:	e7d4      	b.n	800b148 <__hexnan+0xd4>
 800b19e:	3f04      	subs	r7, #4
 800b1a0:	e7d2      	b.n	800b148 <__hexnan+0xd4>
 800b1a2:	2004      	movs	r0, #4
 800b1a4:	b007      	add	sp, #28
 800b1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1aa <__ssputs_r>:
 800b1aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ae:	688e      	ldr	r6, [r1, #8]
 800b1b0:	461f      	mov	r7, r3
 800b1b2:	42be      	cmp	r6, r7
 800b1b4:	680b      	ldr	r3, [r1, #0]
 800b1b6:	4682      	mov	sl, r0
 800b1b8:	460c      	mov	r4, r1
 800b1ba:	4690      	mov	r8, r2
 800b1bc:	d82c      	bhi.n	800b218 <__ssputs_r+0x6e>
 800b1be:	898a      	ldrh	r2, [r1, #12]
 800b1c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1c4:	d026      	beq.n	800b214 <__ssputs_r+0x6a>
 800b1c6:	6965      	ldr	r5, [r4, #20]
 800b1c8:	6909      	ldr	r1, [r1, #16]
 800b1ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1ce:	eba3 0901 	sub.w	r9, r3, r1
 800b1d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1d6:	1c7b      	adds	r3, r7, #1
 800b1d8:	444b      	add	r3, r9
 800b1da:	106d      	asrs	r5, r5, #1
 800b1dc:	429d      	cmp	r5, r3
 800b1de:	bf38      	it	cc
 800b1e0:	461d      	movcc	r5, r3
 800b1e2:	0553      	lsls	r3, r2, #21
 800b1e4:	d527      	bpl.n	800b236 <__ssputs_r+0x8c>
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f000 fb32 	bl	800b850 <_malloc_r>
 800b1ec:	4606      	mov	r6, r0
 800b1ee:	b360      	cbz	r0, 800b24a <__ssputs_r+0xa0>
 800b1f0:	6921      	ldr	r1, [r4, #16]
 800b1f2:	464a      	mov	r2, r9
 800b1f4:	f7fe fd93 	bl	8009d1e <memcpy>
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b202:	81a3      	strh	r3, [r4, #12]
 800b204:	6126      	str	r6, [r4, #16]
 800b206:	6165      	str	r5, [r4, #20]
 800b208:	444e      	add	r6, r9
 800b20a:	eba5 0509 	sub.w	r5, r5, r9
 800b20e:	6026      	str	r6, [r4, #0]
 800b210:	60a5      	str	r5, [r4, #8]
 800b212:	463e      	mov	r6, r7
 800b214:	42be      	cmp	r6, r7
 800b216:	d900      	bls.n	800b21a <__ssputs_r+0x70>
 800b218:	463e      	mov	r6, r7
 800b21a:	6820      	ldr	r0, [r4, #0]
 800b21c:	4632      	mov	r2, r6
 800b21e:	4641      	mov	r1, r8
 800b220:	f001 fb81 	bl	800c926 <memmove>
 800b224:	68a3      	ldr	r3, [r4, #8]
 800b226:	1b9b      	subs	r3, r3, r6
 800b228:	60a3      	str	r3, [r4, #8]
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	4433      	add	r3, r6
 800b22e:	6023      	str	r3, [r4, #0]
 800b230:	2000      	movs	r0, #0
 800b232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b236:	462a      	mov	r2, r5
 800b238:	f001 fac5 	bl	800c7c6 <_realloc_r>
 800b23c:	4606      	mov	r6, r0
 800b23e:	2800      	cmp	r0, #0
 800b240:	d1e0      	bne.n	800b204 <__ssputs_r+0x5a>
 800b242:	6921      	ldr	r1, [r4, #16]
 800b244:	4650      	mov	r0, sl
 800b246:	f7ff fc0d 	bl	800aa64 <_free_r>
 800b24a:	230c      	movs	r3, #12
 800b24c:	f8ca 3000 	str.w	r3, [sl]
 800b250:	89a3      	ldrh	r3, [r4, #12]
 800b252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b256:	81a3      	strh	r3, [r4, #12]
 800b258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b25c:	e7e9      	b.n	800b232 <__ssputs_r+0x88>
	...

0800b260 <_svfiprintf_r>:
 800b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	4698      	mov	r8, r3
 800b266:	898b      	ldrh	r3, [r1, #12]
 800b268:	061b      	lsls	r3, r3, #24
 800b26a:	b09d      	sub	sp, #116	; 0x74
 800b26c:	4607      	mov	r7, r0
 800b26e:	460d      	mov	r5, r1
 800b270:	4614      	mov	r4, r2
 800b272:	d50e      	bpl.n	800b292 <_svfiprintf_r+0x32>
 800b274:	690b      	ldr	r3, [r1, #16]
 800b276:	b963      	cbnz	r3, 800b292 <_svfiprintf_r+0x32>
 800b278:	2140      	movs	r1, #64	; 0x40
 800b27a:	f000 fae9 	bl	800b850 <_malloc_r>
 800b27e:	6028      	str	r0, [r5, #0]
 800b280:	6128      	str	r0, [r5, #16]
 800b282:	b920      	cbnz	r0, 800b28e <_svfiprintf_r+0x2e>
 800b284:	230c      	movs	r3, #12
 800b286:	603b      	str	r3, [r7, #0]
 800b288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b28c:	e0d0      	b.n	800b430 <_svfiprintf_r+0x1d0>
 800b28e:	2340      	movs	r3, #64	; 0x40
 800b290:	616b      	str	r3, [r5, #20]
 800b292:	2300      	movs	r3, #0
 800b294:	9309      	str	r3, [sp, #36]	; 0x24
 800b296:	2320      	movs	r3, #32
 800b298:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b29c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a0:	2330      	movs	r3, #48	; 0x30
 800b2a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b448 <_svfiprintf_r+0x1e8>
 800b2a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2aa:	f04f 0901 	mov.w	r9, #1
 800b2ae:	4623      	mov	r3, r4
 800b2b0:	469a      	mov	sl, r3
 800b2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2b6:	b10a      	cbz	r2, 800b2bc <_svfiprintf_r+0x5c>
 800b2b8:	2a25      	cmp	r2, #37	; 0x25
 800b2ba:	d1f9      	bne.n	800b2b0 <_svfiprintf_r+0x50>
 800b2bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b2c0:	d00b      	beq.n	800b2da <_svfiprintf_r+0x7a>
 800b2c2:	465b      	mov	r3, fp
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	f7ff ff6e 	bl	800b1aa <__ssputs_r>
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	f000 80a9 	beq.w	800b426 <_svfiprintf_r+0x1c6>
 800b2d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2d6:	445a      	add	r2, fp
 800b2d8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2da:	f89a 3000 	ldrb.w	r3, [sl]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 80a1 	beq.w	800b426 <_svfiprintf_r+0x1c6>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ee:	f10a 0a01 	add.w	sl, sl, #1
 800b2f2:	9304      	str	r3, [sp, #16]
 800b2f4:	9307      	str	r3, [sp, #28]
 800b2f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2fa:	931a      	str	r3, [sp, #104]	; 0x68
 800b2fc:	4654      	mov	r4, sl
 800b2fe:	2205      	movs	r2, #5
 800b300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b304:	4850      	ldr	r0, [pc, #320]	; (800b448 <_svfiprintf_r+0x1e8>)
 800b306:	f7f4 ff63 	bl	80001d0 <memchr>
 800b30a:	9a04      	ldr	r2, [sp, #16]
 800b30c:	b9d8      	cbnz	r0, 800b346 <_svfiprintf_r+0xe6>
 800b30e:	06d0      	lsls	r0, r2, #27
 800b310:	bf44      	itt	mi
 800b312:	2320      	movmi	r3, #32
 800b314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b318:	0711      	lsls	r1, r2, #28
 800b31a:	bf44      	itt	mi
 800b31c:	232b      	movmi	r3, #43	; 0x2b
 800b31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b322:	f89a 3000 	ldrb.w	r3, [sl]
 800b326:	2b2a      	cmp	r3, #42	; 0x2a
 800b328:	d015      	beq.n	800b356 <_svfiprintf_r+0xf6>
 800b32a:	9a07      	ldr	r2, [sp, #28]
 800b32c:	4654      	mov	r4, sl
 800b32e:	2000      	movs	r0, #0
 800b330:	f04f 0c0a 	mov.w	ip, #10
 800b334:	4621      	mov	r1, r4
 800b336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b33a:	3b30      	subs	r3, #48	; 0x30
 800b33c:	2b09      	cmp	r3, #9
 800b33e:	d94d      	bls.n	800b3dc <_svfiprintf_r+0x17c>
 800b340:	b1b0      	cbz	r0, 800b370 <_svfiprintf_r+0x110>
 800b342:	9207      	str	r2, [sp, #28]
 800b344:	e014      	b.n	800b370 <_svfiprintf_r+0x110>
 800b346:	eba0 0308 	sub.w	r3, r0, r8
 800b34a:	fa09 f303 	lsl.w	r3, r9, r3
 800b34e:	4313      	orrs	r3, r2
 800b350:	9304      	str	r3, [sp, #16]
 800b352:	46a2      	mov	sl, r4
 800b354:	e7d2      	b.n	800b2fc <_svfiprintf_r+0x9c>
 800b356:	9b03      	ldr	r3, [sp, #12]
 800b358:	1d19      	adds	r1, r3, #4
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	9103      	str	r1, [sp, #12]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	bfbb      	ittet	lt
 800b362:	425b      	neglt	r3, r3
 800b364:	f042 0202 	orrlt.w	r2, r2, #2
 800b368:	9307      	strge	r3, [sp, #28]
 800b36a:	9307      	strlt	r3, [sp, #28]
 800b36c:	bfb8      	it	lt
 800b36e:	9204      	strlt	r2, [sp, #16]
 800b370:	7823      	ldrb	r3, [r4, #0]
 800b372:	2b2e      	cmp	r3, #46	; 0x2e
 800b374:	d10c      	bne.n	800b390 <_svfiprintf_r+0x130>
 800b376:	7863      	ldrb	r3, [r4, #1]
 800b378:	2b2a      	cmp	r3, #42	; 0x2a
 800b37a:	d134      	bne.n	800b3e6 <_svfiprintf_r+0x186>
 800b37c:	9b03      	ldr	r3, [sp, #12]
 800b37e:	1d1a      	adds	r2, r3, #4
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	9203      	str	r2, [sp, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	bfb8      	it	lt
 800b388:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b38c:	3402      	adds	r4, #2
 800b38e:	9305      	str	r3, [sp, #20]
 800b390:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b458 <_svfiprintf_r+0x1f8>
 800b394:	7821      	ldrb	r1, [r4, #0]
 800b396:	2203      	movs	r2, #3
 800b398:	4650      	mov	r0, sl
 800b39a:	f7f4 ff19 	bl	80001d0 <memchr>
 800b39e:	b138      	cbz	r0, 800b3b0 <_svfiprintf_r+0x150>
 800b3a0:	9b04      	ldr	r3, [sp, #16]
 800b3a2:	eba0 000a 	sub.w	r0, r0, sl
 800b3a6:	2240      	movs	r2, #64	; 0x40
 800b3a8:	4082      	lsls	r2, r0
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	3401      	adds	r4, #1
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b4:	4825      	ldr	r0, [pc, #148]	; (800b44c <_svfiprintf_r+0x1ec>)
 800b3b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3ba:	2206      	movs	r2, #6
 800b3bc:	f7f4 ff08 	bl	80001d0 <memchr>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d038      	beq.n	800b436 <_svfiprintf_r+0x1d6>
 800b3c4:	4b22      	ldr	r3, [pc, #136]	; (800b450 <_svfiprintf_r+0x1f0>)
 800b3c6:	bb1b      	cbnz	r3, 800b410 <_svfiprintf_r+0x1b0>
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	3307      	adds	r3, #7
 800b3cc:	f023 0307 	bic.w	r3, r3, #7
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	9303      	str	r3, [sp, #12]
 800b3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d6:	4433      	add	r3, r6
 800b3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3da:	e768      	b.n	800b2ae <_svfiprintf_r+0x4e>
 800b3dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	2001      	movs	r0, #1
 800b3e4:	e7a6      	b.n	800b334 <_svfiprintf_r+0xd4>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	3401      	adds	r4, #1
 800b3ea:	9305      	str	r3, [sp, #20]
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	f04f 0c0a 	mov.w	ip, #10
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3f8:	3a30      	subs	r2, #48	; 0x30
 800b3fa:	2a09      	cmp	r2, #9
 800b3fc:	d903      	bls.n	800b406 <_svfiprintf_r+0x1a6>
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0c6      	beq.n	800b390 <_svfiprintf_r+0x130>
 800b402:	9105      	str	r1, [sp, #20]
 800b404:	e7c4      	b.n	800b390 <_svfiprintf_r+0x130>
 800b406:	fb0c 2101 	mla	r1, ip, r1, r2
 800b40a:	4604      	mov	r4, r0
 800b40c:	2301      	movs	r3, #1
 800b40e:	e7f0      	b.n	800b3f2 <_svfiprintf_r+0x192>
 800b410:	ab03      	add	r3, sp, #12
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	462a      	mov	r2, r5
 800b416:	4b0f      	ldr	r3, [pc, #60]	; (800b454 <_svfiprintf_r+0x1f4>)
 800b418:	a904      	add	r1, sp, #16
 800b41a:	4638      	mov	r0, r7
 800b41c:	f7fc fe16 	bl	800804c <_printf_float>
 800b420:	1c42      	adds	r2, r0, #1
 800b422:	4606      	mov	r6, r0
 800b424:	d1d6      	bne.n	800b3d4 <_svfiprintf_r+0x174>
 800b426:	89ab      	ldrh	r3, [r5, #12]
 800b428:	065b      	lsls	r3, r3, #25
 800b42a:	f53f af2d 	bmi.w	800b288 <_svfiprintf_r+0x28>
 800b42e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b430:	b01d      	add	sp, #116	; 0x74
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b436:	ab03      	add	r3, sp, #12
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	462a      	mov	r2, r5
 800b43c:	4b05      	ldr	r3, [pc, #20]	; (800b454 <_svfiprintf_r+0x1f4>)
 800b43e:	a904      	add	r1, sp, #16
 800b440:	4638      	mov	r0, r7
 800b442:	f7fd f8a7 	bl	8008594 <_printf_i>
 800b446:	e7eb      	b.n	800b420 <_svfiprintf_r+0x1c0>
 800b448:	0800d38e 	.word	0x0800d38e
 800b44c:	0800d398 	.word	0x0800d398
 800b450:	0800804d 	.word	0x0800804d
 800b454:	0800b1ab 	.word	0x0800b1ab
 800b458:	0800d394 	.word	0x0800d394

0800b45c <_sungetc_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	1c4b      	adds	r3, r1, #1
 800b460:	4614      	mov	r4, r2
 800b462:	d103      	bne.n	800b46c <_sungetc_r+0x10>
 800b464:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b468:	4628      	mov	r0, r5
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	8993      	ldrh	r3, [r2, #12]
 800b46e:	f023 0320 	bic.w	r3, r3, #32
 800b472:	8193      	strh	r3, [r2, #12]
 800b474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b476:	6852      	ldr	r2, [r2, #4]
 800b478:	b2cd      	uxtb	r5, r1
 800b47a:	b18b      	cbz	r3, 800b4a0 <_sungetc_r+0x44>
 800b47c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b47e:	4293      	cmp	r3, r2
 800b480:	dd08      	ble.n	800b494 <_sungetc_r+0x38>
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	1e5a      	subs	r2, r3, #1
 800b486:	6022      	str	r2, [r4, #0]
 800b488:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b48c:	6863      	ldr	r3, [r4, #4]
 800b48e:	3301      	adds	r3, #1
 800b490:	6063      	str	r3, [r4, #4]
 800b492:	e7e9      	b.n	800b468 <_sungetc_r+0xc>
 800b494:	4621      	mov	r1, r4
 800b496:	f001 f95c 	bl	800c752 <__submore>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d0f1      	beq.n	800b482 <_sungetc_r+0x26>
 800b49e:	e7e1      	b.n	800b464 <_sungetc_r+0x8>
 800b4a0:	6921      	ldr	r1, [r4, #16]
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	b151      	cbz	r1, 800b4bc <_sungetc_r+0x60>
 800b4a6:	4299      	cmp	r1, r3
 800b4a8:	d208      	bcs.n	800b4bc <_sungetc_r+0x60>
 800b4aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b4ae:	42a9      	cmp	r1, r5
 800b4b0:	d104      	bne.n	800b4bc <_sungetc_r+0x60>
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	3201      	adds	r2, #1
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	6062      	str	r2, [r4, #4]
 800b4ba:	e7d5      	b.n	800b468 <_sungetc_r+0xc>
 800b4bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b4c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800b4ca:	4623      	mov	r3, r4
 800b4cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e7dc      	b.n	800b490 <_sungetc_r+0x34>

0800b4d6 <__ssrefill_r>:
 800b4d6:	b510      	push	{r4, lr}
 800b4d8:	460c      	mov	r4, r1
 800b4da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b4dc:	b169      	cbz	r1, 800b4fa <__ssrefill_r+0x24>
 800b4de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	d001      	beq.n	800b4ea <__ssrefill_r+0x14>
 800b4e6:	f7ff fabd 	bl	800aa64 <_free_r>
 800b4ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4ec:	6063      	str	r3, [r4, #4]
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	6360      	str	r0, [r4, #52]	; 0x34
 800b4f2:	b113      	cbz	r3, 800b4fa <__ssrefill_r+0x24>
 800b4f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b4f6:	6023      	str	r3, [r4, #0]
 800b4f8:	bd10      	pop	{r4, pc}
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	2300      	movs	r3, #0
 800b500:	6063      	str	r3, [r4, #4]
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	f043 0320 	orr.w	r3, r3, #32
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b50e:	e7f3      	b.n	800b4f8 <__ssrefill_r+0x22>

0800b510 <__ssvfiscanf_r>:
 800b510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b514:	460c      	mov	r4, r1
 800b516:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b51a:	2100      	movs	r1, #0
 800b51c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b520:	49a6      	ldr	r1, [pc, #664]	; (800b7bc <__ssvfiscanf_r+0x2ac>)
 800b522:	91a0      	str	r1, [sp, #640]	; 0x280
 800b524:	f10d 0804 	add.w	r8, sp, #4
 800b528:	49a5      	ldr	r1, [pc, #660]	; (800b7c0 <__ssvfiscanf_r+0x2b0>)
 800b52a:	4fa6      	ldr	r7, [pc, #664]	; (800b7c4 <__ssvfiscanf_r+0x2b4>)
 800b52c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b7c8 <__ssvfiscanf_r+0x2b8>
 800b530:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b534:	4606      	mov	r6, r0
 800b536:	91a1      	str	r1, [sp, #644]	; 0x284
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	7813      	ldrb	r3, [r2, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 815a 	beq.w	800b7f6 <__ssvfiscanf_r+0x2e6>
 800b542:	5cf9      	ldrb	r1, [r7, r3]
 800b544:	f011 0108 	ands.w	r1, r1, #8
 800b548:	f102 0501 	add.w	r5, r2, #1
 800b54c:	d019      	beq.n	800b582 <__ssvfiscanf_r+0x72>
 800b54e:	6863      	ldr	r3, [r4, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	dd0f      	ble.n	800b574 <__ssvfiscanf_r+0x64>
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	781a      	ldrb	r2, [r3, #0]
 800b558:	5cba      	ldrb	r2, [r7, r2]
 800b55a:	0712      	lsls	r2, r2, #28
 800b55c:	d401      	bmi.n	800b562 <__ssvfiscanf_r+0x52>
 800b55e:	462a      	mov	r2, r5
 800b560:	e7eb      	b.n	800b53a <__ssvfiscanf_r+0x2a>
 800b562:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b564:	3201      	adds	r2, #1
 800b566:	9245      	str	r2, [sp, #276]	; 0x114
 800b568:	6862      	ldr	r2, [r4, #4]
 800b56a:	3301      	adds	r3, #1
 800b56c:	3a01      	subs	r2, #1
 800b56e:	6062      	str	r2, [r4, #4]
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	e7ec      	b.n	800b54e <__ssvfiscanf_r+0x3e>
 800b574:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b576:	4621      	mov	r1, r4
 800b578:	4630      	mov	r0, r6
 800b57a:	4798      	blx	r3
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d0e9      	beq.n	800b554 <__ssvfiscanf_r+0x44>
 800b580:	e7ed      	b.n	800b55e <__ssvfiscanf_r+0x4e>
 800b582:	2b25      	cmp	r3, #37	; 0x25
 800b584:	d012      	beq.n	800b5ac <__ssvfiscanf_r+0x9c>
 800b586:	469a      	mov	sl, r3
 800b588:	6863      	ldr	r3, [r4, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f340 8091 	ble.w	800b6b2 <__ssvfiscanf_r+0x1a2>
 800b590:	6822      	ldr	r2, [r4, #0]
 800b592:	7813      	ldrb	r3, [r2, #0]
 800b594:	4553      	cmp	r3, sl
 800b596:	f040 812e 	bne.w	800b7f6 <__ssvfiscanf_r+0x2e6>
 800b59a:	6863      	ldr	r3, [r4, #4]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	6063      	str	r3, [r4, #4]
 800b5a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b5a2:	3201      	adds	r2, #1
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	6022      	str	r2, [r4, #0]
 800b5a8:	9345      	str	r3, [sp, #276]	; 0x114
 800b5aa:	e7d8      	b.n	800b55e <__ssvfiscanf_r+0x4e>
 800b5ac:	9141      	str	r1, [sp, #260]	; 0x104
 800b5ae:	9143      	str	r1, [sp, #268]	; 0x10c
 800b5b0:	7853      	ldrb	r3, [r2, #1]
 800b5b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b5b4:	bf02      	ittt	eq
 800b5b6:	2310      	moveq	r3, #16
 800b5b8:	1c95      	addeq	r5, r2, #2
 800b5ba:	9341      	streq	r3, [sp, #260]	; 0x104
 800b5bc:	220a      	movs	r2, #10
 800b5be:	46aa      	mov	sl, r5
 800b5c0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b5c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b5c8:	2b09      	cmp	r3, #9
 800b5ca:	d91c      	bls.n	800b606 <__ssvfiscanf_r+0xf6>
 800b5cc:	487e      	ldr	r0, [pc, #504]	; (800b7c8 <__ssvfiscanf_r+0x2b8>)
 800b5ce:	2203      	movs	r2, #3
 800b5d0:	f7f4 fdfe 	bl	80001d0 <memchr>
 800b5d4:	b138      	cbz	r0, 800b5e6 <__ssvfiscanf_r+0xd6>
 800b5d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b5d8:	eba0 0009 	sub.w	r0, r0, r9
 800b5dc:	2301      	movs	r3, #1
 800b5de:	4083      	lsls	r3, r0
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	9341      	str	r3, [sp, #260]	; 0x104
 800b5e4:	4655      	mov	r5, sl
 800b5e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5ea:	2b78      	cmp	r3, #120	; 0x78
 800b5ec:	d806      	bhi.n	800b5fc <__ssvfiscanf_r+0xec>
 800b5ee:	2b57      	cmp	r3, #87	; 0x57
 800b5f0:	d810      	bhi.n	800b614 <__ssvfiscanf_r+0x104>
 800b5f2:	2b25      	cmp	r3, #37	; 0x25
 800b5f4:	d0c7      	beq.n	800b586 <__ssvfiscanf_r+0x76>
 800b5f6:	d857      	bhi.n	800b6a8 <__ssvfiscanf_r+0x198>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d065      	beq.n	800b6c8 <__ssvfiscanf_r+0x1b8>
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	9347      	str	r3, [sp, #284]	; 0x11c
 800b600:	230a      	movs	r3, #10
 800b602:	9342      	str	r3, [sp, #264]	; 0x108
 800b604:	e076      	b.n	800b6f4 <__ssvfiscanf_r+0x1e4>
 800b606:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b608:	fb02 1103 	mla	r1, r2, r3, r1
 800b60c:	3930      	subs	r1, #48	; 0x30
 800b60e:	9143      	str	r1, [sp, #268]	; 0x10c
 800b610:	4655      	mov	r5, sl
 800b612:	e7d4      	b.n	800b5be <__ssvfiscanf_r+0xae>
 800b614:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b618:	2a20      	cmp	r2, #32
 800b61a:	d8ef      	bhi.n	800b5fc <__ssvfiscanf_r+0xec>
 800b61c:	a101      	add	r1, pc, #4	; (adr r1, 800b624 <__ssvfiscanf_r+0x114>)
 800b61e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b622:	bf00      	nop
 800b624:	0800b6d7 	.word	0x0800b6d7
 800b628:	0800b5fd 	.word	0x0800b5fd
 800b62c:	0800b5fd 	.word	0x0800b5fd
 800b630:	0800b735 	.word	0x0800b735
 800b634:	0800b5fd 	.word	0x0800b5fd
 800b638:	0800b5fd 	.word	0x0800b5fd
 800b63c:	0800b5fd 	.word	0x0800b5fd
 800b640:	0800b5fd 	.word	0x0800b5fd
 800b644:	0800b5fd 	.word	0x0800b5fd
 800b648:	0800b5fd 	.word	0x0800b5fd
 800b64c:	0800b5fd 	.word	0x0800b5fd
 800b650:	0800b74b 	.word	0x0800b74b
 800b654:	0800b731 	.word	0x0800b731
 800b658:	0800b6af 	.word	0x0800b6af
 800b65c:	0800b6af 	.word	0x0800b6af
 800b660:	0800b6af 	.word	0x0800b6af
 800b664:	0800b5fd 	.word	0x0800b5fd
 800b668:	0800b6ed 	.word	0x0800b6ed
 800b66c:	0800b5fd 	.word	0x0800b5fd
 800b670:	0800b5fd 	.word	0x0800b5fd
 800b674:	0800b5fd 	.word	0x0800b5fd
 800b678:	0800b5fd 	.word	0x0800b5fd
 800b67c:	0800b75b 	.word	0x0800b75b
 800b680:	0800b729 	.word	0x0800b729
 800b684:	0800b6cf 	.word	0x0800b6cf
 800b688:	0800b5fd 	.word	0x0800b5fd
 800b68c:	0800b5fd 	.word	0x0800b5fd
 800b690:	0800b757 	.word	0x0800b757
 800b694:	0800b5fd 	.word	0x0800b5fd
 800b698:	0800b731 	.word	0x0800b731
 800b69c:	0800b5fd 	.word	0x0800b5fd
 800b6a0:	0800b5fd 	.word	0x0800b5fd
 800b6a4:	0800b6d7 	.word	0x0800b6d7
 800b6a8:	3b45      	subs	r3, #69	; 0x45
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d8a6      	bhi.n	800b5fc <__ssvfiscanf_r+0xec>
 800b6ae:	2305      	movs	r3, #5
 800b6b0:	e01f      	b.n	800b6f2 <__ssvfiscanf_r+0x1e2>
 800b6b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	4798      	blx	r3
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	f43f af68 	beq.w	800b590 <__ssvfiscanf_r+0x80>
 800b6c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	f040 808d 	bne.w	800b7e2 <__ssvfiscanf_r+0x2d2>
 800b6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6cc:	e08f      	b.n	800b7ee <__ssvfiscanf_r+0x2de>
 800b6ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b6d0:	f042 0220 	orr.w	r2, r2, #32
 800b6d4:	9241      	str	r2, [sp, #260]	; 0x104
 800b6d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b6d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6dc:	9241      	str	r2, [sp, #260]	; 0x104
 800b6de:	2210      	movs	r2, #16
 800b6e0:	2b6f      	cmp	r3, #111	; 0x6f
 800b6e2:	9242      	str	r2, [sp, #264]	; 0x108
 800b6e4:	bf34      	ite	cc
 800b6e6:	2303      	movcc	r3, #3
 800b6e8:	2304      	movcs	r3, #4
 800b6ea:	e002      	b.n	800b6f2 <__ssvfiscanf_r+0x1e2>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	9342      	str	r3, [sp, #264]	; 0x108
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	9347      	str	r3, [sp, #284]	; 0x11c
 800b6f4:	6863      	ldr	r3, [r4, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	dd3d      	ble.n	800b776 <__ssvfiscanf_r+0x266>
 800b6fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b6fc:	0659      	lsls	r1, r3, #25
 800b6fe:	d404      	bmi.n	800b70a <__ssvfiscanf_r+0x1fa>
 800b700:	6823      	ldr	r3, [r4, #0]
 800b702:	781a      	ldrb	r2, [r3, #0]
 800b704:	5cba      	ldrb	r2, [r7, r2]
 800b706:	0712      	lsls	r2, r2, #28
 800b708:	d43c      	bmi.n	800b784 <__ssvfiscanf_r+0x274>
 800b70a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	dc4b      	bgt.n	800b7a8 <__ssvfiscanf_r+0x298>
 800b710:	466b      	mov	r3, sp
 800b712:	4622      	mov	r2, r4
 800b714:	a941      	add	r1, sp, #260	; 0x104
 800b716:	4630      	mov	r0, r6
 800b718:	f000 f92c 	bl	800b974 <_scanf_chars>
 800b71c:	2801      	cmp	r0, #1
 800b71e:	d06a      	beq.n	800b7f6 <__ssvfiscanf_r+0x2e6>
 800b720:	2802      	cmp	r0, #2
 800b722:	f47f af1c 	bne.w	800b55e <__ssvfiscanf_r+0x4e>
 800b726:	e7cb      	b.n	800b6c0 <__ssvfiscanf_r+0x1b0>
 800b728:	2308      	movs	r3, #8
 800b72a:	9342      	str	r3, [sp, #264]	; 0x108
 800b72c:	2304      	movs	r3, #4
 800b72e:	e7e0      	b.n	800b6f2 <__ssvfiscanf_r+0x1e2>
 800b730:	220a      	movs	r2, #10
 800b732:	e7d5      	b.n	800b6e0 <__ssvfiscanf_r+0x1d0>
 800b734:	4629      	mov	r1, r5
 800b736:	4640      	mov	r0, r8
 800b738:	f000 fa6a 	bl	800bc10 <__sccl>
 800b73c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b742:	9341      	str	r3, [sp, #260]	; 0x104
 800b744:	4605      	mov	r5, r0
 800b746:	2301      	movs	r3, #1
 800b748:	e7d3      	b.n	800b6f2 <__ssvfiscanf_r+0x1e2>
 800b74a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b750:	9341      	str	r3, [sp, #260]	; 0x104
 800b752:	2300      	movs	r3, #0
 800b754:	e7cd      	b.n	800b6f2 <__ssvfiscanf_r+0x1e2>
 800b756:	2302      	movs	r3, #2
 800b758:	e7cb      	b.n	800b6f2 <__ssvfiscanf_r+0x1e2>
 800b75a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b75c:	06c3      	lsls	r3, r0, #27
 800b75e:	f53f aefe 	bmi.w	800b55e <__ssvfiscanf_r+0x4e>
 800b762:	9b00      	ldr	r3, [sp, #0]
 800b764:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b766:	1d19      	adds	r1, r3, #4
 800b768:	9100      	str	r1, [sp, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	07c0      	lsls	r0, r0, #31
 800b76e:	bf4c      	ite	mi
 800b770:	801a      	strhmi	r2, [r3, #0]
 800b772:	601a      	strpl	r2, [r3, #0]
 800b774:	e6f3      	b.n	800b55e <__ssvfiscanf_r+0x4e>
 800b776:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b778:	4621      	mov	r1, r4
 800b77a:	4630      	mov	r0, r6
 800b77c:	4798      	blx	r3
 800b77e:	2800      	cmp	r0, #0
 800b780:	d0bb      	beq.n	800b6fa <__ssvfiscanf_r+0x1ea>
 800b782:	e79d      	b.n	800b6c0 <__ssvfiscanf_r+0x1b0>
 800b784:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b786:	3201      	adds	r2, #1
 800b788:	9245      	str	r2, [sp, #276]	; 0x114
 800b78a:	6862      	ldr	r2, [r4, #4]
 800b78c:	3a01      	subs	r2, #1
 800b78e:	2a00      	cmp	r2, #0
 800b790:	6062      	str	r2, [r4, #4]
 800b792:	dd02      	ble.n	800b79a <__ssvfiscanf_r+0x28a>
 800b794:	3301      	adds	r3, #1
 800b796:	6023      	str	r3, [r4, #0]
 800b798:	e7b2      	b.n	800b700 <__ssvfiscanf_r+0x1f0>
 800b79a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b79c:	4621      	mov	r1, r4
 800b79e:	4630      	mov	r0, r6
 800b7a0:	4798      	blx	r3
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d0ac      	beq.n	800b700 <__ssvfiscanf_r+0x1f0>
 800b7a6:	e78b      	b.n	800b6c0 <__ssvfiscanf_r+0x1b0>
 800b7a8:	2b04      	cmp	r3, #4
 800b7aa:	dc0f      	bgt.n	800b7cc <__ssvfiscanf_r+0x2bc>
 800b7ac:	466b      	mov	r3, sp
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	a941      	add	r1, sp, #260	; 0x104
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 f938 	bl	800ba28 <_scanf_i>
 800b7b8:	e7b0      	b.n	800b71c <__ssvfiscanf_r+0x20c>
 800b7ba:	bf00      	nop
 800b7bc:	0800b45d 	.word	0x0800b45d
 800b7c0:	0800b4d7 	.word	0x0800b4d7
 800b7c4:	0800d1a1 	.word	0x0800d1a1
 800b7c8:	0800d394 	.word	0x0800d394
 800b7cc:	4b0b      	ldr	r3, [pc, #44]	; (800b7fc <__ssvfiscanf_r+0x2ec>)
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f43f aec5 	beq.w	800b55e <__ssvfiscanf_r+0x4e>
 800b7d4:	466b      	mov	r3, sp
 800b7d6:	4622      	mov	r2, r4
 800b7d8:	a941      	add	r1, sp, #260	; 0x104
 800b7da:	4630      	mov	r0, r6
 800b7dc:	f7fc fffc 	bl	80087d8 <_scanf_float>
 800b7e0:	e79c      	b.n	800b71c <__ssvfiscanf_r+0x20c>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b7e8:	bf18      	it	ne
 800b7ea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800b7ee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b7f8:	e7f9      	b.n	800b7ee <__ssvfiscanf_r+0x2de>
 800b7fa:	bf00      	nop
 800b7fc:	080087d9 	.word	0x080087d9

0800b800 <malloc>:
 800b800:	4b02      	ldr	r3, [pc, #8]	; (800b80c <malloc+0xc>)
 800b802:	4601      	mov	r1, r0
 800b804:	6818      	ldr	r0, [r3, #0]
 800b806:	f000 b823 	b.w	800b850 <_malloc_r>
 800b80a:	bf00      	nop
 800b80c:	200001d4 	.word	0x200001d4

0800b810 <sbrk_aligned>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	4e0e      	ldr	r6, [pc, #56]	; (800b84c <sbrk_aligned+0x3c>)
 800b814:	460c      	mov	r4, r1
 800b816:	6831      	ldr	r1, [r6, #0]
 800b818:	4605      	mov	r5, r0
 800b81a:	b911      	cbnz	r1, 800b822 <sbrk_aligned+0x12>
 800b81c:	f001 f89e 	bl	800c95c <_sbrk_r>
 800b820:	6030      	str	r0, [r6, #0]
 800b822:	4621      	mov	r1, r4
 800b824:	4628      	mov	r0, r5
 800b826:	f001 f899 	bl	800c95c <_sbrk_r>
 800b82a:	1c43      	adds	r3, r0, #1
 800b82c:	d00a      	beq.n	800b844 <sbrk_aligned+0x34>
 800b82e:	1cc4      	adds	r4, r0, #3
 800b830:	f024 0403 	bic.w	r4, r4, #3
 800b834:	42a0      	cmp	r0, r4
 800b836:	d007      	beq.n	800b848 <sbrk_aligned+0x38>
 800b838:	1a21      	subs	r1, r4, r0
 800b83a:	4628      	mov	r0, r5
 800b83c:	f001 f88e 	bl	800c95c <_sbrk_r>
 800b840:	3001      	adds	r0, #1
 800b842:	d101      	bne.n	800b848 <sbrk_aligned+0x38>
 800b844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b848:	4620      	mov	r0, r4
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	20007924 	.word	0x20007924

0800b850 <_malloc_r>:
 800b850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b854:	1ccd      	adds	r5, r1, #3
 800b856:	f025 0503 	bic.w	r5, r5, #3
 800b85a:	3508      	adds	r5, #8
 800b85c:	2d0c      	cmp	r5, #12
 800b85e:	bf38      	it	cc
 800b860:	250c      	movcc	r5, #12
 800b862:	2d00      	cmp	r5, #0
 800b864:	4607      	mov	r7, r0
 800b866:	db01      	blt.n	800b86c <_malloc_r+0x1c>
 800b868:	42a9      	cmp	r1, r5
 800b86a:	d905      	bls.n	800b878 <_malloc_r+0x28>
 800b86c:	230c      	movs	r3, #12
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	2600      	movs	r6, #0
 800b872:	4630      	mov	r0, r6
 800b874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b878:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b94c <_malloc_r+0xfc>
 800b87c:	f000 fab0 	bl	800bde0 <__malloc_lock>
 800b880:	f8d8 3000 	ldr.w	r3, [r8]
 800b884:	461c      	mov	r4, r3
 800b886:	bb5c      	cbnz	r4, 800b8e0 <_malloc_r+0x90>
 800b888:	4629      	mov	r1, r5
 800b88a:	4638      	mov	r0, r7
 800b88c:	f7ff ffc0 	bl	800b810 <sbrk_aligned>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	4604      	mov	r4, r0
 800b894:	d155      	bne.n	800b942 <_malloc_r+0xf2>
 800b896:	f8d8 4000 	ldr.w	r4, [r8]
 800b89a:	4626      	mov	r6, r4
 800b89c:	2e00      	cmp	r6, #0
 800b89e:	d145      	bne.n	800b92c <_malloc_r+0xdc>
 800b8a0:	2c00      	cmp	r4, #0
 800b8a2:	d048      	beq.n	800b936 <_malloc_r+0xe6>
 800b8a4:	6823      	ldr	r3, [r4, #0]
 800b8a6:	4631      	mov	r1, r6
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	eb04 0903 	add.w	r9, r4, r3
 800b8ae:	f001 f855 	bl	800c95c <_sbrk_r>
 800b8b2:	4581      	cmp	r9, r0
 800b8b4:	d13f      	bne.n	800b936 <_malloc_r+0xe6>
 800b8b6:	6821      	ldr	r1, [r4, #0]
 800b8b8:	1a6d      	subs	r5, r5, r1
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	4638      	mov	r0, r7
 800b8be:	f7ff ffa7 	bl	800b810 <sbrk_aligned>
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	d037      	beq.n	800b936 <_malloc_r+0xe6>
 800b8c6:	6823      	ldr	r3, [r4, #0]
 800b8c8:	442b      	add	r3, r5
 800b8ca:	6023      	str	r3, [r4, #0]
 800b8cc:	f8d8 3000 	ldr.w	r3, [r8]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d038      	beq.n	800b946 <_malloc_r+0xf6>
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	42a2      	cmp	r2, r4
 800b8d8:	d12b      	bne.n	800b932 <_malloc_r+0xe2>
 800b8da:	2200      	movs	r2, #0
 800b8dc:	605a      	str	r2, [r3, #4]
 800b8de:	e00f      	b.n	800b900 <_malloc_r+0xb0>
 800b8e0:	6822      	ldr	r2, [r4, #0]
 800b8e2:	1b52      	subs	r2, r2, r5
 800b8e4:	d41f      	bmi.n	800b926 <_malloc_r+0xd6>
 800b8e6:	2a0b      	cmp	r2, #11
 800b8e8:	d917      	bls.n	800b91a <_malloc_r+0xca>
 800b8ea:	1961      	adds	r1, r4, r5
 800b8ec:	42a3      	cmp	r3, r4
 800b8ee:	6025      	str	r5, [r4, #0]
 800b8f0:	bf18      	it	ne
 800b8f2:	6059      	strne	r1, [r3, #4]
 800b8f4:	6863      	ldr	r3, [r4, #4]
 800b8f6:	bf08      	it	eq
 800b8f8:	f8c8 1000 	streq.w	r1, [r8]
 800b8fc:	5162      	str	r2, [r4, r5]
 800b8fe:	604b      	str	r3, [r1, #4]
 800b900:	4638      	mov	r0, r7
 800b902:	f104 060b 	add.w	r6, r4, #11
 800b906:	f000 fa71 	bl	800bdec <__malloc_unlock>
 800b90a:	f026 0607 	bic.w	r6, r6, #7
 800b90e:	1d23      	adds	r3, r4, #4
 800b910:	1af2      	subs	r2, r6, r3
 800b912:	d0ae      	beq.n	800b872 <_malloc_r+0x22>
 800b914:	1b9b      	subs	r3, r3, r6
 800b916:	50a3      	str	r3, [r4, r2]
 800b918:	e7ab      	b.n	800b872 <_malloc_r+0x22>
 800b91a:	42a3      	cmp	r3, r4
 800b91c:	6862      	ldr	r2, [r4, #4]
 800b91e:	d1dd      	bne.n	800b8dc <_malloc_r+0x8c>
 800b920:	f8c8 2000 	str.w	r2, [r8]
 800b924:	e7ec      	b.n	800b900 <_malloc_r+0xb0>
 800b926:	4623      	mov	r3, r4
 800b928:	6864      	ldr	r4, [r4, #4]
 800b92a:	e7ac      	b.n	800b886 <_malloc_r+0x36>
 800b92c:	4634      	mov	r4, r6
 800b92e:	6876      	ldr	r6, [r6, #4]
 800b930:	e7b4      	b.n	800b89c <_malloc_r+0x4c>
 800b932:	4613      	mov	r3, r2
 800b934:	e7cc      	b.n	800b8d0 <_malloc_r+0x80>
 800b936:	230c      	movs	r3, #12
 800b938:	603b      	str	r3, [r7, #0]
 800b93a:	4638      	mov	r0, r7
 800b93c:	f000 fa56 	bl	800bdec <__malloc_unlock>
 800b940:	e797      	b.n	800b872 <_malloc_r+0x22>
 800b942:	6025      	str	r5, [r4, #0]
 800b944:	e7dc      	b.n	800b900 <_malloc_r+0xb0>
 800b946:	605b      	str	r3, [r3, #4]
 800b948:	deff      	udf	#255	; 0xff
 800b94a:	bf00      	nop
 800b94c:	20007920 	.word	0x20007920

0800b950 <__ascii_mbtowc>:
 800b950:	b082      	sub	sp, #8
 800b952:	b901      	cbnz	r1, 800b956 <__ascii_mbtowc+0x6>
 800b954:	a901      	add	r1, sp, #4
 800b956:	b142      	cbz	r2, 800b96a <__ascii_mbtowc+0x1a>
 800b958:	b14b      	cbz	r3, 800b96e <__ascii_mbtowc+0x1e>
 800b95a:	7813      	ldrb	r3, [r2, #0]
 800b95c:	600b      	str	r3, [r1, #0]
 800b95e:	7812      	ldrb	r2, [r2, #0]
 800b960:	1e10      	subs	r0, r2, #0
 800b962:	bf18      	it	ne
 800b964:	2001      	movne	r0, #1
 800b966:	b002      	add	sp, #8
 800b968:	4770      	bx	lr
 800b96a:	4610      	mov	r0, r2
 800b96c:	e7fb      	b.n	800b966 <__ascii_mbtowc+0x16>
 800b96e:	f06f 0001 	mvn.w	r0, #1
 800b972:	e7f8      	b.n	800b966 <__ascii_mbtowc+0x16>

0800b974 <_scanf_chars>:
 800b974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b978:	4615      	mov	r5, r2
 800b97a:	688a      	ldr	r2, [r1, #8]
 800b97c:	4680      	mov	r8, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	b932      	cbnz	r2, 800b990 <_scanf_chars+0x1c>
 800b982:	698a      	ldr	r2, [r1, #24]
 800b984:	2a00      	cmp	r2, #0
 800b986:	bf0c      	ite	eq
 800b988:	2201      	moveq	r2, #1
 800b98a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800b98e:	608a      	str	r2, [r1, #8]
 800b990:	6822      	ldr	r2, [r4, #0]
 800b992:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ba24 <_scanf_chars+0xb0>
 800b996:	06d1      	lsls	r1, r2, #27
 800b998:	bf5f      	itttt	pl
 800b99a:	681a      	ldrpl	r2, [r3, #0]
 800b99c:	1d11      	addpl	r1, r2, #4
 800b99e:	6019      	strpl	r1, [r3, #0]
 800b9a0:	6816      	ldrpl	r6, [r2, #0]
 800b9a2:	2700      	movs	r7, #0
 800b9a4:	69a0      	ldr	r0, [r4, #24]
 800b9a6:	b188      	cbz	r0, 800b9cc <_scanf_chars+0x58>
 800b9a8:	2801      	cmp	r0, #1
 800b9aa:	d107      	bne.n	800b9bc <_scanf_chars+0x48>
 800b9ac:	682a      	ldr	r2, [r5, #0]
 800b9ae:	7811      	ldrb	r1, [r2, #0]
 800b9b0:	6962      	ldr	r2, [r4, #20]
 800b9b2:	5c52      	ldrb	r2, [r2, r1]
 800b9b4:	b952      	cbnz	r2, 800b9cc <_scanf_chars+0x58>
 800b9b6:	2f00      	cmp	r7, #0
 800b9b8:	d031      	beq.n	800ba1e <_scanf_chars+0xaa>
 800b9ba:	e022      	b.n	800ba02 <_scanf_chars+0x8e>
 800b9bc:	2802      	cmp	r0, #2
 800b9be:	d120      	bne.n	800ba02 <_scanf_chars+0x8e>
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b9c8:	071b      	lsls	r3, r3, #28
 800b9ca:	d41a      	bmi.n	800ba02 <_scanf_chars+0x8e>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	06da      	lsls	r2, r3, #27
 800b9d0:	bf5e      	ittt	pl
 800b9d2:	682b      	ldrpl	r3, [r5, #0]
 800b9d4:	781b      	ldrbpl	r3, [r3, #0]
 800b9d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b9da:	682a      	ldr	r2, [r5, #0]
 800b9dc:	686b      	ldr	r3, [r5, #4]
 800b9de:	3201      	adds	r2, #1
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	68a2      	ldr	r2, [r4, #8]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	3a01      	subs	r2, #1
 800b9e8:	606b      	str	r3, [r5, #4]
 800b9ea:	3701      	adds	r7, #1
 800b9ec:	60a2      	str	r2, [r4, #8]
 800b9ee:	b142      	cbz	r2, 800ba02 <_scanf_chars+0x8e>
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	dcd7      	bgt.n	800b9a4 <_scanf_chars+0x30>
 800b9f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4798      	blx	r3
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d0d0      	beq.n	800b9a4 <_scanf_chars+0x30>
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	f013 0310 	ands.w	r3, r3, #16
 800ba08:	d105      	bne.n	800ba16 <_scanf_chars+0xa2>
 800ba0a:	68e2      	ldr	r2, [r4, #12]
 800ba0c:	3201      	adds	r2, #1
 800ba0e:	60e2      	str	r2, [r4, #12]
 800ba10:	69a2      	ldr	r2, [r4, #24]
 800ba12:	b102      	cbz	r2, 800ba16 <_scanf_chars+0xa2>
 800ba14:	7033      	strb	r3, [r6, #0]
 800ba16:	6923      	ldr	r3, [r4, #16]
 800ba18:	443b      	add	r3, r7
 800ba1a:	6123      	str	r3, [r4, #16]
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba22:	bf00      	nop
 800ba24:	0800d1a1 	.word	0x0800d1a1

0800ba28 <_scanf_i>:
 800ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2c:	4698      	mov	r8, r3
 800ba2e:	4b74      	ldr	r3, [pc, #464]	; (800bc00 <_scanf_i+0x1d8>)
 800ba30:	460c      	mov	r4, r1
 800ba32:	4682      	mov	sl, r0
 800ba34:	4616      	mov	r6, r2
 800ba36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba3a:	b087      	sub	sp, #28
 800ba3c:	ab03      	add	r3, sp, #12
 800ba3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba42:	4b70      	ldr	r3, [pc, #448]	; (800bc04 <_scanf_i+0x1dc>)
 800ba44:	69a1      	ldr	r1, [r4, #24]
 800ba46:	4a70      	ldr	r2, [pc, #448]	; (800bc08 <_scanf_i+0x1e0>)
 800ba48:	2903      	cmp	r1, #3
 800ba4a:	bf18      	it	ne
 800ba4c:	461a      	movne	r2, r3
 800ba4e:	68a3      	ldr	r3, [r4, #8]
 800ba50:	9201      	str	r2, [sp, #4]
 800ba52:	1e5a      	subs	r2, r3, #1
 800ba54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ba58:	bf88      	it	hi
 800ba5a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ba5e:	4627      	mov	r7, r4
 800ba60:	bf82      	ittt	hi
 800ba62:	eb03 0905 	addhi.w	r9, r3, r5
 800ba66:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ba6a:	60a3      	strhi	r3, [r4, #8]
 800ba6c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ba70:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ba74:	bf98      	it	ls
 800ba76:	f04f 0900 	movls.w	r9, #0
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	463d      	mov	r5, r7
 800ba7e:	f04f 0b00 	mov.w	fp, #0
 800ba82:	6831      	ldr	r1, [r6, #0]
 800ba84:	ab03      	add	r3, sp, #12
 800ba86:	7809      	ldrb	r1, [r1, #0]
 800ba88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	f7f4 fb9f 	bl	80001d0 <memchr>
 800ba92:	b328      	cbz	r0, 800bae0 <_scanf_i+0xb8>
 800ba94:	f1bb 0f01 	cmp.w	fp, #1
 800ba98:	d159      	bne.n	800bb4e <_scanf_i+0x126>
 800ba9a:	6862      	ldr	r2, [r4, #4]
 800ba9c:	b92a      	cbnz	r2, 800baaa <_scanf_i+0x82>
 800ba9e:	6822      	ldr	r2, [r4, #0]
 800baa0:	2308      	movs	r3, #8
 800baa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800baa6:	6063      	str	r3, [r4, #4]
 800baa8:	6022      	str	r2, [r4, #0]
 800baaa:	6822      	ldr	r2, [r4, #0]
 800baac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bab0:	6022      	str	r2, [r4, #0]
 800bab2:	68a2      	ldr	r2, [r4, #8]
 800bab4:	1e51      	subs	r1, r2, #1
 800bab6:	60a1      	str	r1, [r4, #8]
 800bab8:	b192      	cbz	r2, 800bae0 <_scanf_i+0xb8>
 800baba:	6832      	ldr	r2, [r6, #0]
 800babc:	1c51      	adds	r1, r2, #1
 800babe:	6031      	str	r1, [r6, #0]
 800bac0:	7812      	ldrb	r2, [r2, #0]
 800bac2:	f805 2b01 	strb.w	r2, [r5], #1
 800bac6:	6872      	ldr	r2, [r6, #4]
 800bac8:	3a01      	subs	r2, #1
 800baca:	2a00      	cmp	r2, #0
 800bacc:	6072      	str	r2, [r6, #4]
 800bace:	dc07      	bgt.n	800bae0 <_scanf_i+0xb8>
 800bad0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bad4:	4631      	mov	r1, r6
 800bad6:	4650      	mov	r0, sl
 800bad8:	4790      	blx	r2
 800bada:	2800      	cmp	r0, #0
 800badc:	f040 8085 	bne.w	800bbea <_scanf_i+0x1c2>
 800bae0:	f10b 0b01 	add.w	fp, fp, #1
 800bae4:	f1bb 0f03 	cmp.w	fp, #3
 800bae8:	d1cb      	bne.n	800ba82 <_scanf_i+0x5a>
 800baea:	6863      	ldr	r3, [r4, #4]
 800baec:	b90b      	cbnz	r3, 800baf2 <_scanf_i+0xca>
 800baee:	230a      	movs	r3, #10
 800baf0:	6063      	str	r3, [r4, #4]
 800baf2:	6863      	ldr	r3, [r4, #4]
 800baf4:	4945      	ldr	r1, [pc, #276]	; (800bc0c <_scanf_i+0x1e4>)
 800baf6:	6960      	ldr	r0, [r4, #20]
 800baf8:	1ac9      	subs	r1, r1, r3
 800bafa:	f000 f889 	bl	800bc10 <__sccl>
 800bafe:	f04f 0b00 	mov.w	fp, #0
 800bb02:	68a3      	ldr	r3, [r4, #8]
 800bb04:	6822      	ldr	r2, [r4, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d03d      	beq.n	800bb86 <_scanf_i+0x15e>
 800bb0a:	6831      	ldr	r1, [r6, #0]
 800bb0c:	6960      	ldr	r0, [r4, #20]
 800bb0e:	f891 c000 	ldrb.w	ip, [r1]
 800bb12:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d035      	beq.n	800bb86 <_scanf_i+0x15e>
 800bb1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bb1e:	d124      	bne.n	800bb6a <_scanf_i+0x142>
 800bb20:	0510      	lsls	r0, r2, #20
 800bb22:	d522      	bpl.n	800bb6a <_scanf_i+0x142>
 800bb24:	f10b 0b01 	add.w	fp, fp, #1
 800bb28:	f1b9 0f00 	cmp.w	r9, #0
 800bb2c:	d003      	beq.n	800bb36 <_scanf_i+0x10e>
 800bb2e:	3301      	adds	r3, #1
 800bb30:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800bb34:	60a3      	str	r3, [r4, #8]
 800bb36:	6873      	ldr	r3, [r6, #4]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	6073      	str	r3, [r6, #4]
 800bb3e:	dd1b      	ble.n	800bb78 <_scanf_i+0x150>
 800bb40:	6833      	ldr	r3, [r6, #0]
 800bb42:	3301      	adds	r3, #1
 800bb44:	6033      	str	r3, [r6, #0]
 800bb46:	68a3      	ldr	r3, [r4, #8]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	60a3      	str	r3, [r4, #8]
 800bb4c:	e7d9      	b.n	800bb02 <_scanf_i+0xda>
 800bb4e:	f1bb 0f02 	cmp.w	fp, #2
 800bb52:	d1ae      	bne.n	800bab2 <_scanf_i+0x8a>
 800bb54:	6822      	ldr	r2, [r4, #0]
 800bb56:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bb5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bb5e:	d1bf      	bne.n	800bae0 <_scanf_i+0xb8>
 800bb60:	2310      	movs	r3, #16
 800bb62:	6063      	str	r3, [r4, #4]
 800bb64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb68:	e7a2      	b.n	800bab0 <_scanf_i+0x88>
 800bb6a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bb6e:	6022      	str	r2, [r4, #0]
 800bb70:	780b      	ldrb	r3, [r1, #0]
 800bb72:	f805 3b01 	strb.w	r3, [r5], #1
 800bb76:	e7de      	b.n	800bb36 <_scanf_i+0x10e>
 800bb78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bb7c:	4631      	mov	r1, r6
 800bb7e:	4650      	mov	r0, sl
 800bb80:	4798      	blx	r3
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d0df      	beq.n	800bb46 <_scanf_i+0x11e>
 800bb86:	6823      	ldr	r3, [r4, #0]
 800bb88:	05d9      	lsls	r1, r3, #23
 800bb8a:	d50d      	bpl.n	800bba8 <_scanf_i+0x180>
 800bb8c:	42bd      	cmp	r5, r7
 800bb8e:	d909      	bls.n	800bba4 <_scanf_i+0x17c>
 800bb90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bb94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb98:	4632      	mov	r2, r6
 800bb9a:	4650      	mov	r0, sl
 800bb9c:	4798      	blx	r3
 800bb9e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800bba2:	464d      	mov	r5, r9
 800bba4:	42bd      	cmp	r5, r7
 800bba6:	d028      	beq.n	800bbfa <_scanf_i+0x1d2>
 800bba8:	6822      	ldr	r2, [r4, #0]
 800bbaa:	f012 0210 	ands.w	r2, r2, #16
 800bbae:	d113      	bne.n	800bbd8 <_scanf_i+0x1b0>
 800bbb0:	702a      	strb	r2, [r5, #0]
 800bbb2:	6863      	ldr	r3, [r4, #4]
 800bbb4:	9e01      	ldr	r6, [sp, #4]
 800bbb6:	4639      	mov	r1, r7
 800bbb8:	4650      	mov	r0, sl
 800bbba:	47b0      	blx	r6
 800bbbc:	f8d8 3000 	ldr.w	r3, [r8]
 800bbc0:	6821      	ldr	r1, [r4, #0]
 800bbc2:	1d1a      	adds	r2, r3, #4
 800bbc4:	f8c8 2000 	str.w	r2, [r8]
 800bbc8:	f011 0f20 	tst.w	r1, #32
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	d00f      	beq.n	800bbf0 <_scanf_i+0x1c8>
 800bbd0:	6018      	str	r0, [r3, #0]
 800bbd2:	68e3      	ldr	r3, [r4, #12]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	60e3      	str	r3, [r4, #12]
 800bbd8:	6923      	ldr	r3, [r4, #16]
 800bbda:	1bed      	subs	r5, r5, r7
 800bbdc:	445d      	add	r5, fp
 800bbde:	442b      	add	r3, r5
 800bbe0:	6123      	str	r3, [r4, #16]
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	b007      	add	sp, #28
 800bbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbea:	f04f 0b00 	mov.w	fp, #0
 800bbee:	e7ca      	b.n	800bb86 <_scanf_i+0x15e>
 800bbf0:	07ca      	lsls	r2, r1, #31
 800bbf2:	bf4c      	ite	mi
 800bbf4:	8018      	strhmi	r0, [r3, #0]
 800bbf6:	6018      	strpl	r0, [r3, #0]
 800bbf8:	e7eb      	b.n	800bbd2 <_scanf_i+0x1aa>
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	e7f2      	b.n	800bbe4 <_scanf_i+0x1bc>
 800bbfe:	bf00      	nop
 800bc00:	0800d0d8 	.word	0x0800d0d8
 800bc04:	0800c909 	.word	0x0800c909
 800bc08:	08009b91 	.word	0x08009b91
 800bc0c:	0800d3af 	.word	0x0800d3af

0800bc10 <__sccl>:
 800bc10:	b570      	push	{r4, r5, r6, lr}
 800bc12:	780b      	ldrb	r3, [r1, #0]
 800bc14:	4604      	mov	r4, r0
 800bc16:	2b5e      	cmp	r3, #94	; 0x5e
 800bc18:	bf0b      	itete	eq
 800bc1a:	784b      	ldrbeq	r3, [r1, #1]
 800bc1c:	1c4a      	addne	r2, r1, #1
 800bc1e:	1c8a      	addeq	r2, r1, #2
 800bc20:	2100      	movne	r1, #0
 800bc22:	bf08      	it	eq
 800bc24:	2101      	moveq	r1, #1
 800bc26:	3801      	subs	r0, #1
 800bc28:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bc2c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800bc30:	42a8      	cmp	r0, r5
 800bc32:	d1fb      	bne.n	800bc2c <__sccl+0x1c>
 800bc34:	b90b      	cbnz	r3, 800bc3a <__sccl+0x2a>
 800bc36:	1e50      	subs	r0, r2, #1
 800bc38:	bd70      	pop	{r4, r5, r6, pc}
 800bc3a:	f081 0101 	eor.w	r1, r1, #1
 800bc3e:	54e1      	strb	r1, [r4, r3]
 800bc40:	4610      	mov	r0, r2
 800bc42:	4602      	mov	r2, r0
 800bc44:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bc48:	2d2d      	cmp	r5, #45	; 0x2d
 800bc4a:	d005      	beq.n	800bc58 <__sccl+0x48>
 800bc4c:	2d5d      	cmp	r5, #93	; 0x5d
 800bc4e:	d016      	beq.n	800bc7e <__sccl+0x6e>
 800bc50:	2d00      	cmp	r5, #0
 800bc52:	d0f1      	beq.n	800bc38 <__sccl+0x28>
 800bc54:	462b      	mov	r3, r5
 800bc56:	e7f2      	b.n	800bc3e <__sccl+0x2e>
 800bc58:	7846      	ldrb	r6, [r0, #1]
 800bc5a:	2e5d      	cmp	r6, #93	; 0x5d
 800bc5c:	d0fa      	beq.n	800bc54 <__sccl+0x44>
 800bc5e:	42b3      	cmp	r3, r6
 800bc60:	dcf8      	bgt.n	800bc54 <__sccl+0x44>
 800bc62:	3002      	adds	r0, #2
 800bc64:	461a      	mov	r2, r3
 800bc66:	3201      	adds	r2, #1
 800bc68:	4296      	cmp	r6, r2
 800bc6a:	54a1      	strb	r1, [r4, r2]
 800bc6c:	dcfb      	bgt.n	800bc66 <__sccl+0x56>
 800bc6e:	1af2      	subs	r2, r6, r3
 800bc70:	3a01      	subs	r2, #1
 800bc72:	1c5d      	adds	r5, r3, #1
 800bc74:	42b3      	cmp	r3, r6
 800bc76:	bfa8      	it	ge
 800bc78:	2200      	movge	r2, #0
 800bc7a:	18ab      	adds	r3, r5, r2
 800bc7c:	e7e1      	b.n	800bc42 <__sccl+0x32>
 800bc7e:	4610      	mov	r0, r2
 800bc80:	e7da      	b.n	800bc38 <__sccl+0x28>
	...

0800bc84 <__sflush_r>:
 800bc84:	898a      	ldrh	r2, [r1, #12]
 800bc86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	0710      	lsls	r0, r2, #28
 800bc8e:	460c      	mov	r4, r1
 800bc90:	d458      	bmi.n	800bd44 <__sflush_r+0xc0>
 800bc92:	684b      	ldr	r3, [r1, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dc05      	bgt.n	800bca4 <__sflush_r+0x20>
 800bc98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	dc02      	bgt.n	800bca4 <__sflush_r+0x20>
 800bc9e:	2000      	movs	r0, #0
 800bca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bca6:	2e00      	cmp	r6, #0
 800bca8:	d0f9      	beq.n	800bc9e <__sflush_r+0x1a>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcb0:	682f      	ldr	r7, [r5, #0]
 800bcb2:	6a21      	ldr	r1, [r4, #32]
 800bcb4:	602b      	str	r3, [r5, #0]
 800bcb6:	d032      	beq.n	800bd1e <__sflush_r+0x9a>
 800bcb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	075a      	lsls	r2, r3, #29
 800bcbe:	d505      	bpl.n	800bccc <__sflush_r+0x48>
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	1ac0      	subs	r0, r0, r3
 800bcc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcc6:	b10b      	cbz	r3, 800bccc <__sflush_r+0x48>
 800bcc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcca:	1ac0      	subs	r0, r0, r3
 800bccc:	2300      	movs	r3, #0
 800bcce:	4602      	mov	r2, r0
 800bcd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcd2:	6a21      	ldr	r1, [r4, #32]
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	47b0      	blx	r6
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	d106      	bne.n	800bcec <__sflush_r+0x68>
 800bcde:	6829      	ldr	r1, [r5, #0]
 800bce0:	291d      	cmp	r1, #29
 800bce2:	d82b      	bhi.n	800bd3c <__sflush_r+0xb8>
 800bce4:	4a29      	ldr	r2, [pc, #164]	; (800bd8c <__sflush_r+0x108>)
 800bce6:	410a      	asrs	r2, r1
 800bce8:	07d6      	lsls	r6, r2, #31
 800bcea:	d427      	bmi.n	800bd3c <__sflush_r+0xb8>
 800bcec:	2200      	movs	r2, #0
 800bcee:	6062      	str	r2, [r4, #4]
 800bcf0:	04d9      	lsls	r1, r3, #19
 800bcf2:	6922      	ldr	r2, [r4, #16]
 800bcf4:	6022      	str	r2, [r4, #0]
 800bcf6:	d504      	bpl.n	800bd02 <__sflush_r+0x7e>
 800bcf8:	1c42      	adds	r2, r0, #1
 800bcfa:	d101      	bne.n	800bd00 <__sflush_r+0x7c>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	b903      	cbnz	r3, 800bd02 <__sflush_r+0x7e>
 800bd00:	6560      	str	r0, [r4, #84]	; 0x54
 800bd02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd04:	602f      	str	r7, [r5, #0]
 800bd06:	2900      	cmp	r1, #0
 800bd08:	d0c9      	beq.n	800bc9e <__sflush_r+0x1a>
 800bd0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd0e:	4299      	cmp	r1, r3
 800bd10:	d002      	beq.n	800bd18 <__sflush_r+0x94>
 800bd12:	4628      	mov	r0, r5
 800bd14:	f7fe fea6 	bl	800aa64 <_free_r>
 800bd18:	2000      	movs	r0, #0
 800bd1a:	6360      	str	r0, [r4, #52]	; 0x34
 800bd1c:	e7c0      	b.n	800bca0 <__sflush_r+0x1c>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4628      	mov	r0, r5
 800bd22:	47b0      	blx	r6
 800bd24:	1c41      	adds	r1, r0, #1
 800bd26:	d1c8      	bne.n	800bcba <__sflush_r+0x36>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d0c5      	beq.n	800bcba <__sflush_r+0x36>
 800bd2e:	2b1d      	cmp	r3, #29
 800bd30:	d001      	beq.n	800bd36 <__sflush_r+0xb2>
 800bd32:	2b16      	cmp	r3, #22
 800bd34:	d101      	bne.n	800bd3a <__sflush_r+0xb6>
 800bd36:	602f      	str	r7, [r5, #0]
 800bd38:	e7b1      	b.n	800bc9e <__sflush_r+0x1a>
 800bd3a:	89a3      	ldrh	r3, [r4, #12]
 800bd3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd40:	81a3      	strh	r3, [r4, #12]
 800bd42:	e7ad      	b.n	800bca0 <__sflush_r+0x1c>
 800bd44:	690f      	ldr	r7, [r1, #16]
 800bd46:	2f00      	cmp	r7, #0
 800bd48:	d0a9      	beq.n	800bc9e <__sflush_r+0x1a>
 800bd4a:	0793      	lsls	r3, r2, #30
 800bd4c:	680e      	ldr	r6, [r1, #0]
 800bd4e:	bf08      	it	eq
 800bd50:	694b      	ldreq	r3, [r1, #20]
 800bd52:	600f      	str	r7, [r1, #0]
 800bd54:	bf18      	it	ne
 800bd56:	2300      	movne	r3, #0
 800bd58:	eba6 0807 	sub.w	r8, r6, r7
 800bd5c:	608b      	str	r3, [r1, #8]
 800bd5e:	f1b8 0f00 	cmp.w	r8, #0
 800bd62:	dd9c      	ble.n	800bc9e <__sflush_r+0x1a>
 800bd64:	6a21      	ldr	r1, [r4, #32]
 800bd66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd68:	4643      	mov	r3, r8
 800bd6a:	463a      	mov	r2, r7
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	47b0      	blx	r6
 800bd70:	2800      	cmp	r0, #0
 800bd72:	dc06      	bgt.n	800bd82 <__sflush_r+0xfe>
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd7a:	81a3      	strh	r3, [r4, #12]
 800bd7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd80:	e78e      	b.n	800bca0 <__sflush_r+0x1c>
 800bd82:	4407      	add	r7, r0
 800bd84:	eba8 0800 	sub.w	r8, r8, r0
 800bd88:	e7e9      	b.n	800bd5e <__sflush_r+0xda>
 800bd8a:	bf00      	nop
 800bd8c:	dfbffffe 	.word	0xdfbffffe

0800bd90 <_fflush_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	690b      	ldr	r3, [r1, #16]
 800bd94:	4605      	mov	r5, r0
 800bd96:	460c      	mov	r4, r1
 800bd98:	b913      	cbnz	r3, 800bda0 <_fflush_r+0x10>
 800bd9a:	2500      	movs	r5, #0
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}
 800bda0:	b118      	cbz	r0, 800bdaa <_fflush_r+0x1a>
 800bda2:	6a03      	ldr	r3, [r0, #32]
 800bda4:	b90b      	cbnz	r3, 800bdaa <_fflush_r+0x1a>
 800bda6:	f7fd f845 	bl	8008e34 <__sinit>
 800bdaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0f3      	beq.n	800bd9a <_fflush_r+0xa>
 800bdb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdb4:	07d0      	lsls	r0, r2, #31
 800bdb6:	d404      	bmi.n	800bdc2 <_fflush_r+0x32>
 800bdb8:	0599      	lsls	r1, r3, #22
 800bdba:	d402      	bmi.n	800bdc2 <_fflush_r+0x32>
 800bdbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdbe:	f7fd ffac 	bl	8009d1a <__retarget_lock_acquire_recursive>
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	f7ff ff5d 	bl	800bc84 <__sflush_r>
 800bdca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdcc:	07da      	lsls	r2, r3, #31
 800bdce:	4605      	mov	r5, r0
 800bdd0:	d4e4      	bmi.n	800bd9c <_fflush_r+0xc>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	059b      	lsls	r3, r3, #22
 800bdd6:	d4e1      	bmi.n	800bd9c <_fflush_r+0xc>
 800bdd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdda:	f7fd ff9f 	bl	8009d1c <__retarget_lock_release_recursive>
 800bdde:	e7dd      	b.n	800bd9c <_fflush_r+0xc>

0800bde0 <__malloc_lock>:
 800bde0:	4801      	ldr	r0, [pc, #4]	; (800bde8 <__malloc_lock+0x8>)
 800bde2:	f7fd bf9a 	b.w	8009d1a <__retarget_lock_acquire_recursive>
 800bde6:	bf00      	nop
 800bde8:	2000791c 	.word	0x2000791c

0800bdec <__malloc_unlock>:
 800bdec:	4801      	ldr	r0, [pc, #4]	; (800bdf4 <__malloc_unlock+0x8>)
 800bdee:	f7fd bf95 	b.w	8009d1c <__retarget_lock_release_recursive>
 800bdf2:	bf00      	nop
 800bdf4:	2000791c 	.word	0x2000791c

0800bdf8 <_Balloc>:
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	69c6      	ldr	r6, [r0, #28]
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	460d      	mov	r5, r1
 800be00:	b976      	cbnz	r6, 800be20 <_Balloc+0x28>
 800be02:	2010      	movs	r0, #16
 800be04:	f7ff fcfc 	bl	800b800 <malloc>
 800be08:	4602      	mov	r2, r0
 800be0a:	61e0      	str	r0, [r4, #28]
 800be0c:	b920      	cbnz	r0, 800be18 <_Balloc+0x20>
 800be0e:	4b18      	ldr	r3, [pc, #96]	; (800be70 <_Balloc+0x78>)
 800be10:	4818      	ldr	r0, [pc, #96]	; (800be74 <_Balloc+0x7c>)
 800be12:	216b      	movs	r1, #107	; 0x6b
 800be14:	f000 fdb2 	bl	800c97c <__assert_func>
 800be18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be1c:	6006      	str	r6, [r0, #0]
 800be1e:	60c6      	str	r6, [r0, #12]
 800be20:	69e6      	ldr	r6, [r4, #28]
 800be22:	68f3      	ldr	r3, [r6, #12]
 800be24:	b183      	cbz	r3, 800be48 <_Balloc+0x50>
 800be26:	69e3      	ldr	r3, [r4, #28]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be2e:	b9b8      	cbnz	r0, 800be60 <_Balloc+0x68>
 800be30:	2101      	movs	r1, #1
 800be32:	fa01 f605 	lsl.w	r6, r1, r5
 800be36:	1d72      	adds	r2, r6, #5
 800be38:	0092      	lsls	r2, r2, #2
 800be3a:	4620      	mov	r0, r4
 800be3c:	f000 fdbc 	bl	800c9b8 <_calloc_r>
 800be40:	b160      	cbz	r0, 800be5c <_Balloc+0x64>
 800be42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be46:	e00e      	b.n	800be66 <_Balloc+0x6e>
 800be48:	2221      	movs	r2, #33	; 0x21
 800be4a:	2104      	movs	r1, #4
 800be4c:	4620      	mov	r0, r4
 800be4e:	f000 fdb3 	bl	800c9b8 <_calloc_r>
 800be52:	69e3      	ldr	r3, [r4, #28]
 800be54:	60f0      	str	r0, [r6, #12]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1e4      	bne.n	800be26 <_Balloc+0x2e>
 800be5c:	2000      	movs	r0, #0
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	6802      	ldr	r2, [r0, #0]
 800be62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be66:	2300      	movs	r3, #0
 800be68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be6c:	e7f7      	b.n	800be5e <_Balloc+0x66>
 800be6e:	bf00      	nop
 800be70:	0800d2ae 	.word	0x0800d2ae
 800be74:	0800d3ba 	.word	0x0800d3ba

0800be78 <_Bfree>:
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	69c6      	ldr	r6, [r0, #28]
 800be7c:	4605      	mov	r5, r0
 800be7e:	460c      	mov	r4, r1
 800be80:	b976      	cbnz	r6, 800bea0 <_Bfree+0x28>
 800be82:	2010      	movs	r0, #16
 800be84:	f7ff fcbc 	bl	800b800 <malloc>
 800be88:	4602      	mov	r2, r0
 800be8a:	61e8      	str	r0, [r5, #28]
 800be8c:	b920      	cbnz	r0, 800be98 <_Bfree+0x20>
 800be8e:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <_Bfree+0x3c>)
 800be90:	4809      	ldr	r0, [pc, #36]	; (800beb8 <_Bfree+0x40>)
 800be92:	218f      	movs	r1, #143	; 0x8f
 800be94:	f000 fd72 	bl	800c97c <__assert_func>
 800be98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be9c:	6006      	str	r6, [r0, #0]
 800be9e:	60c6      	str	r6, [r0, #12]
 800bea0:	b13c      	cbz	r4, 800beb2 <_Bfree+0x3a>
 800bea2:	69eb      	ldr	r3, [r5, #28]
 800bea4:	6862      	ldr	r2, [r4, #4]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800beac:	6021      	str	r1, [r4, #0]
 800beae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	0800d2ae 	.word	0x0800d2ae
 800beb8:	0800d3ba 	.word	0x0800d3ba

0800bebc <__multadd>:
 800bebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec0:	690d      	ldr	r5, [r1, #16]
 800bec2:	4607      	mov	r7, r0
 800bec4:	460c      	mov	r4, r1
 800bec6:	461e      	mov	r6, r3
 800bec8:	f101 0c14 	add.w	ip, r1, #20
 800becc:	2000      	movs	r0, #0
 800bece:	f8dc 3000 	ldr.w	r3, [ip]
 800bed2:	b299      	uxth	r1, r3
 800bed4:	fb02 6101 	mla	r1, r2, r1, r6
 800bed8:	0c1e      	lsrs	r6, r3, #16
 800beda:	0c0b      	lsrs	r3, r1, #16
 800bedc:	fb02 3306 	mla	r3, r2, r6, r3
 800bee0:	b289      	uxth	r1, r1
 800bee2:	3001      	adds	r0, #1
 800bee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bee8:	4285      	cmp	r5, r0
 800beea:	f84c 1b04 	str.w	r1, [ip], #4
 800beee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bef2:	dcec      	bgt.n	800bece <__multadd+0x12>
 800bef4:	b30e      	cbz	r6, 800bf3a <__multadd+0x7e>
 800bef6:	68a3      	ldr	r3, [r4, #8]
 800bef8:	42ab      	cmp	r3, r5
 800befa:	dc19      	bgt.n	800bf30 <__multadd+0x74>
 800befc:	6861      	ldr	r1, [r4, #4]
 800befe:	4638      	mov	r0, r7
 800bf00:	3101      	adds	r1, #1
 800bf02:	f7ff ff79 	bl	800bdf8 <_Balloc>
 800bf06:	4680      	mov	r8, r0
 800bf08:	b928      	cbnz	r0, 800bf16 <__multadd+0x5a>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	4b0c      	ldr	r3, [pc, #48]	; (800bf40 <__multadd+0x84>)
 800bf0e:	480d      	ldr	r0, [pc, #52]	; (800bf44 <__multadd+0x88>)
 800bf10:	21ba      	movs	r1, #186	; 0xba
 800bf12:	f000 fd33 	bl	800c97c <__assert_func>
 800bf16:	6922      	ldr	r2, [r4, #16]
 800bf18:	3202      	adds	r2, #2
 800bf1a:	f104 010c 	add.w	r1, r4, #12
 800bf1e:	0092      	lsls	r2, r2, #2
 800bf20:	300c      	adds	r0, #12
 800bf22:	f7fd fefc 	bl	8009d1e <memcpy>
 800bf26:	4621      	mov	r1, r4
 800bf28:	4638      	mov	r0, r7
 800bf2a:	f7ff ffa5 	bl	800be78 <_Bfree>
 800bf2e:	4644      	mov	r4, r8
 800bf30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf34:	3501      	adds	r5, #1
 800bf36:	615e      	str	r6, [r3, #20]
 800bf38:	6125      	str	r5, [r4, #16]
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf40:	0800d31d 	.word	0x0800d31d
 800bf44:	0800d3ba 	.word	0x0800d3ba

0800bf48 <__s2b>:
 800bf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	4615      	mov	r5, r2
 800bf50:	461f      	mov	r7, r3
 800bf52:	2209      	movs	r2, #9
 800bf54:	3308      	adds	r3, #8
 800bf56:	4606      	mov	r6, r0
 800bf58:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	2201      	movs	r2, #1
 800bf60:	429a      	cmp	r2, r3
 800bf62:	db09      	blt.n	800bf78 <__s2b+0x30>
 800bf64:	4630      	mov	r0, r6
 800bf66:	f7ff ff47 	bl	800bdf8 <_Balloc>
 800bf6a:	b940      	cbnz	r0, 800bf7e <__s2b+0x36>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	4b19      	ldr	r3, [pc, #100]	; (800bfd4 <__s2b+0x8c>)
 800bf70:	4819      	ldr	r0, [pc, #100]	; (800bfd8 <__s2b+0x90>)
 800bf72:	21d3      	movs	r1, #211	; 0xd3
 800bf74:	f000 fd02 	bl	800c97c <__assert_func>
 800bf78:	0052      	lsls	r2, r2, #1
 800bf7a:	3101      	adds	r1, #1
 800bf7c:	e7f0      	b.n	800bf60 <__s2b+0x18>
 800bf7e:	9b08      	ldr	r3, [sp, #32]
 800bf80:	6143      	str	r3, [r0, #20]
 800bf82:	2d09      	cmp	r5, #9
 800bf84:	f04f 0301 	mov.w	r3, #1
 800bf88:	6103      	str	r3, [r0, #16]
 800bf8a:	dd16      	ble.n	800bfba <__s2b+0x72>
 800bf8c:	f104 0909 	add.w	r9, r4, #9
 800bf90:	46c8      	mov	r8, r9
 800bf92:	442c      	add	r4, r5
 800bf94:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf98:	4601      	mov	r1, r0
 800bf9a:	3b30      	subs	r3, #48	; 0x30
 800bf9c:	220a      	movs	r2, #10
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f7ff ff8c 	bl	800bebc <__multadd>
 800bfa4:	45a0      	cmp	r8, r4
 800bfa6:	d1f5      	bne.n	800bf94 <__s2b+0x4c>
 800bfa8:	f1a5 0408 	sub.w	r4, r5, #8
 800bfac:	444c      	add	r4, r9
 800bfae:	1b2d      	subs	r5, r5, r4
 800bfb0:	1963      	adds	r3, r4, r5
 800bfb2:	42bb      	cmp	r3, r7
 800bfb4:	db04      	blt.n	800bfc0 <__s2b+0x78>
 800bfb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfba:	340a      	adds	r4, #10
 800bfbc:	2509      	movs	r5, #9
 800bfbe:	e7f6      	b.n	800bfae <__s2b+0x66>
 800bfc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bfc4:	4601      	mov	r1, r0
 800bfc6:	3b30      	subs	r3, #48	; 0x30
 800bfc8:	220a      	movs	r2, #10
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f7ff ff76 	bl	800bebc <__multadd>
 800bfd0:	e7ee      	b.n	800bfb0 <__s2b+0x68>
 800bfd2:	bf00      	nop
 800bfd4:	0800d31d 	.word	0x0800d31d
 800bfd8:	0800d3ba 	.word	0x0800d3ba

0800bfdc <__hi0bits>:
 800bfdc:	0c03      	lsrs	r3, r0, #16
 800bfde:	041b      	lsls	r3, r3, #16
 800bfe0:	b9d3      	cbnz	r3, 800c018 <__hi0bits+0x3c>
 800bfe2:	0400      	lsls	r0, r0, #16
 800bfe4:	2310      	movs	r3, #16
 800bfe6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bfea:	bf04      	itt	eq
 800bfec:	0200      	lsleq	r0, r0, #8
 800bfee:	3308      	addeq	r3, #8
 800bff0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bff4:	bf04      	itt	eq
 800bff6:	0100      	lsleq	r0, r0, #4
 800bff8:	3304      	addeq	r3, #4
 800bffa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bffe:	bf04      	itt	eq
 800c000:	0080      	lsleq	r0, r0, #2
 800c002:	3302      	addeq	r3, #2
 800c004:	2800      	cmp	r0, #0
 800c006:	db05      	blt.n	800c014 <__hi0bits+0x38>
 800c008:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c00c:	f103 0301 	add.w	r3, r3, #1
 800c010:	bf08      	it	eq
 800c012:	2320      	moveq	r3, #32
 800c014:	4618      	mov	r0, r3
 800c016:	4770      	bx	lr
 800c018:	2300      	movs	r3, #0
 800c01a:	e7e4      	b.n	800bfe6 <__hi0bits+0xa>

0800c01c <__lo0bits>:
 800c01c:	6803      	ldr	r3, [r0, #0]
 800c01e:	f013 0207 	ands.w	r2, r3, #7
 800c022:	d00c      	beq.n	800c03e <__lo0bits+0x22>
 800c024:	07d9      	lsls	r1, r3, #31
 800c026:	d422      	bmi.n	800c06e <__lo0bits+0x52>
 800c028:	079a      	lsls	r2, r3, #30
 800c02a:	bf49      	itett	mi
 800c02c:	085b      	lsrmi	r3, r3, #1
 800c02e:	089b      	lsrpl	r3, r3, #2
 800c030:	6003      	strmi	r3, [r0, #0]
 800c032:	2201      	movmi	r2, #1
 800c034:	bf5c      	itt	pl
 800c036:	6003      	strpl	r3, [r0, #0]
 800c038:	2202      	movpl	r2, #2
 800c03a:	4610      	mov	r0, r2
 800c03c:	4770      	bx	lr
 800c03e:	b299      	uxth	r1, r3
 800c040:	b909      	cbnz	r1, 800c046 <__lo0bits+0x2a>
 800c042:	0c1b      	lsrs	r3, r3, #16
 800c044:	2210      	movs	r2, #16
 800c046:	b2d9      	uxtb	r1, r3
 800c048:	b909      	cbnz	r1, 800c04e <__lo0bits+0x32>
 800c04a:	3208      	adds	r2, #8
 800c04c:	0a1b      	lsrs	r3, r3, #8
 800c04e:	0719      	lsls	r1, r3, #28
 800c050:	bf04      	itt	eq
 800c052:	091b      	lsreq	r3, r3, #4
 800c054:	3204      	addeq	r2, #4
 800c056:	0799      	lsls	r1, r3, #30
 800c058:	bf04      	itt	eq
 800c05a:	089b      	lsreq	r3, r3, #2
 800c05c:	3202      	addeq	r2, #2
 800c05e:	07d9      	lsls	r1, r3, #31
 800c060:	d403      	bmi.n	800c06a <__lo0bits+0x4e>
 800c062:	085b      	lsrs	r3, r3, #1
 800c064:	f102 0201 	add.w	r2, r2, #1
 800c068:	d003      	beq.n	800c072 <__lo0bits+0x56>
 800c06a:	6003      	str	r3, [r0, #0]
 800c06c:	e7e5      	b.n	800c03a <__lo0bits+0x1e>
 800c06e:	2200      	movs	r2, #0
 800c070:	e7e3      	b.n	800c03a <__lo0bits+0x1e>
 800c072:	2220      	movs	r2, #32
 800c074:	e7e1      	b.n	800c03a <__lo0bits+0x1e>
	...

0800c078 <__i2b>:
 800c078:	b510      	push	{r4, lr}
 800c07a:	460c      	mov	r4, r1
 800c07c:	2101      	movs	r1, #1
 800c07e:	f7ff febb 	bl	800bdf8 <_Balloc>
 800c082:	4602      	mov	r2, r0
 800c084:	b928      	cbnz	r0, 800c092 <__i2b+0x1a>
 800c086:	4b05      	ldr	r3, [pc, #20]	; (800c09c <__i2b+0x24>)
 800c088:	4805      	ldr	r0, [pc, #20]	; (800c0a0 <__i2b+0x28>)
 800c08a:	f240 1145 	movw	r1, #325	; 0x145
 800c08e:	f000 fc75 	bl	800c97c <__assert_func>
 800c092:	2301      	movs	r3, #1
 800c094:	6144      	str	r4, [r0, #20]
 800c096:	6103      	str	r3, [r0, #16]
 800c098:	bd10      	pop	{r4, pc}
 800c09a:	bf00      	nop
 800c09c:	0800d31d 	.word	0x0800d31d
 800c0a0:	0800d3ba 	.word	0x0800d3ba

0800c0a4 <__multiply>:
 800c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	4691      	mov	r9, r2
 800c0aa:	690a      	ldr	r2, [r1, #16]
 800c0ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	bfb8      	it	lt
 800c0b4:	460b      	movlt	r3, r1
 800c0b6:	460c      	mov	r4, r1
 800c0b8:	bfbc      	itt	lt
 800c0ba:	464c      	movlt	r4, r9
 800c0bc:	4699      	movlt	r9, r3
 800c0be:	6927      	ldr	r7, [r4, #16]
 800c0c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0c4:	68a3      	ldr	r3, [r4, #8]
 800c0c6:	6861      	ldr	r1, [r4, #4]
 800c0c8:	eb07 060a 	add.w	r6, r7, sl
 800c0cc:	42b3      	cmp	r3, r6
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	bfb8      	it	lt
 800c0d2:	3101      	addlt	r1, #1
 800c0d4:	f7ff fe90 	bl	800bdf8 <_Balloc>
 800c0d8:	b930      	cbnz	r0, 800c0e8 <__multiply+0x44>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	4b44      	ldr	r3, [pc, #272]	; (800c1f0 <__multiply+0x14c>)
 800c0de:	4845      	ldr	r0, [pc, #276]	; (800c1f4 <__multiply+0x150>)
 800c0e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c0e4:	f000 fc4a 	bl	800c97c <__assert_func>
 800c0e8:	f100 0514 	add.w	r5, r0, #20
 800c0ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0f0:	462b      	mov	r3, r5
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	4543      	cmp	r3, r8
 800c0f6:	d321      	bcc.n	800c13c <__multiply+0x98>
 800c0f8:	f104 0314 	add.w	r3, r4, #20
 800c0fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c100:	f109 0314 	add.w	r3, r9, #20
 800c104:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c108:	9202      	str	r2, [sp, #8]
 800c10a:	1b3a      	subs	r2, r7, r4
 800c10c:	3a15      	subs	r2, #21
 800c10e:	f022 0203 	bic.w	r2, r2, #3
 800c112:	3204      	adds	r2, #4
 800c114:	f104 0115 	add.w	r1, r4, #21
 800c118:	428f      	cmp	r7, r1
 800c11a:	bf38      	it	cc
 800c11c:	2204      	movcc	r2, #4
 800c11e:	9201      	str	r2, [sp, #4]
 800c120:	9a02      	ldr	r2, [sp, #8]
 800c122:	9303      	str	r3, [sp, #12]
 800c124:	429a      	cmp	r2, r3
 800c126:	d80c      	bhi.n	800c142 <__multiply+0x9e>
 800c128:	2e00      	cmp	r6, #0
 800c12a:	dd03      	ble.n	800c134 <__multiply+0x90>
 800c12c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c130:	2b00      	cmp	r3, #0
 800c132:	d05b      	beq.n	800c1ec <__multiply+0x148>
 800c134:	6106      	str	r6, [r0, #16]
 800c136:	b005      	add	sp, #20
 800c138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c13c:	f843 2b04 	str.w	r2, [r3], #4
 800c140:	e7d8      	b.n	800c0f4 <__multiply+0x50>
 800c142:	f8b3 a000 	ldrh.w	sl, [r3]
 800c146:	f1ba 0f00 	cmp.w	sl, #0
 800c14a:	d024      	beq.n	800c196 <__multiply+0xf2>
 800c14c:	f104 0e14 	add.w	lr, r4, #20
 800c150:	46a9      	mov	r9, r5
 800c152:	f04f 0c00 	mov.w	ip, #0
 800c156:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c15a:	f8d9 1000 	ldr.w	r1, [r9]
 800c15e:	fa1f fb82 	uxth.w	fp, r2
 800c162:	b289      	uxth	r1, r1
 800c164:	fb0a 110b 	mla	r1, sl, fp, r1
 800c168:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c16c:	f8d9 2000 	ldr.w	r2, [r9]
 800c170:	4461      	add	r1, ip
 800c172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c176:	fb0a c20b 	mla	r2, sl, fp, ip
 800c17a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c17e:	b289      	uxth	r1, r1
 800c180:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c184:	4577      	cmp	r7, lr
 800c186:	f849 1b04 	str.w	r1, [r9], #4
 800c18a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c18e:	d8e2      	bhi.n	800c156 <__multiply+0xb2>
 800c190:	9a01      	ldr	r2, [sp, #4]
 800c192:	f845 c002 	str.w	ip, [r5, r2]
 800c196:	9a03      	ldr	r2, [sp, #12]
 800c198:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c19c:	3304      	adds	r3, #4
 800c19e:	f1b9 0f00 	cmp.w	r9, #0
 800c1a2:	d021      	beq.n	800c1e8 <__multiply+0x144>
 800c1a4:	6829      	ldr	r1, [r5, #0]
 800c1a6:	f104 0c14 	add.w	ip, r4, #20
 800c1aa:	46ae      	mov	lr, r5
 800c1ac:	f04f 0a00 	mov.w	sl, #0
 800c1b0:	f8bc b000 	ldrh.w	fp, [ip]
 800c1b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c1b8:	fb09 220b 	mla	r2, r9, fp, r2
 800c1bc:	4452      	add	r2, sl
 800c1be:	b289      	uxth	r1, r1
 800c1c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1c4:	f84e 1b04 	str.w	r1, [lr], #4
 800c1c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c1cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1d0:	f8be 1000 	ldrh.w	r1, [lr]
 800c1d4:	fb09 110a 	mla	r1, r9, sl, r1
 800c1d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c1dc:	4567      	cmp	r7, ip
 800c1de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1e2:	d8e5      	bhi.n	800c1b0 <__multiply+0x10c>
 800c1e4:	9a01      	ldr	r2, [sp, #4]
 800c1e6:	50a9      	str	r1, [r5, r2]
 800c1e8:	3504      	adds	r5, #4
 800c1ea:	e799      	b.n	800c120 <__multiply+0x7c>
 800c1ec:	3e01      	subs	r6, #1
 800c1ee:	e79b      	b.n	800c128 <__multiply+0x84>
 800c1f0:	0800d31d 	.word	0x0800d31d
 800c1f4:	0800d3ba 	.word	0x0800d3ba

0800c1f8 <__pow5mult>:
 800c1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1fc:	4615      	mov	r5, r2
 800c1fe:	f012 0203 	ands.w	r2, r2, #3
 800c202:	4606      	mov	r6, r0
 800c204:	460f      	mov	r7, r1
 800c206:	d007      	beq.n	800c218 <__pow5mult+0x20>
 800c208:	4c25      	ldr	r4, [pc, #148]	; (800c2a0 <__pow5mult+0xa8>)
 800c20a:	3a01      	subs	r2, #1
 800c20c:	2300      	movs	r3, #0
 800c20e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c212:	f7ff fe53 	bl	800bebc <__multadd>
 800c216:	4607      	mov	r7, r0
 800c218:	10ad      	asrs	r5, r5, #2
 800c21a:	d03d      	beq.n	800c298 <__pow5mult+0xa0>
 800c21c:	69f4      	ldr	r4, [r6, #28]
 800c21e:	b97c      	cbnz	r4, 800c240 <__pow5mult+0x48>
 800c220:	2010      	movs	r0, #16
 800c222:	f7ff faed 	bl	800b800 <malloc>
 800c226:	4602      	mov	r2, r0
 800c228:	61f0      	str	r0, [r6, #28]
 800c22a:	b928      	cbnz	r0, 800c238 <__pow5mult+0x40>
 800c22c:	4b1d      	ldr	r3, [pc, #116]	; (800c2a4 <__pow5mult+0xac>)
 800c22e:	481e      	ldr	r0, [pc, #120]	; (800c2a8 <__pow5mult+0xb0>)
 800c230:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c234:	f000 fba2 	bl	800c97c <__assert_func>
 800c238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c23c:	6004      	str	r4, [r0, #0]
 800c23e:	60c4      	str	r4, [r0, #12]
 800c240:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c244:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c248:	b94c      	cbnz	r4, 800c25e <__pow5mult+0x66>
 800c24a:	f240 2171 	movw	r1, #625	; 0x271
 800c24e:	4630      	mov	r0, r6
 800c250:	f7ff ff12 	bl	800c078 <__i2b>
 800c254:	2300      	movs	r3, #0
 800c256:	f8c8 0008 	str.w	r0, [r8, #8]
 800c25a:	4604      	mov	r4, r0
 800c25c:	6003      	str	r3, [r0, #0]
 800c25e:	f04f 0900 	mov.w	r9, #0
 800c262:	07eb      	lsls	r3, r5, #31
 800c264:	d50a      	bpl.n	800c27c <__pow5mult+0x84>
 800c266:	4639      	mov	r1, r7
 800c268:	4622      	mov	r2, r4
 800c26a:	4630      	mov	r0, r6
 800c26c:	f7ff ff1a 	bl	800c0a4 <__multiply>
 800c270:	4639      	mov	r1, r7
 800c272:	4680      	mov	r8, r0
 800c274:	4630      	mov	r0, r6
 800c276:	f7ff fdff 	bl	800be78 <_Bfree>
 800c27a:	4647      	mov	r7, r8
 800c27c:	106d      	asrs	r5, r5, #1
 800c27e:	d00b      	beq.n	800c298 <__pow5mult+0xa0>
 800c280:	6820      	ldr	r0, [r4, #0]
 800c282:	b938      	cbnz	r0, 800c294 <__pow5mult+0x9c>
 800c284:	4622      	mov	r2, r4
 800c286:	4621      	mov	r1, r4
 800c288:	4630      	mov	r0, r6
 800c28a:	f7ff ff0b 	bl	800c0a4 <__multiply>
 800c28e:	6020      	str	r0, [r4, #0]
 800c290:	f8c0 9000 	str.w	r9, [r0]
 800c294:	4604      	mov	r4, r0
 800c296:	e7e4      	b.n	800c262 <__pow5mult+0x6a>
 800c298:	4638      	mov	r0, r7
 800c29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c29e:	bf00      	nop
 800c2a0:	0800d508 	.word	0x0800d508
 800c2a4:	0800d2ae 	.word	0x0800d2ae
 800c2a8:	0800d3ba 	.word	0x0800d3ba

0800c2ac <__lshift>:
 800c2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	6849      	ldr	r1, [r1, #4]
 800c2b4:	6923      	ldr	r3, [r4, #16]
 800c2b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2ba:	68a3      	ldr	r3, [r4, #8]
 800c2bc:	4607      	mov	r7, r0
 800c2be:	4691      	mov	r9, r2
 800c2c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2c4:	f108 0601 	add.w	r6, r8, #1
 800c2c8:	42b3      	cmp	r3, r6
 800c2ca:	db0b      	blt.n	800c2e4 <__lshift+0x38>
 800c2cc:	4638      	mov	r0, r7
 800c2ce:	f7ff fd93 	bl	800bdf8 <_Balloc>
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	b948      	cbnz	r0, 800c2ea <__lshift+0x3e>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	4b28      	ldr	r3, [pc, #160]	; (800c37c <__lshift+0xd0>)
 800c2da:	4829      	ldr	r0, [pc, #164]	; (800c380 <__lshift+0xd4>)
 800c2dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c2e0:	f000 fb4c 	bl	800c97c <__assert_func>
 800c2e4:	3101      	adds	r1, #1
 800c2e6:	005b      	lsls	r3, r3, #1
 800c2e8:	e7ee      	b.n	800c2c8 <__lshift+0x1c>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f100 0114 	add.w	r1, r0, #20
 800c2f0:	f100 0210 	add.w	r2, r0, #16
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	4553      	cmp	r3, sl
 800c2f8:	db33      	blt.n	800c362 <__lshift+0xb6>
 800c2fa:	6920      	ldr	r0, [r4, #16]
 800c2fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c300:	f104 0314 	add.w	r3, r4, #20
 800c304:	f019 091f 	ands.w	r9, r9, #31
 800c308:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c30c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c310:	d02b      	beq.n	800c36a <__lshift+0xbe>
 800c312:	f1c9 0e20 	rsb	lr, r9, #32
 800c316:	468a      	mov	sl, r1
 800c318:	2200      	movs	r2, #0
 800c31a:	6818      	ldr	r0, [r3, #0]
 800c31c:	fa00 f009 	lsl.w	r0, r0, r9
 800c320:	4310      	orrs	r0, r2
 800c322:	f84a 0b04 	str.w	r0, [sl], #4
 800c326:	f853 2b04 	ldr.w	r2, [r3], #4
 800c32a:	459c      	cmp	ip, r3
 800c32c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c330:	d8f3      	bhi.n	800c31a <__lshift+0x6e>
 800c332:	ebac 0304 	sub.w	r3, ip, r4
 800c336:	3b15      	subs	r3, #21
 800c338:	f023 0303 	bic.w	r3, r3, #3
 800c33c:	3304      	adds	r3, #4
 800c33e:	f104 0015 	add.w	r0, r4, #21
 800c342:	4584      	cmp	ip, r0
 800c344:	bf38      	it	cc
 800c346:	2304      	movcc	r3, #4
 800c348:	50ca      	str	r2, [r1, r3]
 800c34a:	b10a      	cbz	r2, 800c350 <__lshift+0xa4>
 800c34c:	f108 0602 	add.w	r6, r8, #2
 800c350:	3e01      	subs	r6, #1
 800c352:	4638      	mov	r0, r7
 800c354:	612e      	str	r6, [r5, #16]
 800c356:	4621      	mov	r1, r4
 800c358:	f7ff fd8e 	bl	800be78 <_Bfree>
 800c35c:	4628      	mov	r0, r5
 800c35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c362:	f842 0f04 	str.w	r0, [r2, #4]!
 800c366:	3301      	adds	r3, #1
 800c368:	e7c5      	b.n	800c2f6 <__lshift+0x4a>
 800c36a:	3904      	subs	r1, #4
 800c36c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c370:	f841 2f04 	str.w	r2, [r1, #4]!
 800c374:	459c      	cmp	ip, r3
 800c376:	d8f9      	bhi.n	800c36c <__lshift+0xc0>
 800c378:	e7ea      	b.n	800c350 <__lshift+0xa4>
 800c37a:	bf00      	nop
 800c37c:	0800d31d 	.word	0x0800d31d
 800c380:	0800d3ba 	.word	0x0800d3ba

0800c384 <__mcmp>:
 800c384:	b530      	push	{r4, r5, lr}
 800c386:	6902      	ldr	r2, [r0, #16]
 800c388:	690c      	ldr	r4, [r1, #16]
 800c38a:	1b12      	subs	r2, r2, r4
 800c38c:	d10e      	bne.n	800c3ac <__mcmp+0x28>
 800c38e:	f100 0314 	add.w	r3, r0, #20
 800c392:	3114      	adds	r1, #20
 800c394:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c398:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c39c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c3a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c3a4:	42a5      	cmp	r5, r4
 800c3a6:	d003      	beq.n	800c3b0 <__mcmp+0x2c>
 800c3a8:	d305      	bcc.n	800c3b6 <__mcmp+0x32>
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	bd30      	pop	{r4, r5, pc}
 800c3b0:	4283      	cmp	r3, r0
 800c3b2:	d3f3      	bcc.n	800c39c <__mcmp+0x18>
 800c3b4:	e7fa      	b.n	800c3ac <__mcmp+0x28>
 800c3b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3ba:	e7f7      	b.n	800c3ac <__mcmp+0x28>

0800c3bc <__mdiff>:
 800c3bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	4690      	mov	r8, r2
 800c3ca:	f7ff ffdb 	bl	800c384 <__mcmp>
 800c3ce:	1e05      	subs	r5, r0, #0
 800c3d0:	d110      	bne.n	800c3f4 <__mdiff+0x38>
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f7ff fd0f 	bl	800bdf8 <_Balloc>
 800c3da:	b930      	cbnz	r0, 800c3ea <__mdiff+0x2e>
 800c3dc:	4b3a      	ldr	r3, [pc, #232]	; (800c4c8 <__mdiff+0x10c>)
 800c3de:	4602      	mov	r2, r0
 800c3e0:	f240 2137 	movw	r1, #567	; 0x237
 800c3e4:	4839      	ldr	r0, [pc, #228]	; (800c4cc <__mdiff+0x110>)
 800c3e6:	f000 fac9 	bl	800c97c <__assert_func>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f4:	bfa4      	itt	ge
 800c3f6:	4643      	movge	r3, r8
 800c3f8:	46a0      	movge	r8, r4
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c400:	bfa6      	itte	ge
 800c402:	461c      	movge	r4, r3
 800c404:	2500      	movge	r5, #0
 800c406:	2501      	movlt	r5, #1
 800c408:	f7ff fcf6 	bl	800bdf8 <_Balloc>
 800c40c:	b920      	cbnz	r0, 800c418 <__mdiff+0x5c>
 800c40e:	4b2e      	ldr	r3, [pc, #184]	; (800c4c8 <__mdiff+0x10c>)
 800c410:	4602      	mov	r2, r0
 800c412:	f240 2145 	movw	r1, #581	; 0x245
 800c416:	e7e5      	b.n	800c3e4 <__mdiff+0x28>
 800c418:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c41c:	6926      	ldr	r6, [r4, #16]
 800c41e:	60c5      	str	r5, [r0, #12]
 800c420:	f104 0914 	add.w	r9, r4, #20
 800c424:	f108 0514 	add.w	r5, r8, #20
 800c428:	f100 0e14 	add.w	lr, r0, #20
 800c42c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c430:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c434:	f108 0210 	add.w	r2, r8, #16
 800c438:	46f2      	mov	sl, lr
 800c43a:	2100      	movs	r1, #0
 800c43c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c440:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c444:	fa11 f88b 	uxtah	r8, r1, fp
 800c448:	b299      	uxth	r1, r3
 800c44a:	0c1b      	lsrs	r3, r3, #16
 800c44c:	eba8 0801 	sub.w	r8, r8, r1
 800c450:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c454:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c458:	fa1f f888 	uxth.w	r8, r8
 800c45c:	1419      	asrs	r1, r3, #16
 800c45e:	454e      	cmp	r6, r9
 800c460:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c464:	f84a 3b04 	str.w	r3, [sl], #4
 800c468:	d8e8      	bhi.n	800c43c <__mdiff+0x80>
 800c46a:	1b33      	subs	r3, r6, r4
 800c46c:	3b15      	subs	r3, #21
 800c46e:	f023 0303 	bic.w	r3, r3, #3
 800c472:	3304      	adds	r3, #4
 800c474:	3415      	adds	r4, #21
 800c476:	42a6      	cmp	r6, r4
 800c478:	bf38      	it	cc
 800c47a:	2304      	movcc	r3, #4
 800c47c:	441d      	add	r5, r3
 800c47e:	4473      	add	r3, lr
 800c480:	469e      	mov	lr, r3
 800c482:	462e      	mov	r6, r5
 800c484:	4566      	cmp	r6, ip
 800c486:	d30e      	bcc.n	800c4a6 <__mdiff+0xea>
 800c488:	f10c 0203 	add.w	r2, ip, #3
 800c48c:	1b52      	subs	r2, r2, r5
 800c48e:	f022 0203 	bic.w	r2, r2, #3
 800c492:	3d03      	subs	r5, #3
 800c494:	45ac      	cmp	ip, r5
 800c496:	bf38      	it	cc
 800c498:	2200      	movcc	r2, #0
 800c49a:	4413      	add	r3, r2
 800c49c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c4a0:	b17a      	cbz	r2, 800c4c2 <__mdiff+0x106>
 800c4a2:	6107      	str	r7, [r0, #16]
 800c4a4:	e7a4      	b.n	800c3f0 <__mdiff+0x34>
 800c4a6:	f856 8b04 	ldr.w	r8, [r6], #4
 800c4aa:	fa11 f288 	uxtah	r2, r1, r8
 800c4ae:	1414      	asrs	r4, r2, #16
 800c4b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c4b4:	b292      	uxth	r2, r2
 800c4b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c4ba:	f84e 2b04 	str.w	r2, [lr], #4
 800c4be:	1421      	asrs	r1, r4, #16
 800c4c0:	e7e0      	b.n	800c484 <__mdiff+0xc8>
 800c4c2:	3f01      	subs	r7, #1
 800c4c4:	e7ea      	b.n	800c49c <__mdiff+0xe0>
 800c4c6:	bf00      	nop
 800c4c8:	0800d31d 	.word	0x0800d31d
 800c4cc:	0800d3ba 	.word	0x0800d3ba

0800c4d0 <__ulp>:
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	ed8d 0b00 	vstr	d0, [sp]
 800c4d6:	9a01      	ldr	r2, [sp, #4]
 800c4d8:	4b0f      	ldr	r3, [pc, #60]	; (800c518 <__ulp+0x48>)
 800c4da:	4013      	ands	r3, r2
 800c4dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	dc08      	bgt.n	800c4f6 <__ulp+0x26>
 800c4e4:	425b      	negs	r3, r3
 800c4e6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c4ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c4ee:	da04      	bge.n	800c4fa <__ulp+0x2a>
 800c4f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4f4:	4113      	asrs	r3, r2
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	e008      	b.n	800c50c <__ulp+0x3c>
 800c4fa:	f1a2 0314 	sub.w	r3, r2, #20
 800c4fe:	2b1e      	cmp	r3, #30
 800c500:	bfda      	itte	le
 800c502:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c506:	40da      	lsrle	r2, r3
 800c508:	2201      	movgt	r2, #1
 800c50a:	2300      	movs	r3, #0
 800c50c:	4619      	mov	r1, r3
 800c50e:	4610      	mov	r0, r2
 800c510:	ec41 0b10 	vmov	d0, r0, r1
 800c514:	b002      	add	sp, #8
 800c516:	4770      	bx	lr
 800c518:	7ff00000 	.word	0x7ff00000

0800c51c <__b2d>:
 800c51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c520:	6906      	ldr	r6, [r0, #16]
 800c522:	f100 0814 	add.w	r8, r0, #20
 800c526:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c52a:	1f37      	subs	r7, r6, #4
 800c52c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c530:	4610      	mov	r0, r2
 800c532:	f7ff fd53 	bl	800bfdc <__hi0bits>
 800c536:	f1c0 0320 	rsb	r3, r0, #32
 800c53a:	280a      	cmp	r0, #10
 800c53c:	600b      	str	r3, [r1, #0]
 800c53e:	491b      	ldr	r1, [pc, #108]	; (800c5ac <__b2d+0x90>)
 800c540:	dc15      	bgt.n	800c56e <__b2d+0x52>
 800c542:	f1c0 0c0b 	rsb	ip, r0, #11
 800c546:	fa22 f30c 	lsr.w	r3, r2, ip
 800c54a:	45b8      	cmp	r8, r7
 800c54c:	ea43 0501 	orr.w	r5, r3, r1
 800c550:	bf34      	ite	cc
 800c552:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c556:	2300      	movcs	r3, #0
 800c558:	3015      	adds	r0, #21
 800c55a:	fa02 f000 	lsl.w	r0, r2, r0
 800c55e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c562:	4303      	orrs	r3, r0
 800c564:	461c      	mov	r4, r3
 800c566:	ec45 4b10 	vmov	d0, r4, r5
 800c56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c56e:	45b8      	cmp	r8, r7
 800c570:	bf3a      	itte	cc
 800c572:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c576:	f1a6 0708 	subcc.w	r7, r6, #8
 800c57a:	2300      	movcs	r3, #0
 800c57c:	380b      	subs	r0, #11
 800c57e:	d012      	beq.n	800c5a6 <__b2d+0x8a>
 800c580:	f1c0 0120 	rsb	r1, r0, #32
 800c584:	fa23 f401 	lsr.w	r4, r3, r1
 800c588:	4082      	lsls	r2, r0
 800c58a:	4322      	orrs	r2, r4
 800c58c:	4547      	cmp	r7, r8
 800c58e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c592:	bf8c      	ite	hi
 800c594:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c598:	2200      	movls	r2, #0
 800c59a:	4083      	lsls	r3, r0
 800c59c:	40ca      	lsrs	r2, r1
 800c59e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	e7de      	b.n	800c564 <__b2d+0x48>
 800c5a6:	ea42 0501 	orr.w	r5, r2, r1
 800c5aa:	e7db      	b.n	800c564 <__b2d+0x48>
 800c5ac:	3ff00000 	.word	0x3ff00000

0800c5b0 <__d2b>:
 800c5b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5b4:	460f      	mov	r7, r1
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	ec59 8b10 	vmov	r8, r9, d0
 800c5bc:	4616      	mov	r6, r2
 800c5be:	f7ff fc1b 	bl	800bdf8 <_Balloc>
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	b930      	cbnz	r0, 800c5d4 <__d2b+0x24>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	4b24      	ldr	r3, [pc, #144]	; (800c65c <__d2b+0xac>)
 800c5ca:	4825      	ldr	r0, [pc, #148]	; (800c660 <__d2b+0xb0>)
 800c5cc:	f240 310f 	movw	r1, #783	; 0x30f
 800c5d0:	f000 f9d4 	bl	800c97c <__assert_func>
 800c5d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c5d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5dc:	bb2d      	cbnz	r5, 800c62a <__d2b+0x7a>
 800c5de:	9301      	str	r3, [sp, #4]
 800c5e0:	f1b8 0300 	subs.w	r3, r8, #0
 800c5e4:	d026      	beq.n	800c634 <__d2b+0x84>
 800c5e6:	4668      	mov	r0, sp
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	f7ff fd17 	bl	800c01c <__lo0bits>
 800c5ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5f2:	b1e8      	cbz	r0, 800c630 <__d2b+0x80>
 800c5f4:	f1c0 0320 	rsb	r3, r0, #32
 800c5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	40c2      	lsrs	r2, r0
 800c600:	6163      	str	r3, [r4, #20]
 800c602:	9201      	str	r2, [sp, #4]
 800c604:	9b01      	ldr	r3, [sp, #4]
 800c606:	61a3      	str	r3, [r4, #24]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bf14      	ite	ne
 800c60c:	2202      	movne	r2, #2
 800c60e:	2201      	moveq	r2, #1
 800c610:	6122      	str	r2, [r4, #16]
 800c612:	b1bd      	cbz	r5, 800c644 <__d2b+0x94>
 800c614:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c618:	4405      	add	r5, r0
 800c61a:	603d      	str	r5, [r7, #0]
 800c61c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c620:	6030      	str	r0, [r6, #0]
 800c622:	4620      	mov	r0, r4
 800c624:	b003      	add	sp, #12
 800c626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c62a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c62e:	e7d6      	b.n	800c5de <__d2b+0x2e>
 800c630:	6161      	str	r1, [r4, #20]
 800c632:	e7e7      	b.n	800c604 <__d2b+0x54>
 800c634:	a801      	add	r0, sp, #4
 800c636:	f7ff fcf1 	bl	800c01c <__lo0bits>
 800c63a:	9b01      	ldr	r3, [sp, #4]
 800c63c:	6163      	str	r3, [r4, #20]
 800c63e:	3020      	adds	r0, #32
 800c640:	2201      	movs	r2, #1
 800c642:	e7e5      	b.n	800c610 <__d2b+0x60>
 800c644:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c648:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c64c:	6038      	str	r0, [r7, #0]
 800c64e:	6918      	ldr	r0, [r3, #16]
 800c650:	f7ff fcc4 	bl	800bfdc <__hi0bits>
 800c654:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c658:	e7e2      	b.n	800c620 <__d2b+0x70>
 800c65a:	bf00      	nop
 800c65c:	0800d31d 	.word	0x0800d31d
 800c660:	0800d3ba 	.word	0x0800d3ba

0800c664 <__ratio>:
 800c664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c668:	4688      	mov	r8, r1
 800c66a:	4669      	mov	r1, sp
 800c66c:	4681      	mov	r9, r0
 800c66e:	f7ff ff55 	bl	800c51c <__b2d>
 800c672:	a901      	add	r1, sp, #4
 800c674:	4640      	mov	r0, r8
 800c676:	ec55 4b10 	vmov	r4, r5, d0
 800c67a:	f7ff ff4f 	bl	800c51c <__b2d>
 800c67e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c682:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c686:	eba3 0c02 	sub.w	ip, r3, r2
 800c68a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c68e:	1a9b      	subs	r3, r3, r2
 800c690:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c694:	ec51 0b10 	vmov	r0, r1, d0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	bfd6      	itet	le
 800c69c:	460a      	movle	r2, r1
 800c69e:	462a      	movgt	r2, r5
 800c6a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c6a4:	468b      	mov	fp, r1
 800c6a6:	462f      	mov	r7, r5
 800c6a8:	bfd4      	ite	le
 800c6aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c6ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	ee10 2a10 	vmov	r2, s0
 800c6b8:	465b      	mov	r3, fp
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	f7f4 f8c6 	bl	800084c <__aeabi_ddiv>
 800c6c0:	ec41 0b10 	vmov	d0, r0, r1
 800c6c4:	b003      	add	sp, #12
 800c6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6ca <__copybits>:
 800c6ca:	3901      	subs	r1, #1
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	1149      	asrs	r1, r1, #5
 800c6d0:	6914      	ldr	r4, [r2, #16]
 800c6d2:	3101      	adds	r1, #1
 800c6d4:	f102 0314 	add.w	r3, r2, #20
 800c6d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c6dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c6e0:	1f05      	subs	r5, r0, #4
 800c6e2:	42a3      	cmp	r3, r4
 800c6e4:	d30c      	bcc.n	800c700 <__copybits+0x36>
 800c6e6:	1aa3      	subs	r3, r4, r2
 800c6e8:	3b11      	subs	r3, #17
 800c6ea:	f023 0303 	bic.w	r3, r3, #3
 800c6ee:	3211      	adds	r2, #17
 800c6f0:	42a2      	cmp	r2, r4
 800c6f2:	bf88      	it	hi
 800c6f4:	2300      	movhi	r3, #0
 800c6f6:	4418      	add	r0, r3
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	4288      	cmp	r0, r1
 800c6fc:	d305      	bcc.n	800c70a <__copybits+0x40>
 800c6fe:	bd70      	pop	{r4, r5, r6, pc}
 800c700:	f853 6b04 	ldr.w	r6, [r3], #4
 800c704:	f845 6f04 	str.w	r6, [r5, #4]!
 800c708:	e7eb      	b.n	800c6e2 <__copybits+0x18>
 800c70a:	f840 3b04 	str.w	r3, [r0], #4
 800c70e:	e7f4      	b.n	800c6fa <__copybits+0x30>

0800c710 <__any_on>:
 800c710:	f100 0214 	add.w	r2, r0, #20
 800c714:	6900      	ldr	r0, [r0, #16]
 800c716:	114b      	asrs	r3, r1, #5
 800c718:	4298      	cmp	r0, r3
 800c71a:	b510      	push	{r4, lr}
 800c71c:	db11      	blt.n	800c742 <__any_on+0x32>
 800c71e:	dd0a      	ble.n	800c736 <__any_on+0x26>
 800c720:	f011 011f 	ands.w	r1, r1, #31
 800c724:	d007      	beq.n	800c736 <__any_on+0x26>
 800c726:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c72a:	fa24 f001 	lsr.w	r0, r4, r1
 800c72e:	fa00 f101 	lsl.w	r1, r0, r1
 800c732:	428c      	cmp	r4, r1
 800c734:	d10b      	bne.n	800c74e <__any_on+0x3e>
 800c736:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d803      	bhi.n	800c746 <__any_on+0x36>
 800c73e:	2000      	movs	r0, #0
 800c740:	bd10      	pop	{r4, pc}
 800c742:	4603      	mov	r3, r0
 800c744:	e7f7      	b.n	800c736 <__any_on+0x26>
 800c746:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c74a:	2900      	cmp	r1, #0
 800c74c:	d0f5      	beq.n	800c73a <__any_on+0x2a>
 800c74e:	2001      	movs	r0, #1
 800c750:	e7f6      	b.n	800c740 <__any_on+0x30>

0800c752 <__submore>:
 800c752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c756:	460c      	mov	r4, r1
 800c758:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c75a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c75e:	4299      	cmp	r1, r3
 800c760:	d11d      	bne.n	800c79e <__submore+0x4c>
 800c762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c766:	f7ff f873 	bl	800b850 <_malloc_r>
 800c76a:	b918      	cbnz	r0, 800c774 <__submore+0x22>
 800c76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c778:	63a3      	str	r3, [r4, #56]	; 0x38
 800c77a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c77e:	6360      	str	r0, [r4, #52]	; 0x34
 800c780:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c784:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c788:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c78c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c790:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c794:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c798:	6020      	str	r0, [r4, #0]
 800c79a:	2000      	movs	r0, #0
 800c79c:	e7e8      	b.n	800c770 <__submore+0x1e>
 800c79e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c7a0:	0077      	lsls	r7, r6, #1
 800c7a2:	463a      	mov	r2, r7
 800c7a4:	f000 f80f 	bl	800c7c6 <_realloc_r>
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d0de      	beq.n	800c76c <__submore+0x1a>
 800c7ae:	eb00 0806 	add.w	r8, r0, r6
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	4632      	mov	r2, r6
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	f7fd fab1 	bl	8009d1e <memcpy>
 800c7bc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c7c0:	f8c4 8000 	str.w	r8, [r4]
 800c7c4:	e7e9      	b.n	800c79a <__submore+0x48>

0800c7c6 <_realloc_r>:
 800c7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ca:	4680      	mov	r8, r0
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	460e      	mov	r6, r1
 800c7d0:	b921      	cbnz	r1, 800c7dc <_realloc_r+0x16>
 800c7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	f7ff b83a 	b.w	800b850 <_malloc_r>
 800c7dc:	b92a      	cbnz	r2, 800c7ea <_realloc_r+0x24>
 800c7de:	f7fe f941 	bl	800aa64 <_free_r>
 800c7e2:	4625      	mov	r5, r4
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ea:	f000 f8fb 	bl	800c9e4 <_malloc_usable_size_r>
 800c7ee:	4284      	cmp	r4, r0
 800c7f0:	4607      	mov	r7, r0
 800c7f2:	d802      	bhi.n	800c7fa <_realloc_r+0x34>
 800c7f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7f8:	d812      	bhi.n	800c820 <_realloc_r+0x5a>
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	4640      	mov	r0, r8
 800c7fe:	f7ff f827 	bl	800b850 <_malloc_r>
 800c802:	4605      	mov	r5, r0
 800c804:	2800      	cmp	r0, #0
 800c806:	d0ed      	beq.n	800c7e4 <_realloc_r+0x1e>
 800c808:	42bc      	cmp	r4, r7
 800c80a:	4622      	mov	r2, r4
 800c80c:	4631      	mov	r1, r6
 800c80e:	bf28      	it	cs
 800c810:	463a      	movcs	r2, r7
 800c812:	f7fd fa84 	bl	8009d1e <memcpy>
 800c816:	4631      	mov	r1, r6
 800c818:	4640      	mov	r0, r8
 800c81a:	f7fe f923 	bl	800aa64 <_free_r>
 800c81e:	e7e1      	b.n	800c7e4 <_realloc_r+0x1e>
 800c820:	4635      	mov	r5, r6
 800c822:	e7df      	b.n	800c7e4 <_realloc_r+0x1e>

0800c824 <_strtoul_l.constprop.0>:
 800c824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c828:	4f36      	ldr	r7, [pc, #216]	; (800c904 <_strtoul_l.constprop.0+0xe0>)
 800c82a:	4686      	mov	lr, r0
 800c82c:	460d      	mov	r5, r1
 800c82e:	4628      	mov	r0, r5
 800c830:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c834:	5d3e      	ldrb	r6, [r7, r4]
 800c836:	f016 0608 	ands.w	r6, r6, #8
 800c83a:	d1f8      	bne.n	800c82e <_strtoul_l.constprop.0+0xa>
 800c83c:	2c2d      	cmp	r4, #45	; 0x2d
 800c83e:	d130      	bne.n	800c8a2 <_strtoul_l.constprop.0+0x7e>
 800c840:	782c      	ldrb	r4, [r5, #0]
 800c842:	2601      	movs	r6, #1
 800c844:	1c85      	adds	r5, r0, #2
 800c846:	2b00      	cmp	r3, #0
 800c848:	d057      	beq.n	800c8fa <_strtoul_l.constprop.0+0xd6>
 800c84a:	2b10      	cmp	r3, #16
 800c84c:	d109      	bne.n	800c862 <_strtoul_l.constprop.0+0x3e>
 800c84e:	2c30      	cmp	r4, #48	; 0x30
 800c850:	d107      	bne.n	800c862 <_strtoul_l.constprop.0+0x3e>
 800c852:	7828      	ldrb	r0, [r5, #0]
 800c854:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c858:	2858      	cmp	r0, #88	; 0x58
 800c85a:	d149      	bne.n	800c8f0 <_strtoul_l.constprop.0+0xcc>
 800c85c:	786c      	ldrb	r4, [r5, #1]
 800c85e:	2310      	movs	r3, #16
 800c860:	3502      	adds	r5, #2
 800c862:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c866:	2700      	movs	r7, #0
 800c868:	fbb8 f8f3 	udiv	r8, r8, r3
 800c86c:	fb03 f908 	mul.w	r9, r3, r8
 800c870:	ea6f 0909 	mvn.w	r9, r9
 800c874:	4638      	mov	r0, r7
 800c876:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c87a:	f1bc 0f09 	cmp.w	ip, #9
 800c87e:	d815      	bhi.n	800c8ac <_strtoul_l.constprop.0+0x88>
 800c880:	4664      	mov	r4, ip
 800c882:	42a3      	cmp	r3, r4
 800c884:	dd23      	ble.n	800c8ce <_strtoul_l.constprop.0+0xaa>
 800c886:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800c88a:	d007      	beq.n	800c89c <_strtoul_l.constprop.0+0x78>
 800c88c:	4580      	cmp	r8, r0
 800c88e:	d31b      	bcc.n	800c8c8 <_strtoul_l.constprop.0+0xa4>
 800c890:	d101      	bne.n	800c896 <_strtoul_l.constprop.0+0x72>
 800c892:	45a1      	cmp	r9, r4
 800c894:	db18      	blt.n	800c8c8 <_strtoul_l.constprop.0+0xa4>
 800c896:	fb00 4003 	mla	r0, r0, r3, r4
 800c89a:	2701      	movs	r7, #1
 800c89c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8a0:	e7e9      	b.n	800c876 <_strtoul_l.constprop.0+0x52>
 800c8a2:	2c2b      	cmp	r4, #43	; 0x2b
 800c8a4:	bf04      	itt	eq
 800c8a6:	782c      	ldrbeq	r4, [r5, #0]
 800c8a8:	1c85      	addeq	r5, r0, #2
 800c8aa:	e7cc      	b.n	800c846 <_strtoul_l.constprop.0+0x22>
 800c8ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c8b0:	f1bc 0f19 	cmp.w	ip, #25
 800c8b4:	d801      	bhi.n	800c8ba <_strtoul_l.constprop.0+0x96>
 800c8b6:	3c37      	subs	r4, #55	; 0x37
 800c8b8:	e7e3      	b.n	800c882 <_strtoul_l.constprop.0+0x5e>
 800c8ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c8be:	f1bc 0f19 	cmp.w	ip, #25
 800c8c2:	d804      	bhi.n	800c8ce <_strtoul_l.constprop.0+0xaa>
 800c8c4:	3c57      	subs	r4, #87	; 0x57
 800c8c6:	e7dc      	b.n	800c882 <_strtoul_l.constprop.0+0x5e>
 800c8c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c8cc:	e7e6      	b.n	800c89c <_strtoul_l.constprop.0+0x78>
 800c8ce:	1c7b      	adds	r3, r7, #1
 800c8d0:	d106      	bne.n	800c8e0 <_strtoul_l.constprop.0+0xbc>
 800c8d2:	2322      	movs	r3, #34	; 0x22
 800c8d4:	f8ce 3000 	str.w	r3, [lr]
 800c8d8:	4638      	mov	r0, r7
 800c8da:	b932      	cbnz	r2, 800c8ea <_strtoul_l.constprop.0+0xc6>
 800c8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8e0:	b106      	cbz	r6, 800c8e4 <_strtoul_l.constprop.0+0xc0>
 800c8e2:	4240      	negs	r0, r0
 800c8e4:	2a00      	cmp	r2, #0
 800c8e6:	d0f9      	beq.n	800c8dc <_strtoul_l.constprop.0+0xb8>
 800c8e8:	b107      	cbz	r7, 800c8ec <_strtoul_l.constprop.0+0xc8>
 800c8ea:	1e69      	subs	r1, r5, #1
 800c8ec:	6011      	str	r1, [r2, #0]
 800c8ee:	e7f5      	b.n	800c8dc <_strtoul_l.constprop.0+0xb8>
 800c8f0:	2430      	movs	r4, #48	; 0x30
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1b5      	bne.n	800c862 <_strtoul_l.constprop.0+0x3e>
 800c8f6:	2308      	movs	r3, #8
 800c8f8:	e7b3      	b.n	800c862 <_strtoul_l.constprop.0+0x3e>
 800c8fa:	2c30      	cmp	r4, #48	; 0x30
 800c8fc:	d0a9      	beq.n	800c852 <_strtoul_l.constprop.0+0x2e>
 800c8fe:	230a      	movs	r3, #10
 800c900:	e7af      	b.n	800c862 <_strtoul_l.constprop.0+0x3e>
 800c902:	bf00      	nop
 800c904:	0800d1a1 	.word	0x0800d1a1

0800c908 <_strtoul_r>:
 800c908:	f7ff bf8c 	b.w	800c824 <_strtoul_l.constprop.0>

0800c90c <__ascii_wctomb>:
 800c90c:	b149      	cbz	r1, 800c922 <__ascii_wctomb+0x16>
 800c90e:	2aff      	cmp	r2, #255	; 0xff
 800c910:	bf85      	ittet	hi
 800c912:	238a      	movhi	r3, #138	; 0x8a
 800c914:	6003      	strhi	r3, [r0, #0]
 800c916:	700a      	strbls	r2, [r1, #0]
 800c918:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c91c:	bf98      	it	ls
 800c91e:	2001      	movls	r0, #1
 800c920:	4770      	bx	lr
 800c922:	4608      	mov	r0, r1
 800c924:	4770      	bx	lr

0800c926 <memmove>:
 800c926:	4288      	cmp	r0, r1
 800c928:	b510      	push	{r4, lr}
 800c92a:	eb01 0402 	add.w	r4, r1, r2
 800c92e:	d902      	bls.n	800c936 <memmove+0x10>
 800c930:	4284      	cmp	r4, r0
 800c932:	4623      	mov	r3, r4
 800c934:	d807      	bhi.n	800c946 <memmove+0x20>
 800c936:	1e43      	subs	r3, r0, #1
 800c938:	42a1      	cmp	r1, r4
 800c93a:	d008      	beq.n	800c94e <memmove+0x28>
 800c93c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c940:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c944:	e7f8      	b.n	800c938 <memmove+0x12>
 800c946:	4402      	add	r2, r0
 800c948:	4601      	mov	r1, r0
 800c94a:	428a      	cmp	r2, r1
 800c94c:	d100      	bne.n	800c950 <memmove+0x2a>
 800c94e:	bd10      	pop	{r4, pc}
 800c950:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c954:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c958:	e7f7      	b.n	800c94a <memmove+0x24>
	...

0800c95c <_sbrk_r>:
 800c95c:	b538      	push	{r3, r4, r5, lr}
 800c95e:	4d06      	ldr	r5, [pc, #24]	; (800c978 <_sbrk_r+0x1c>)
 800c960:	2300      	movs	r3, #0
 800c962:	4604      	mov	r4, r0
 800c964:	4608      	mov	r0, r1
 800c966:	602b      	str	r3, [r5, #0]
 800c968:	f7f5 ff32 	bl	80027d0 <_sbrk>
 800c96c:	1c43      	adds	r3, r0, #1
 800c96e:	d102      	bne.n	800c976 <_sbrk_r+0x1a>
 800c970:	682b      	ldr	r3, [r5, #0]
 800c972:	b103      	cbz	r3, 800c976 <_sbrk_r+0x1a>
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	20007918 	.word	0x20007918

0800c97c <__assert_func>:
 800c97c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c97e:	4614      	mov	r4, r2
 800c980:	461a      	mov	r2, r3
 800c982:	4b09      	ldr	r3, [pc, #36]	; (800c9a8 <__assert_func+0x2c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4605      	mov	r5, r0
 800c988:	68d8      	ldr	r0, [r3, #12]
 800c98a:	b14c      	cbz	r4, 800c9a0 <__assert_func+0x24>
 800c98c:	4b07      	ldr	r3, [pc, #28]	; (800c9ac <__assert_func+0x30>)
 800c98e:	9100      	str	r1, [sp, #0]
 800c990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c994:	4906      	ldr	r1, [pc, #24]	; (800c9b0 <__assert_func+0x34>)
 800c996:	462b      	mov	r3, r5
 800c998:	f000 f82c 	bl	800c9f4 <fiprintf>
 800c99c:	f000 f83c 	bl	800ca18 <abort>
 800c9a0:	4b04      	ldr	r3, [pc, #16]	; (800c9b4 <__assert_func+0x38>)
 800c9a2:	461c      	mov	r4, r3
 800c9a4:	e7f3      	b.n	800c98e <__assert_func+0x12>
 800c9a6:	bf00      	nop
 800c9a8:	200001d4 	.word	0x200001d4
 800c9ac:	0800d514 	.word	0x0800d514
 800c9b0:	0800d521 	.word	0x0800d521
 800c9b4:	0800d54f 	.word	0x0800d54f

0800c9b8 <_calloc_r>:
 800c9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ba:	fba1 2402 	umull	r2, r4, r1, r2
 800c9be:	b94c      	cbnz	r4, 800c9d4 <_calloc_r+0x1c>
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	9201      	str	r2, [sp, #4]
 800c9c4:	f7fe ff44 	bl	800b850 <_malloc_r>
 800c9c8:	9a01      	ldr	r2, [sp, #4]
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	b930      	cbnz	r0, 800c9dc <_calloc_r+0x24>
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	b003      	add	sp, #12
 800c9d2:	bd30      	pop	{r4, r5, pc}
 800c9d4:	220c      	movs	r2, #12
 800c9d6:	6002      	str	r2, [r0, #0]
 800c9d8:	2500      	movs	r5, #0
 800c9da:	e7f8      	b.n	800c9ce <_calloc_r+0x16>
 800c9dc:	4621      	mov	r1, r4
 800c9de:	f7fd f91f 	bl	8009c20 <memset>
 800c9e2:	e7f4      	b.n	800c9ce <_calloc_r+0x16>

0800c9e4 <_malloc_usable_size_r>:
 800c9e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9e8:	1f18      	subs	r0, r3, #4
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	bfbc      	itt	lt
 800c9ee:	580b      	ldrlt	r3, [r1, r0]
 800c9f0:	18c0      	addlt	r0, r0, r3
 800c9f2:	4770      	bx	lr

0800c9f4 <fiprintf>:
 800c9f4:	b40e      	push	{r1, r2, r3}
 800c9f6:	b503      	push	{r0, r1, lr}
 800c9f8:	4601      	mov	r1, r0
 800c9fa:	ab03      	add	r3, sp, #12
 800c9fc:	4805      	ldr	r0, [pc, #20]	; (800ca14 <fiprintf+0x20>)
 800c9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca02:	6800      	ldr	r0, [r0, #0]
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	f000 f837 	bl	800ca78 <_vfiprintf_r>
 800ca0a:	b002      	add	sp, #8
 800ca0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca10:	b003      	add	sp, #12
 800ca12:	4770      	bx	lr
 800ca14:	200001d4 	.word	0x200001d4

0800ca18 <abort>:
 800ca18:	b508      	push	{r3, lr}
 800ca1a:	2006      	movs	r0, #6
 800ca1c:	f000 fa88 	bl	800cf30 <raise>
 800ca20:	2001      	movs	r0, #1
 800ca22:	f7f5 fe5d 	bl	80026e0 <_exit>

0800ca26 <__sfputc_r>:
 800ca26:	6893      	ldr	r3, [r2, #8]
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	b410      	push	{r4}
 800ca2e:	6093      	str	r3, [r2, #8]
 800ca30:	da08      	bge.n	800ca44 <__sfputc_r+0x1e>
 800ca32:	6994      	ldr	r4, [r2, #24]
 800ca34:	42a3      	cmp	r3, r4
 800ca36:	db01      	blt.n	800ca3c <__sfputc_r+0x16>
 800ca38:	290a      	cmp	r1, #10
 800ca3a:	d103      	bne.n	800ca44 <__sfputc_r+0x1e>
 800ca3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca40:	f000 b934 	b.w	800ccac <__swbuf_r>
 800ca44:	6813      	ldr	r3, [r2, #0]
 800ca46:	1c58      	adds	r0, r3, #1
 800ca48:	6010      	str	r0, [r2, #0]
 800ca4a:	7019      	strb	r1, [r3, #0]
 800ca4c:	4608      	mov	r0, r1
 800ca4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <__sfputs_r>:
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	4606      	mov	r6, r0
 800ca58:	460f      	mov	r7, r1
 800ca5a:	4614      	mov	r4, r2
 800ca5c:	18d5      	adds	r5, r2, r3
 800ca5e:	42ac      	cmp	r4, r5
 800ca60:	d101      	bne.n	800ca66 <__sfputs_r+0x12>
 800ca62:	2000      	movs	r0, #0
 800ca64:	e007      	b.n	800ca76 <__sfputs_r+0x22>
 800ca66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6a:	463a      	mov	r2, r7
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	f7ff ffda 	bl	800ca26 <__sfputc_r>
 800ca72:	1c43      	adds	r3, r0, #1
 800ca74:	d1f3      	bne.n	800ca5e <__sfputs_r+0xa>
 800ca76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca78 <_vfiprintf_r>:
 800ca78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7c:	460d      	mov	r5, r1
 800ca7e:	b09d      	sub	sp, #116	; 0x74
 800ca80:	4614      	mov	r4, r2
 800ca82:	4698      	mov	r8, r3
 800ca84:	4606      	mov	r6, r0
 800ca86:	b118      	cbz	r0, 800ca90 <_vfiprintf_r+0x18>
 800ca88:	6a03      	ldr	r3, [r0, #32]
 800ca8a:	b90b      	cbnz	r3, 800ca90 <_vfiprintf_r+0x18>
 800ca8c:	f7fc f9d2 	bl	8008e34 <__sinit>
 800ca90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca92:	07d9      	lsls	r1, r3, #31
 800ca94:	d405      	bmi.n	800caa2 <_vfiprintf_r+0x2a>
 800ca96:	89ab      	ldrh	r3, [r5, #12]
 800ca98:	059a      	lsls	r2, r3, #22
 800ca9a:	d402      	bmi.n	800caa2 <_vfiprintf_r+0x2a>
 800ca9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca9e:	f7fd f93c 	bl	8009d1a <__retarget_lock_acquire_recursive>
 800caa2:	89ab      	ldrh	r3, [r5, #12]
 800caa4:	071b      	lsls	r3, r3, #28
 800caa6:	d501      	bpl.n	800caac <_vfiprintf_r+0x34>
 800caa8:	692b      	ldr	r3, [r5, #16]
 800caaa:	b99b      	cbnz	r3, 800cad4 <_vfiprintf_r+0x5c>
 800caac:	4629      	mov	r1, r5
 800caae:	4630      	mov	r0, r6
 800cab0:	f000 f93a 	bl	800cd28 <__swsetup_r>
 800cab4:	b170      	cbz	r0, 800cad4 <_vfiprintf_r+0x5c>
 800cab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cab8:	07dc      	lsls	r4, r3, #31
 800caba:	d504      	bpl.n	800cac6 <_vfiprintf_r+0x4e>
 800cabc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cac0:	b01d      	add	sp, #116	; 0x74
 800cac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac6:	89ab      	ldrh	r3, [r5, #12]
 800cac8:	0598      	lsls	r0, r3, #22
 800caca:	d4f7      	bmi.n	800cabc <_vfiprintf_r+0x44>
 800cacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cace:	f7fd f925 	bl	8009d1c <__retarget_lock_release_recursive>
 800cad2:	e7f3      	b.n	800cabc <_vfiprintf_r+0x44>
 800cad4:	2300      	movs	r3, #0
 800cad6:	9309      	str	r3, [sp, #36]	; 0x24
 800cad8:	2320      	movs	r3, #32
 800cada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cade:	f8cd 800c 	str.w	r8, [sp, #12]
 800cae2:	2330      	movs	r3, #48	; 0x30
 800cae4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cc98 <_vfiprintf_r+0x220>
 800cae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caec:	f04f 0901 	mov.w	r9, #1
 800caf0:	4623      	mov	r3, r4
 800caf2:	469a      	mov	sl, r3
 800caf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf8:	b10a      	cbz	r2, 800cafe <_vfiprintf_r+0x86>
 800cafa:	2a25      	cmp	r2, #37	; 0x25
 800cafc:	d1f9      	bne.n	800caf2 <_vfiprintf_r+0x7a>
 800cafe:	ebba 0b04 	subs.w	fp, sl, r4
 800cb02:	d00b      	beq.n	800cb1c <_vfiprintf_r+0xa4>
 800cb04:	465b      	mov	r3, fp
 800cb06:	4622      	mov	r2, r4
 800cb08:	4629      	mov	r1, r5
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7ff ffa2 	bl	800ca54 <__sfputs_r>
 800cb10:	3001      	adds	r0, #1
 800cb12:	f000 80a9 	beq.w	800cc68 <_vfiprintf_r+0x1f0>
 800cb16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb18:	445a      	add	r2, fp
 800cb1a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 80a1 	beq.w	800cc68 <_vfiprintf_r+0x1f0>
 800cb26:	2300      	movs	r3, #0
 800cb28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb30:	f10a 0a01 	add.w	sl, sl, #1
 800cb34:	9304      	str	r3, [sp, #16]
 800cb36:	9307      	str	r3, [sp, #28]
 800cb38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb3c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb3e:	4654      	mov	r4, sl
 800cb40:	2205      	movs	r2, #5
 800cb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb46:	4854      	ldr	r0, [pc, #336]	; (800cc98 <_vfiprintf_r+0x220>)
 800cb48:	f7f3 fb42 	bl	80001d0 <memchr>
 800cb4c:	9a04      	ldr	r2, [sp, #16]
 800cb4e:	b9d8      	cbnz	r0, 800cb88 <_vfiprintf_r+0x110>
 800cb50:	06d1      	lsls	r1, r2, #27
 800cb52:	bf44      	itt	mi
 800cb54:	2320      	movmi	r3, #32
 800cb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb5a:	0713      	lsls	r3, r2, #28
 800cb5c:	bf44      	itt	mi
 800cb5e:	232b      	movmi	r3, #43	; 0x2b
 800cb60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb64:	f89a 3000 	ldrb.w	r3, [sl]
 800cb68:	2b2a      	cmp	r3, #42	; 0x2a
 800cb6a:	d015      	beq.n	800cb98 <_vfiprintf_r+0x120>
 800cb6c:	9a07      	ldr	r2, [sp, #28]
 800cb6e:	4654      	mov	r4, sl
 800cb70:	2000      	movs	r0, #0
 800cb72:	f04f 0c0a 	mov.w	ip, #10
 800cb76:	4621      	mov	r1, r4
 800cb78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb7c:	3b30      	subs	r3, #48	; 0x30
 800cb7e:	2b09      	cmp	r3, #9
 800cb80:	d94d      	bls.n	800cc1e <_vfiprintf_r+0x1a6>
 800cb82:	b1b0      	cbz	r0, 800cbb2 <_vfiprintf_r+0x13a>
 800cb84:	9207      	str	r2, [sp, #28]
 800cb86:	e014      	b.n	800cbb2 <_vfiprintf_r+0x13a>
 800cb88:	eba0 0308 	sub.w	r3, r0, r8
 800cb8c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb90:	4313      	orrs	r3, r2
 800cb92:	9304      	str	r3, [sp, #16]
 800cb94:	46a2      	mov	sl, r4
 800cb96:	e7d2      	b.n	800cb3e <_vfiprintf_r+0xc6>
 800cb98:	9b03      	ldr	r3, [sp, #12]
 800cb9a:	1d19      	adds	r1, r3, #4
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	9103      	str	r1, [sp, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	bfbb      	ittet	lt
 800cba4:	425b      	neglt	r3, r3
 800cba6:	f042 0202 	orrlt.w	r2, r2, #2
 800cbaa:	9307      	strge	r3, [sp, #28]
 800cbac:	9307      	strlt	r3, [sp, #28]
 800cbae:	bfb8      	it	lt
 800cbb0:	9204      	strlt	r2, [sp, #16]
 800cbb2:	7823      	ldrb	r3, [r4, #0]
 800cbb4:	2b2e      	cmp	r3, #46	; 0x2e
 800cbb6:	d10c      	bne.n	800cbd2 <_vfiprintf_r+0x15a>
 800cbb8:	7863      	ldrb	r3, [r4, #1]
 800cbba:	2b2a      	cmp	r3, #42	; 0x2a
 800cbbc:	d134      	bne.n	800cc28 <_vfiprintf_r+0x1b0>
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	1d1a      	adds	r2, r3, #4
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	9203      	str	r2, [sp, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	bfb8      	it	lt
 800cbca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cbce:	3402      	adds	r4, #2
 800cbd0:	9305      	str	r3, [sp, #20]
 800cbd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cca8 <_vfiprintf_r+0x230>
 800cbd6:	7821      	ldrb	r1, [r4, #0]
 800cbd8:	2203      	movs	r2, #3
 800cbda:	4650      	mov	r0, sl
 800cbdc:	f7f3 faf8 	bl	80001d0 <memchr>
 800cbe0:	b138      	cbz	r0, 800cbf2 <_vfiprintf_r+0x17a>
 800cbe2:	9b04      	ldr	r3, [sp, #16]
 800cbe4:	eba0 000a 	sub.w	r0, r0, sl
 800cbe8:	2240      	movs	r2, #64	; 0x40
 800cbea:	4082      	lsls	r2, r0
 800cbec:	4313      	orrs	r3, r2
 800cbee:	3401      	adds	r4, #1
 800cbf0:	9304      	str	r3, [sp, #16]
 800cbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf6:	4829      	ldr	r0, [pc, #164]	; (800cc9c <_vfiprintf_r+0x224>)
 800cbf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbfc:	2206      	movs	r2, #6
 800cbfe:	f7f3 fae7 	bl	80001d0 <memchr>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d03f      	beq.n	800cc86 <_vfiprintf_r+0x20e>
 800cc06:	4b26      	ldr	r3, [pc, #152]	; (800cca0 <_vfiprintf_r+0x228>)
 800cc08:	bb1b      	cbnz	r3, 800cc52 <_vfiprintf_r+0x1da>
 800cc0a:	9b03      	ldr	r3, [sp, #12]
 800cc0c:	3307      	adds	r3, #7
 800cc0e:	f023 0307 	bic.w	r3, r3, #7
 800cc12:	3308      	adds	r3, #8
 800cc14:	9303      	str	r3, [sp, #12]
 800cc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc18:	443b      	add	r3, r7
 800cc1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1c:	e768      	b.n	800caf0 <_vfiprintf_r+0x78>
 800cc1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc22:	460c      	mov	r4, r1
 800cc24:	2001      	movs	r0, #1
 800cc26:	e7a6      	b.n	800cb76 <_vfiprintf_r+0xfe>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	3401      	adds	r4, #1
 800cc2c:	9305      	str	r3, [sp, #20]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	f04f 0c0a 	mov.w	ip, #10
 800cc34:	4620      	mov	r0, r4
 800cc36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc3a:	3a30      	subs	r2, #48	; 0x30
 800cc3c:	2a09      	cmp	r2, #9
 800cc3e:	d903      	bls.n	800cc48 <_vfiprintf_r+0x1d0>
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d0c6      	beq.n	800cbd2 <_vfiprintf_r+0x15a>
 800cc44:	9105      	str	r1, [sp, #20]
 800cc46:	e7c4      	b.n	800cbd2 <_vfiprintf_r+0x15a>
 800cc48:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e7f0      	b.n	800cc34 <_vfiprintf_r+0x1bc>
 800cc52:	ab03      	add	r3, sp, #12
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	462a      	mov	r2, r5
 800cc58:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <_vfiprintf_r+0x22c>)
 800cc5a:	a904      	add	r1, sp, #16
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7fb f9f5 	bl	800804c <_printf_float>
 800cc62:	4607      	mov	r7, r0
 800cc64:	1c78      	adds	r0, r7, #1
 800cc66:	d1d6      	bne.n	800cc16 <_vfiprintf_r+0x19e>
 800cc68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc6a:	07d9      	lsls	r1, r3, #31
 800cc6c:	d405      	bmi.n	800cc7a <_vfiprintf_r+0x202>
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	059a      	lsls	r2, r3, #22
 800cc72:	d402      	bmi.n	800cc7a <_vfiprintf_r+0x202>
 800cc74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc76:	f7fd f851 	bl	8009d1c <__retarget_lock_release_recursive>
 800cc7a:	89ab      	ldrh	r3, [r5, #12]
 800cc7c:	065b      	lsls	r3, r3, #25
 800cc7e:	f53f af1d 	bmi.w	800cabc <_vfiprintf_r+0x44>
 800cc82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc84:	e71c      	b.n	800cac0 <_vfiprintf_r+0x48>
 800cc86:	ab03      	add	r3, sp, #12
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	462a      	mov	r2, r5
 800cc8c:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <_vfiprintf_r+0x22c>)
 800cc8e:	a904      	add	r1, sp, #16
 800cc90:	4630      	mov	r0, r6
 800cc92:	f7fb fc7f 	bl	8008594 <_printf_i>
 800cc96:	e7e4      	b.n	800cc62 <_vfiprintf_r+0x1ea>
 800cc98:	0800d38e 	.word	0x0800d38e
 800cc9c:	0800d398 	.word	0x0800d398
 800cca0:	0800804d 	.word	0x0800804d
 800cca4:	0800ca55 	.word	0x0800ca55
 800cca8:	0800d394 	.word	0x0800d394

0800ccac <__swbuf_r>:
 800ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccae:	460e      	mov	r6, r1
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	b118      	cbz	r0, 800ccbe <__swbuf_r+0x12>
 800ccb6:	6a03      	ldr	r3, [r0, #32]
 800ccb8:	b90b      	cbnz	r3, 800ccbe <__swbuf_r+0x12>
 800ccba:	f7fc f8bb 	bl	8008e34 <__sinit>
 800ccbe:	69a3      	ldr	r3, [r4, #24]
 800ccc0:	60a3      	str	r3, [r4, #8]
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	071a      	lsls	r2, r3, #28
 800ccc6:	d525      	bpl.n	800cd14 <__swbuf_r+0x68>
 800ccc8:	6923      	ldr	r3, [r4, #16]
 800ccca:	b31b      	cbz	r3, 800cd14 <__swbuf_r+0x68>
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	6922      	ldr	r2, [r4, #16]
 800ccd0:	1a98      	subs	r0, r3, r2
 800ccd2:	6963      	ldr	r3, [r4, #20]
 800ccd4:	b2f6      	uxtb	r6, r6
 800ccd6:	4283      	cmp	r3, r0
 800ccd8:	4637      	mov	r7, r6
 800ccda:	dc04      	bgt.n	800cce6 <__swbuf_r+0x3a>
 800ccdc:	4621      	mov	r1, r4
 800ccde:	4628      	mov	r0, r5
 800cce0:	f7ff f856 	bl	800bd90 <_fflush_r>
 800cce4:	b9e0      	cbnz	r0, 800cd20 <__swbuf_r+0x74>
 800cce6:	68a3      	ldr	r3, [r4, #8]
 800cce8:	3b01      	subs	r3, #1
 800ccea:	60a3      	str	r3, [r4, #8]
 800ccec:	6823      	ldr	r3, [r4, #0]
 800ccee:	1c5a      	adds	r2, r3, #1
 800ccf0:	6022      	str	r2, [r4, #0]
 800ccf2:	701e      	strb	r6, [r3, #0]
 800ccf4:	6962      	ldr	r2, [r4, #20]
 800ccf6:	1c43      	adds	r3, r0, #1
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d004      	beq.n	800cd06 <__swbuf_r+0x5a>
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	07db      	lsls	r3, r3, #31
 800cd00:	d506      	bpl.n	800cd10 <__swbuf_r+0x64>
 800cd02:	2e0a      	cmp	r6, #10
 800cd04:	d104      	bne.n	800cd10 <__swbuf_r+0x64>
 800cd06:	4621      	mov	r1, r4
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f7ff f841 	bl	800bd90 <_fflush_r>
 800cd0e:	b938      	cbnz	r0, 800cd20 <__swbuf_r+0x74>
 800cd10:	4638      	mov	r0, r7
 800cd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd14:	4621      	mov	r1, r4
 800cd16:	4628      	mov	r0, r5
 800cd18:	f000 f806 	bl	800cd28 <__swsetup_r>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d0d5      	beq.n	800cccc <__swbuf_r+0x20>
 800cd20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cd24:	e7f4      	b.n	800cd10 <__swbuf_r+0x64>
	...

0800cd28 <__swsetup_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4b2a      	ldr	r3, [pc, #168]	; (800cdd4 <__swsetup_r+0xac>)
 800cd2c:	4605      	mov	r5, r0
 800cd2e:	6818      	ldr	r0, [r3, #0]
 800cd30:	460c      	mov	r4, r1
 800cd32:	b118      	cbz	r0, 800cd3c <__swsetup_r+0x14>
 800cd34:	6a03      	ldr	r3, [r0, #32]
 800cd36:	b90b      	cbnz	r3, 800cd3c <__swsetup_r+0x14>
 800cd38:	f7fc f87c 	bl	8008e34 <__sinit>
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd42:	0718      	lsls	r0, r3, #28
 800cd44:	d422      	bmi.n	800cd8c <__swsetup_r+0x64>
 800cd46:	06d9      	lsls	r1, r3, #27
 800cd48:	d407      	bmi.n	800cd5a <__swsetup_r+0x32>
 800cd4a:	2309      	movs	r3, #9
 800cd4c:	602b      	str	r3, [r5, #0]
 800cd4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd52:	81a3      	strh	r3, [r4, #12]
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd58:	e034      	b.n	800cdc4 <__swsetup_r+0x9c>
 800cd5a:	0758      	lsls	r0, r3, #29
 800cd5c:	d512      	bpl.n	800cd84 <__swsetup_r+0x5c>
 800cd5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd60:	b141      	cbz	r1, 800cd74 <__swsetup_r+0x4c>
 800cd62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd66:	4299      	cmp	r1, r3
 800cd68:	d002      	beq.n	800cd70 <__swsetup_r+0x48>
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f7fd fe7a 	bl	800aa64 <_free_r>
 800cd70:	2300      	movs	r3, #0
 800cd72:	6363      	str	r3, [r4, #52]	; 0x34
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	6063      	str	r3, [r4, #4]
 800cd80:	6923      	ldr	r3, [r4, #16]
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	f043 0308 	orr.w	r3, r3, #8
 800cd8a:	81a3      	strh	r3, [r4, #12]
 800cd8c:	6923      	ldr	r3, [r4, #16]
 800cd8e:	b94b      	cbnz	r3, 800cda4 <__swsetup_r+0x7c>
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd9a:	d003      	beq.n	800cda4 <__swsetup_r+0x7c>
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	4628      	mov	r0, r5
 800cda0:	f000 f840 	bl	800ce24 <__smakebuf_r>
 800cda4:	89a0      	ldrh	r0, [r4, #12]
 800cda6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdaa:	f010 0301 	ands.w	r3, r0, #1
 800cdae:	d00a      	beq.n	800cdc6 <__swsetup_r+0x9e>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	60a3      	str	r3, [r4, #8]
 800cdb4:	6963      	ldr	r3, [r4, #20]
 800cdb6:	425b      	negs	r3, r3
 800cdb8:	61a3      	str	r3, [r4, #24]
 800cdba:	6923      	ldr	r3, [r4, #16]
 800cdbc:	b943      	cbnz	r3, 800cdd0 <__swsetup_r+0xa8>
 800cdbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cdc2:	d1c4      	bne.n	800cd4e <__swsetup_r+0x26>
 800cdc4:	bd38      	pop	{r3, r4, r5, pc}
 800cdc6:	0781      	lsls	r1, r0, #30
 800cdc8:	bf58      	it	pl
 800cdca:	6963      	ldrpl	r3, [r4, #20]
 800cdcc:	60a3      	str	r3, [r4, #8]
 800cdce:	e7f4      	b.n	800cdba <__swsetup_r+0x92>
 800cdd0:	2000      	movs	r0, #0
 800cdd2:	e7f7      	b.n	800cdc4 <__swsetup_r+0x9c>
 800cdd4:	200001d4 	.word	0x200001d4

0800cdd8 <__swhatbuf_r>:
 800cdd8:	b570      	push	{r4, r5, r6, lr}
 800cdda:	460c      	mov	r4, r1
 800cddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cde0:	2900      	cmp	r1, #0
 800cde2:	b096      	sub	sp, #88	; 0x58
 800cde4:	4615      	mov	r5, r2
 800cde6:	461e      	mov	r6, r3
 800cde8:	da0d      	bge.n	800ce06 <__swhatbuf_r+0x2e>
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdf0:	f04f 0100 	mov.w	r1, #0
 800cdf4:	bf0c      	ite	eq
 800cdf6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdfa:	2340      	movne	r3, #64	; 0x40
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	6031      	str	r1, [r6, #0]
 800ce00:	602b      	str	r3, [r5, #0]
 800ce02:	b016      	add	sp, #88	; 0x58
 800ce04:	bd70      	pop	{r4, r5, r6, pc}
 800ce06:	466a      	mov	r2, sp
 800ce08:	f000 f848 	bl	800ce9c <_fstat_r>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	dbec      	blt.n	800cdea <__swhatbuf_r+0x12>
 800ce10:	9901      	ldr	r1, [sp, #4]
 800ce12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce1a:	4259      	negs	r1, r3
 800ce1c:	4159      	adcs	r1, r3
 800ce1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce22:	e7eb      	b.n	800cdfc <__swhatbuf_r+0x24>

0800ce24 <__smakebuf_r>:
 800ce24:	898b      	ldrh	r3, [r1, #12]
 800ce26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce28:	079d      	lsls	r5, r3, #30
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	d507      	bpl.n	800ce40 <__smakebuf_r+0x1c>
 800ce30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	6123      	str	r3, [r4, #16]
 800ce38:	2301      	movs	r3, #1
 800ce3a:	6163      	str	r3, [r4, #20]
 800ce3c:	b002      	add	sp, #8
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
 800ce40:	ab01      	add	r3, sp, #4
 800ce42:	466a      	mov	r2, sp
 800ce44:	f7ff ffc8 	bl	800cdd8 <__swhatbuf_r>
 800ce48:	9900      	ldr	r1, [sp, #0]
 800ce4a:	4605      	mov	r5, r0
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f7fe fcff 	bl	800b850 <_malloc_r>
 800ce52:	b948      	cbnz	r0, 800ce68 <__smakebuf_r+0x44>
 800ce54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce58:	059a      	lsls	r2, r3, #22
 800ce5a:	d4ef      	bmi.n	800ce3c <__smakebuf_r+0x18>
 800ce5c:	f023 0303 	bic.w	r3, r3, #3
 800ce60:	f043 0302 	orr.w	r3, r3, #2
 800ce64:	81a3      	strh	r3, [r4, #12]
 800ce66:	e7e3      	b.n	800ce30 <__smakebuf_r+0xc>
 800ce68:	89a3      	ldrh	r3, [r4, #12]
 800ce6a:	6020      	str	r0, [r4, #0]
 800ce6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	9b00      	ldr	r3, [sp, #0]
 800ce74:	6163      	str	r3, [r4, #20]
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	6120      	str	r0, [r4, #16]
 800ce7a:	b15b      	cbz	r3, 800ce94 <__smakebuf_r+0x70>
 800ce7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce80:	4630      	mov	r0, r6
 800ce82:	f000 f81d 	bl	800cec0 <_isatty_r>
 800ce86:	b128      	cbz	r0, 800ce94 <__smakebuf_r+0x70>
 800ce88:	89a3      	ldrh	r3, [r4, #12]
 800ce8a:	f023 0303 	bic.w	r3, r3, #3
 800ce8e:	f043 0301 	orr.w	r3, r3, #1
 800ce92:	81a3      	strh	r3, [r4, #12]
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	431d      	orrs	r5, r3
 800ce98:	81a5      	strh	r5, [r4, #12]
 800ce9a:	e7cf      	b.n	800ce3c <__smakebuf_r+0x18>

0800ce9c <_fstat_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d07      	ldr	r5, [pc, #28]	; (800cebc <_fstat_r+0x20>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	4611      	mov	r1, r2
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	f7f5 fc68 	bl	800277e <_fstat>
 800ceae:	1c43      	adds	r3, r0, #1
 800ceb0:	d102      	bne.n	800ceb8 <_fstat_r+0x1c>
 800ceb2:	682b      	ldr	r3, [r5, #0]
 800ceb4:	b103      	cbz	r3, 800ceb8 <_fstat_r+0x1c>
 800ceb6:	6023      	str	r3, [r4, #0]
 800ceb8:	bd38      	pop	{r3, r4, r5, pc}
 800ceba:	bf00      	nop
 800cebc:	20007918 	.word	0x20007918

0800cec0 <_isatty_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4d06      	ldr	r5, [pc, #24]	; (800cedc <_isatty_r+0x1c>)
 800cec4:	2300      	movs	r3, #0
 800cec6:	4604      	mov	r4, r0
 800cec8:	4608      	mov	r0, r1
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	f7f5 fc67 	bl	800279e <_isatty>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_isatty_r+0x1a>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_isatty_r+0x1a>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20007918 	.word	0x20007918

0800cee0 <_raise_r>:
 800cee0:	291f      	cmp	r1, #31
 800cee2:	b538      	push	{r3, r4, r5, lr}
 800cee4:	4604      	mov	r4, r0
 800cee6:	460d      	mov	r5, r1
 800cee8:	d904      	bls.n	800cef4 <_raise_r+0x14>
 800ceea:	2316      	movs	r3, #22
 800ceec:	6003      	str	r3, [r0, #0]
 800ceee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cef2:	bd38      	pop	{r3, r4, r5, pc}
 800cef4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cef6:	b112      	cbz	r2, 800cefe <_raise_r+0x1e>
 800cef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cefc:	b94b      	cbnz	r3, 800cf12 <_raise_r+0x32>
 800cefe:	4620      	mov	r0, r4
 800cf00:	f000 f830 	bl	800cf64 <_getpid_r>
 800cf04:	462a      	mov	r2, r5
 800cf06:	4601      	mov	r1, r0
 800cf08:	4620      	mov	r0, r4
 800cf0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf0e:	f000 b817 	b.w	800cf40 <_kill_r>
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d00a      	beq.n	800cf2c <_raise_r+0x4c>
 800cf16:	1c59      	adds	r1, r3, #1
 800cf18:	d103      	bne.n	800cf22 <_raise_r+0x42>
 800cf1a:	2316      	movs	r3, #22
 800cf1c:	6003      	str	r3, [r0, #0]
 800cf1e:	2001      	movs	r0, #1
 800cf20:	e7e7      	b.n	800cef2 <_raise_r+0x12>
 800cf22:	2400      	movs	r4, #0
 800cf24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf28:	4628      	mov	r0, r5
 800cf2a:	4798      	blx	r3
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	e7e0      	b.n	800cef2 <_raise_r+0x12>

0800cf30 <raise>:
 800cf30:	4b02      	ldr	r3, [pc, #8]	; (800cf3c <raise+0xc>)
 800cf32:	4601      	mov	r1, r0
 800cf34:	6818      	ldr	r0, [r3, #0]
 800cf36:	f7ff bfd3 	b.w	800cee0 <_raise_r>
 800cf3a:	bf00      	nop
 800cf3c:	200001d4 	.word	0x200001d4

0800cf40 <_kill_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4d07      	ldr	r5, [pc, #28]	; (800cf60 <_kill_r+0x20>)
 800cf44:	2300      	movs	r3, #0
 800cf46:	4604      	mov	r4, r0
 800cf48:	4608      	mov	r0, r1
 800cf4a:	4611      	mov	r1, r2
 800cf4c:	602b      	str	r3, [r5, #0]
 800cf4e:	f7f5 fbb7 	bl	80026c0 <_kill>
 800cf52:	1c43      	adds	r3, r0, #1
 800cf54:	d102      	bne.n	800cf5c <_kill_r+0x1c>
 800cf56:	682b      	ldr	r3, [r5, #0]
 800cf58:	b103      	cbz	r3, 800cf5c <_kill_r+0x1c>
 800cf5a:	6023      	str	r3, [r4, #0]
 800cf5c:	bd38      	pop	{r3, r4, r5, pc}
 800cf5e:	bf00      	nop
 800cf60:	20007918 	.word	0x20007918

0800cf64 <_getpid_r>:
 800cf64:	f7f5 bba4 	b.w	80026b0 <_getpid>

0800cf68 <_init>:
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	bf00      	nop
 800cf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6e:	bc08      	pop	{r3}
 800cf70:	469e      	mov	lr, r3
 800cf72:	4770      	bx	lr

0800cf74 <_fini>:
 800cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf76:	bf00      	nop
 800cf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf7a:	bc08      	pop	{r3}
 800cf7c:	469e      	mov	lr, r3
 800cf7e:	4770      	bx	lr
